// Code generated by Kitex v0.11.3. DO NOT EDIT.

package commonservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	common "github.com/cylScripter/openapi/common"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetFile(ctx context.Context, req *common.GetFileReq, callOptions ...callopt.Option) (r *common.GetFileResp, err error)
	GetFileList(ctx context.Context, req *common.GetFileListReq, callOptions ...callopt.Option) (r *common.GetFileListResp, err error)
	UploadFile(ctx context.Context, req *common.UploadFileReq, callOptions ...callopt.Option) (r *common.UploadFileResp, err error)
	CompleteFile(ctx context.Context, req *common.CompleteFileReq, callOptions ...callopt.Option) (r *common.CompleteFileResp, err error)
	UploadNewMultipart(ctx context.Context, req *common.UploadNewMultipartReq, callOptions ...callopt.Option) (r *common.UploadNewMultipartResp, err error)
	GetPresignedUrlList(ctx context.Context, req *common.GetPresignedUrlListReq, callOptions ...callopt.Option) (r *common.GetPresignedUrlListResp, err error)
	CompleteMultipart(ctx context.Context, req *common.CompleteMultipartReq, callOptions ...callopt.Option) (r *common.CompleteMultipartResp, err error)
	AbortMultipart(ctx context.Context, req *common.AbortMultipartReq, callOptions ...callopt.Option) (r *common.AbortMultipartResp, err error)
	GetObject(ctx context.Context, req *common.GetObjectReq, callOptions ...callopt.Option) (r *common.GetObjectResp, err error)
	DeleteObject(ctx context.Context, req *common.DeleteObjectReq, callOptions ...callopt.Option) (r *common.DeleteObjectResp, err error)
	CreateAsyncTask(ctx context.Context, req *common.CreateAsyncTaskReq, callOptions ...callopt.Option) (r *common.CreateAsyncTaskResp, err error)
	GetAsyncTaskResults(ctx context.Context, req *common.GetAsyncTaskResultsReq, callOptions ...callopt.Option) (r *common.GetAsyncTaskResultsResp, err error)
	UpdateAsyncTask(ctx context.Context, req *common.UpdateAsyncTaskReq, callOptions ...callopt.Option) (r *common.UpdateAsyncTaskResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kCommonserviceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCommonserviceClient struct {
	*kClient
}

func (p *kCommonserviceClient) GetFile(ctx context.Context, req *common.GetFileReq, callOptions ...callopt.Option) (r *common.GetFileResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFile(ctx, req)
}

func (p *kCommonserviceClient) GetFileList(ctx context.Context, req *common.GetFileListReq, callOptions ...callopt.Option) (r *common.GetFileListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFileList(ctx, req)
}

func (p *kCommonserviceClient) UploadFile(ctx context.Context, req *common.UploadFileReq, callOptions ...callopt.Option) (r *common.UploadFileResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadFile(ctx, req)
}

func (p *kCommonserviceClient) CompleteFile(ctx context.Context, req *common.CompleteFileReq, callOptions ...callopt.Option) (r *common.CompleteFileResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CompleteFile(ctx, req)
}

func (p *kCommonserviceClient) UploadNewMultipart(ctx context.Context, req *common.UploadNewMultipartReq, callOptions ...callopt.Option) (r *common.UploadNewMultipartResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadNewMultipart(ctx, req)
}

func (p *kCommonserviceClient) GetPresignedUrlList(ctx context.Context, req *common.GetPresignedUrlListReq, callOptions ...callopt.Option) (r *common.GetPresignedUrlListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPresignedUrlList(ctx, req)
}

func (p *kCommonserviceClient) CompleteMultipart(ctx context.Context, req *common.CompleteMultipartReq, callOptions ...callopt.Option) (r *common.CompleteMultipartResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CompleteMultipart(ctx, req)
}

func (p *kCommonserviceClient) AbortMultipart(ctx context.Context, req *common.AbortMultipartReq, callOptions ...callopt.Option) (r *common.AbortMultipartResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AbortMultipart(ctx, req)
}

func (p *kCommonserviceClient) GetObject(ctx context.Context, req *common.GetObjectReq, callOptions ...callopt.Option) (r *common.GetObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetObject(ctx, req)
}

func (p *kCommonserviceClient) DeleteObject(ctx context.Context, req *common.DeleteObjectReq, callOptions ...callopt.Option) (r *common.DeleteObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteObject(ctx, req)
}

func (p *kCommonserviceClient) CreateAsyncTask(ctx context.Context, req *common.CreateAsyncTaskReq, callOptions ...callopt.Option) (r *common.CreateAsyncTaskResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAsyncTask(ctx, req)
}

func (p *kCommonserviceClient) GetAsyncTaskResults(ctx context.Context, req *common.GetAsyncTaskResultsReq, callOptions ...callopt.Option) (r *common.GetAsyncTaskResultsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAsyncTaskResults(ctx, req)
}

func (p *kCommonserviceClient) UpdateAsyncTask(ctx context.Context, req *common.UpdateAsyncTaskReq, callOptions ...callopt.Option) (r *common.UpdateAsyncTaskResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAsyncTask(ctx, req)
}

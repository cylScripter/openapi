// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package education

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"github.com/cylScripter/openapi/base"
	"strings"
)

var (
	OnlinePlatform = []string{
		"学堂云网络教学平台",
		"职教云平台",
		"Blackboard 网络教学平台",
		"专业教学资源库",
		"慕课",
		"其他",
		"无",
	}

	OrderOnlinePlatform = []string{
		"精品（在线）开放课程",
		"微课",
		"私播课",
	}

	CourseApplyFieldMap = map[int32]string{
		1:  "开课部门",
		2:  "课程所属教研室",
		3:  "课程名称",
		4:  "教学班名称",
		5:  "行政班名称",
		6:  "教师名称",
		7:  "任务总学时",
		8:  "选课人数",
		9:  "学分",
		10: "课程性质",
		11: "起始周",
		12: "线上授课平台名称",
		13: "是否与其他教师共建资源",
		14: "是否校内教师自主知识产权",
		15: "资源共建分工情况",
		16: "备注",
		17: "课程资源准确网址",
		18: "非三大平台须填写登录账户和密码",
		19: "教研室主任审查意见",
	}

	InternshipCategoryMap = map[string]int32{
		"岗位实习（毕业作品）": 1,
		"毕业设计":       2,
	}
)

type GetFinalExamRecordListReqOption int64

const (
	GetFinalExamRecordListReqOption_academic_year GetFinalExamRecordListReqOption = 1
	GetFinalExamRecordListReqOption_semester      GetFinalExamRecordListReqOption = 2
	GetFinalExamRecordListReqOption_class_name    GetFinalExamRecordListReqOption = 3
	GetFinalExamRecordListReqOption_course_name   GetFinalExamRecordListReqOption = 4
)

func (p GetFinalExamRecordListReqOption) String() string {
	switch p {
	case GetFinalExamRecordListReqOption_academic_year:
		return "academic_year"
	case GetFinalExamRecordListReqOption_semester:
		return "semester"
	case GetFinalExamRecordListReqOption_class_name:
		return "class_name"
	case GetFinalExamRecordListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetFinalExamRecordListReqOptionFromString(s string) (GetFinalExamRecordListReqOption, error) {
	switch s {
	case "academic_year":
		return GetFinalExamRecordListReqOption_academic_year, nil
	case "semester":
		return GetFinalExamRecordListReqOption_semester, nil
	case "class_name":
		return GetFinalExamRecordListReqOption_class_name, nil
	case "course_name":
		return GetFinalExamRecordListReqOption_course_name, nil
	}
	return GetFinalExamRecordListReqOption(0), fmt.Errorf("not a valid GetFinalExamRecordListReqOption string")
}

func GetFinalExamRecordListReqOptionPtr(v GetFinalExamRecordListReqOption) *GetFinalExamRecordListReqOption {
	return &v
}
func (p *GetFinalExamRecordListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetFinalExamRecordListReqOption(result.Int64)
	return
}

func (p *GetFinalExamRecordListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetFinalExamSubjectListReqOption int64

const (
	GetFinalExamSubjectListReqOption_academic_year GetFinalExamSubjectListReqOption = 2
	GetFinalExamSubjectListReqOption_semester      GetFinalExamSubjectListReqOption = 3
	GetFinalExamSubjectListReqOption_class_name    GetFinalExamSubjectListReqOption = 5
	GetFinalExamSubjectListReqOption_course_name   GetFinalExamSubjectListReqOption = 6
)

func (p GetFinalExamSubjectListReqOption) String() string {
	switch p {
	case GetFinalExamSubjectListReqOption_academic_year:
		return "academic_year"
	case GetFinalExamSubjectListReqOption_semester:
		return "semester"
	case GetFinalExamSubjectListReqOption_class_name:
		return "class_name"
	case GetFinalExamSubjectListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetFinalExamSubjectListReqOptionFromString(s string) (GetFinalExamSubjectListReqOption, error) {
	switch s {
	case "academic_year":
		return GetFinalExamSubjectListReqOption_academic_year, nil
	case "semester":
		return GetFinalExamSubjectListReqOption_semester, nil
	case "class_name":
		return GetFinalExamSubjectListReqOption_class_name, nil
	case "course_name":
		return GetFinalExamSubjectListReqOption_course_name, nil
	}
	return GetFinalExamSubjectListReqOption(0), fmt.Errorf("not a valid GetFinalExamSubjectListReqOption string")
}

func GetFinalExamSubjectListReqOptionPtr(v GetFinalExamSubjectListReqOption) *GetFinalExamSubjectListReqOption {
	return &v
}
func (p *GetFinalExamSubjectListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetFinalExamSubjectListReqOption(result.Int64)
	return
}

func (p *GetFinalExamSubjectListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetFinalExamListReqOption int64

const (
	GetFinalExamListReqOption_id            GetFinalExamListReqOption = 1
	GetFinalExamListReqOption_academic_year GetFinalExamListReqOption = 2
	GetFinalExamListReqOption_semester      GetFinalExamListReqOption = 3
	GetFinalExamListReqOption_class_name    GetFinalExamListReqOption = 4
	GetFinalExamListReqOption_course_name   GetFinalExamListReqOption = 5
)

func (p GetFinalExamListReqOption) String() string {
	switch p {
	case GetFinalExamListReqOption_id:
		return "id"
	case GetFinalExamListReqOption_academic_year:
		return "academic_year"
	case GetFinalExamListReqOption_semester:
		return "semester"
	case GetFinalExamListReqOption_class_name:
		return "class_name"
	case GetFinalExamListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetFinalExamListReqOptionFromString(s string) (GetFinalExamListReqOption, error) {
	switch s {
	case "id":
		return GetFinalExamListReqOption_id, nil
	case "academic_year":
		return GetFinalExamListReqOption_academic_year, nil
	case "semester":
		return GetFinalExamListReqOption_semester, nil
	case "class_name":
		return GetFinalExamListReqOption_class_name, nil
	case "course_name":
		return GetFinalExamListReqOption_course_name, nil
	}
	return GetFinalExamListReqOption(0), fmt.Errorf("not a valid GetFinalExamListReqOption string")
}

func GetFinalExamListReqOptionPtr(v GetFinalExamListReqOption) *GetFinalExamListReqOption { return &v }
func (p *GetFinalExamListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetFinalExamListReqOption(result.Int64)
	return
}

func (p *GetFinalExamListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetSelfTrainingCourseListReqOption int64

const (
	GetSelfTrainingCourseListReqOption_id            GetSelfTrainingCourseListReqOption = 1
	GetSelfTrainingCourseListReqOption_academic_year GetSelfTrainingCourseListReqOption = 2
	GetSelfTrainingCourseListReqOption_semester      GetSelfTrainingCourseListReqOption = 3
	GetSelfTrainingCourseListReqOption_major         GetSelfTrainingCourseListReqOption = 4
	GetSelfTrainingCourseListReqOption_class_name    GetSelfTrainingCourseListReqOption = 5
	GetSelfTrainingCourseListReqOption_course_name   GetSelfTrainingCourseListReqOption = 6
)

func (p GetSelfTrainingCourseListReqOption) String() string {
	switch p {
	case GetSelfTrainingCourseListReqOption_id:
		return "id"
	case GetSelfTrainingCourseListReqOption_academic_year:
		return "academic_year"
	case GetSelfTrainingCourseListReqOption_semester:
		return "semester"
	case GetSelfTrainingCourseListReqOption_major:
		return "major"
	case GetSelfTrainingCourseListReqOption_class_name:
		return "class_name"
	case GetSelfTrainingCourseListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetSelfTrainingCourseListReqOptionFromString(s string) (GetSelfTrainingCourseListReqOption, error) {
	switch s {
	case "id":
		return GetSelfTrainingCourseListReqOption_id, nil
	case "academic_year":
		return GetSelfTrainingCourseListReqOption_academic_year, nil
	case "semester":
		return GetSelfTrainingCourseListReqOption_semester, nil
	case "major":
		return GetSelfTrainingCourseListReqOption_major, nil
	case "class_name":
		return GetSelfTrainingCourseListReqOption_class_name, nil
	case "course_name":
		return GetSelfTrainingCourseListReqOption_course_name, nil
	}
	return GetSelfTrainingCourseListReqOption(0), fmt.Errorf("not a valid GetSelfTrainingCourseListReqOption string")
}

func GetSelfTrainingCourseListReqOptionPtr(v GetSelfTrainingCourseListReqOption) *GetSelfTrainingCourseListReqOption {
	return &v
}
func (p *GetSelfTrainingCourseListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetSelfTrainingCourseListReqOption(result.Int64)
	return
}

func (p *GetSelfTrainingCourseListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetTrainingCourseListReqOption int64

const (
	GetTrainingCourseListReqOption_id            GetTrainingCourseListReqOption = 1
	GetTrainingCourseListReqOption_academic_year GetTrainingCourseListReqOption = 2
	GetTrainingCourseListReqOption_semester      GetTrainingCourseListReqOption = 3
	GetTrainingCourseListReqOption_major         GetTrainingCourseListReqOption = 4
	GetTrainingCourseListReqOption_class_name    GetTrainingCourseListReqOption = 5
	GetTrainingCourseListReqOption_course_name   GetTrainingCourseListReqOption = 6
)

func (p GetTrainingCourseListReqOption) String() string {
	switch p {
	case GetTrainingCourseListReqOption_id:
		return "id"
	case GetTrainingCourseListReqOption_academic_year:
		return "academic_year"
	case GetTrainingCourseListReqOption_semester:
		return "semester"
	case GetTrainingCourseListReqOption_major:
		return "major"
	case GetTrainingCourseListReqOption_class_name:
		return "class_name"
	case GetTrainingCourseListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetTrainingCourseListReqOptionFromString(s string) (GetTrainingCourseListReqOption, error) {
	switch s {
	case "id":
		return GetTrainingCourseListReqOption_id, nil
	case "academic_year":
		return GetTrainingCourseListReqOption_academic_year, nil
	case "semester":
		return GetTrainingCourseListReqOption_semester, nil
	case "major":
		return GetTrainingCourseListReqOption_major, nil
	case "class_name":
		return GetTrainingCourseListReqOption_class_name, nil
	case "course_name":
		return GetTrainingCourseListReqOption_course_name, nil
	}
	return GetTrainingCourseListReqOption(0), fmt.Errorf("not a valid GetTrainingCourseListReqOption string")
}

func GetTrainingCourseListReqOptionPtr(v GetTrainingCourseListReqOption) *GetTrainingCourseListReqOption {
	return &v
}
func (p *GetTrainingCourseListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetTrainingCourseListReqOption(result.Int64)
	return
}

func (p *GetTrainingCourseListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetInternshipListReqOption int64

const (
	GetInternshipListReqOption_id            GetInternshipListReqOption = 1
	GetInternshipListReqOption_academic_year GetInternshipListReqOption = 2
	GetInternshipListReqOption_semester      GetInternshipListReqOption = 3
	GetInternshipListReqOption_teacher_id    GetInternshipListReqOption = 4
	GetInternshipListReqOption_teacher_name  GetInternshipListReqOption = 5
	GetInternshipListReqOption_teach_class   GetInternshipListReqOption = 6
	GetInternshipListReqOption_class_name    GetInternshipListReqOption = 7
	GetInternshipListReqOption_category      GetInternshipListReqOption = 8
)

func (p GetInternshipListReqOption) String() string {
	switch p {
	case GetInternshipListReqOption_id:
		return "id"
	case GetInternshipListReqOption_academic_year:
		return "academic_year"
	case GetInternshipListReqOption_semester:
		return "semester"
	case GetInternshipListReqOption_teacher_id:
		return "teacher_id"
	case GetInternshipListReqOption_teacher_name:
		return "teacher_name"
	case GetInternshipListReqOption_teach_class:
		return "teach_class"
	case GetInternshipListReqOption_class_name:
		return "class_name"
	case GetInternshipListReqOption_category:
		return "category"
	}
	return "<UNSET>"
}

func GetInternshipListReqOptionFromString(s string) (GetInternshipListReqOption, error) {
	switch s {
	case "id":
		return GetInternshipListReqOption_id, nil
	case "academic_year":
		return GetInternshipListReqOption_academic_year, nil
	case "semester":
		return GetInternshipListReqOption_semester, nil
	case "teacher_id":
		return GetInternshipListReqOption_teacher_id, nil
	case "teacher_name":
		return GetInternshipListReqOption_teacher_name, nil
	case "teach_class":
		return GetInternshipListReqOption_teach_class, nil
	case "class_name":
		return GetInternshipListReqOption_class_name, nil
	case "category":
		return GetInternshipListReqOption_category, nil
	}
	return GetInternshipListReqOption(0), fmt.Errorf("not a valid GetInternshipListReqOption string")
}

func GetInternshipListReqOptionPtr(v GetInternshipListReqOption) *GetInternshipListReqOption {
	return &v
}
func (p *GetInternshipListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetInternshipListReqOption(result.Int64)
	return
}

func (p *GetInternshipListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetHolidayListReqOption int64

const (
	GetHolidayListReqOption_id            GetHolidayListReqOption = 1
	GetHolidayListReqOption_academic_year GetHolidayListReqOption = 2
	GetHolidayListReqOption_semester      GetHolidayListReqOption = 3
	GetHolidayListReqOption_name          GetHolidayListReqOption = 4
)

func (p GetHolidayListReqOption) String() string {
	switch p {
	case GetHolidayListReqOption_id:
		return "id"
	case GetHolidayListReqOption_academic_year:
		return "academic_year"
	case GetHolidayListReqOption_semester:
		return "semester"
	case GetHolidayListReqOption_name:
		return "name"
	}
	return "<UNSET>"
}

func GetHolidayListReqOptionFromString(s string) (GetHolidayListReqOption, error) {
	switch s {
	case "id":
		return GetHolidayListReqOption_id, nil
	case "academic_year":
		return GetHolidayListReqOption_academic_year, nil
	case "semester":
		return GetHolidayListReqOption_semester, nil
	case "name":
		return GetHolidayListReqOption_name, nil
	}
	return GetHolidayListReqOption(0), fmt.Errorf("not a valid GetHolidayListReqOption string")
}

func GetHolidayListReqOptionPtr(v GetHolidayListReqOption) *GetHolidayListReqOption { return &v }
func (p *GetHolidayListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetHolidayListReqOption(result.Int64)
	return
}

func (p *GetHolidayListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetSelfCourseApplicationListReqOption int64

const (
	GetSelfCourseApplicationListReqOption_id            GetSelfCourseApplicationListReqOption = 1
	GetSelfCourseApplicationListReqOption_academic_year GetSelfCourseApplicationListReqOption = 2
	GetSelfCourseApplicationListReqOption_semester      GetSelfCourseApplicationListReqOption = 3
	GetSelfCourseApplicationListReqOption_course_name   GetSelfCourseApplicationListReqOption = 4
)

func (p GetSelfCourseApplicationListReqOption) String() string {
	switch p {
	case GetSelfCourseApplicationListReqOption_id:
		return "id"
	case GetSelfCourseApplicationListReqOption_academic_year:
		return "academic_year"
	case GetSelfCourseApplicationListReqOption_semester:
		return "semester"
	case GetSelfCourseApplicationListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetSelfCourseApplicationListReqOptionFromString(s string) (GetSelfCourseApplicationListReqOption, error) {
	switch s {
	case "id":
		return GetSelfCourseApplicationListReqOption_id, nil
	case "academic_year":
		return GetSelfCourseApplicationListReqOption_academic_year, nil
	case "semester":
		return GetSelfCourseApplicationListReqOption_semester, nil
	case "course_name":
		return GetSelfCourseApplicationListReqOption_course_name, nil
	}
	return GetSelfCourseApplicationListReqOption(0), fmt.Errorf("not a valid GetSelfCourseApplicationListReqOption string")
}

func GetSelfCourseApplicationListReqOptionPtr(v GetSelfCourseApplicationListReqOption) *GetSelfCourseApplicationListReqOption {
	return &v
}
func (p *GetSelfCourseApplicationListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetSelfCourseApplicationListReqOption(result.Int64)
	return
}

func (p *GetSelfCourseApplicationListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetCourseApplicationListReqOption int64

const (
	GetCourseApplicationListReqOption_id            GetCourseApplicationListReqOption = 1
	GetCourseApplicationListReqOption_academic_year GetCourseApplicationListReqOption = 2
	GetCourseApplicationListReqOption_semester      GetCourseApplicationListReqOption = 3
	GetCourseApplicationListReqOption_course_name   GetCourseApplicationListReqOption = 4
)

func (p GetCourseApplicationListReqOption) String() string {
	switch p {
	case GetCourseApplicationListReqOption_id:
		return "id"
	case GetCourseApplicationListReqOption_academic_year:
		return "academic_year"
	case GetCourseApplicationListReqOption_semester:
		return "semester"
	case GetCourseApplicationListReqOption_course_name:
		return "course_name"
	}
	return "<UNSET>"
}

func GetCourseApplicationListReqOptionFromString(s string) (GetCourseApplicationListReqOption, error) {
	switch s {
	case "id":
		return GetCourseApplicationListReqOption_id, nil
	case "academic_year":
		return GetCourseApplicationListReqOption_academic_year, nil
	case "semester":
		return GetCourseApplicationListReqOption_semester, nil
	case "course_name":
		return GetCourseApplicationListReqOption_course_name, nil
	}
	return GetCourseApplicationListReqOption(0), fmt.Errorf("not a valid GetCourseApplicationListReqOption string")
}

func GetCourseApplicationListReqOptionPtr(v GetCourseApplicationListReqOption) *GetCourseApplicationListReqOption {
	return &v
}
func (p *GetCourseApplicationListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetCourseApplicationListReqOption(result.Int64)
	return
}

func (p *GetCourseApplicationListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetSelfCourseListReqOption int64

const (
	GetSelfCourseListReqOption_id                      GetSelfCourseListReqOption = 1
	GetSelfCourseListReqOption_academic_year           GetSelfCourseListReqOption = 2
	GetSelfCourseListReqOption_semester                GetSelfCourseListReqOption = 3
	GetSelfCourseListReqOption_course_type             GetSelfCourseListReqOption = 6
	GetSelfCourseListReqOption_course_category         GetSelfCourseListReqOption = 7
	GetSelfCourseListReqOption_assessment_method       GetSelfCourseListReqOption = 8
	GetSelfCourseListReqOption_course_name             GetSelfCourseListReqOption = 9
	GetSelfCourseListReqOption_teach_class             GetSelfCourseListReqOption = 10
	GetSelfCourseListReqOption_class_name              GetSelfCourseListReqOption = 11
	GetSelfCourseListReqOption_is_collaborative_course GetSelfCourseListReqOption = 12
)

func (p GetSelfCourseListReqOption) String() string {
	switch p {
	case GetSelfCourseListReqOption_id:
		return "id"
	case GetSelfCourseListReqOption_academic_year:
		return "academic_year"
	case GetSelfCourseListReqOption_semester:
		return "semester"
	case GetSelfCourseListReqOption_course_type:
		return "course_type"
	case GetSelfCourseListReqOption_course_category:
		return "course_category"
	case GetSelfCourseListReqOption_assessment_method:
		return "assessment_method"
	case GetSelfCourseListReqOption_course_name:
		return "course_name"
	case GetSelfCourseListReqOption_teach_class:
		return "teach_class"
	case GetSelfCourseListReqOption_class_name:
		return "class_name"
	case GetSelfCourseListReqOption_is_collaborative_course:
		return "is_collaborative_course"
	}
	return "<UNSET>"
}

func GetSelfCourseListReqOptionFromString(s string) (GetSelfCourseListReqOption, error) {
	switch s {
	case "id":
		return GetSelfCourseListReqOption_id, nil
	case "academic_year":
		return GetSelfCourseListReqOption_academic_year, nil
	case "semester":
		return GetSelfCourseListReqOption_semester, nil
	case "course_type":
		return GetSelfCourseListReqOption_course_type, nil
	case "course_category":
		return GetSelfCourseListReqOption_course_category, nil
	case "assessment_method":
		return GetSelfCourseListReqOption_assessment_method, nil
	case "course_name":
		return GetSelfCourseListReqOption_course_name, nil
	case "teach_class":
		return GetSelfCourseListReqOption_teach_class, nil
	case "class_name":
		return GetSelfCourseListReqOption_class_name, nil
	case "is_collaborative_course":
		return GetSelfCourseListReqOption_is_collaborative_course, nil
	}
	return GetSelfCourseListReqOption(0), fmt.Errorf("not a valid GetSelfCourseListReqOption string")
}

func GetSelfCourseListReqOptionPtr(v GetSelfCourseListReqOption) *GetSelfCourseListReqOption {
	return &v
}
func (p *GetSelfCourseListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetSelfCourseListReqOption(result.Int64)
	return
}

func (p *GetSelfCourseListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetCourseListReqOption int64

const (
	GetCourseListReqOption_id                      GetCourseListReqOption = 1
	GetCourseListReqOption_academic_year           GetCourseListReqOption = 2
	GetCourseListReqOption_semester                GetCourseListReqOption = 3
	GetCourseListReqOption_teacher_id              GetCourseListReqOption = 4
	GetCourseListReqOption_teacher_name            GetCourseListReqOption = 5
	GetCourseListReqOption_course_type             GetCourseListReqOption = 6
	GetCourseListReqOption_course_category         GetCourseListReqOption = 7
	GetCourseListReqOption_assessment_method       GetCourseListReqOption = 8
	GetCourseListReqOption_course_name             GetCourseListReqOption = 9
	GetCourseListReqOption_teach_class             GetCourseListReqOption = 10
	GetCourseListReqOption_class_name              GetCourseListReqOption = 11
	GetCourseListReqOption_is_collaborative_course GetCourseListReqOption = 12
)

func (p GetCourseListReqOption) String() string {
	switch p {
	case GetCourseListReqOption_id:
		return "id"
	case GetCourseListReqOption_academic_year:
		return "academic_year"
	case GetCourseListReqOption_semester:
		return "semester"
	case GetCourseListReqOption_teacher_id:
		return "teacher_id"
	case GetCourseListReqOption_teacher_name:
		return "teacher_name"
	case GetCourseListReqOption_course_type:
		return "course_type"
	case GetCourseListReqOption_course_category:
		return "course_category"
	case GetCourseListReqOption_assessment_method:
		return "assessment_method"
	case GetCourseListReqOption_course_name:
		return "course_name"
	case GetCourseListReqOption_teach_class:
		return "teach_class"
	case GetCourseListReqOption_class_name:
		return "class_name"
	case GetCourseListReqOption_is_collaborative_course:
		return "is_collaborative_course"
	}
	return "<UNSET>"
}

func GetCourseListReqOptionFromString(s string) (GetCourseListReqOption, error) {
	switch s {
	case "id":
		return GetCourseListReqOption_id, nil
	case "academic_year":
		return GetCourseListReqOption_academic_year, nil
	case "semester":
		return GetCourseListReqOption_semester, nil
	case "teacher_id":
		return GetCourseListReqOption_teacher_id, nil
	case "teacher_name":
		return GetCourseListReqOption_teacher_name, nil
	case "course_type":
		return GetCourseListReqOption_course_type, nil
	case "course_category":
		return GetCourseListReqOption_course_category, nil
	case "assessment_method":
		return GetCourseListReqOption_assessment_method, nil
	case "course_name":
		return GetCourseListReqOption_course_name, nil
	case "teach_class":
		return GetCourseListReqOption_teach_class, nil
	case "class_name":
		return GetCourseListReqOption_class_name, nil
	case "is_collaborative_course":
		return GetCourseListReqOption_is_collaborative_course, nil
	}
	return GetCourseListReqOption(0), fmt.Errorf("not a valid GetCourseListReqOption string")
}

func GetCourseListReqOptionPtr(v GetCourseListReqOption) *GetCourseListReqOption { return &v }
func (p *GetCourseListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetCourseListReqOption(result.Int64)
	return
}

func (p *GetCourseListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetTeacherInfoListReqOption int64

const (
	GetTeacherInfoListReqOption_id          GetTeacherInfoListReqOption = 1
	GetTeacherInfoListReqOption_name        GetTeacherInfoListReqOption = 2
	GetTeacherInfoListReqOption_office_id   GetTeacherInfoListReqOption = 3
	GetTeacherInfoListReqOption_duties      GetTeacherInfoListReqOption = 4
	GetTeacherInfoListReqOption_id_category GetTeacherInfoListReqOption = 5
	GetTeacherInfoListReqOption_user_name   GetTeacherInfoListReqOption = 6
)

func (p GetTeacherInfoListReqOption) String() string {
	switch p {
	case GetTeacherInfoListReqOption_id:
		return "id"
	case GetTeacherInfoListReqOption_name:
		return "name"
	case GetTeacherInfoListReqOption_office_id:
		return "office_id"
	case GetTeacherInfoListReqOption_duties:
		return "duties"
	case GetTeacherInfoListReqOption_id_category:
		return "id_category"
	case GetTeacherInfoListReqOption_user_name:
		return "user_name"
	}
	return "<UNSET>"
}

func GetTeacherInfoListReqOptionFromString(s string) (GetTeacherInfoListReqOption, error) {
	switch s {
	case "id":
		return GetTeacherInfoListReqOption_id, nil
	case "name":
		return GetTeacherInfoListReqOption_name, nil
	case "office_id":
		return GetTeacherInfoListReqOption_office_id, nil
	case "duties":
		return GetTeacherInfoListReqOption_duties, nil
	case "id_category":
		return GetTeacherInfoListReqOption_id_category, nil
	case "user_name":
		return GetTeacherInfoListReqOption_user_name, nil
	}
	return GetTeacherInfoListReqOption(0), fmt.Errorf("not a valid GetTeacherInfoListReqOption string")
}

func GetTeacherInfoListReqOptionPtr(v GetTeacherInfoListReqOption) *GetTeacherInfoListReqOption {
	return &v
}
func (p *GetTeacherInfoListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetTeacherInfoListReqOption(result.Int64)
	return
}

func (p *GetTeacherInfoListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetUserListOption int64

const (
	GetUserListOption_id        GetUserListOption = 1
	GetUserListOption_nick_name GetUserListOption = 2
	GetUserListOption_user_name GetUserListOption = 3
	GetUserListOption_email     GetUserListOption = 4
	GetUserListOption_mobile    GetUserListOption = 5
)

func (p GetUserListOption) String() string {
	switch p {
	case GetUserListOption_id:
		return "id"
	case GetUserListOption_nick_name:
		return "nick_name"
	case GetUserListOption_user_name:
		return "user_name"
	case GetUserListOption_email:
		return "email"
	case GetUserListOption_mobile:
		return "mobile"
	}
	return "<UNSET>"
}

func GetUserListOptionFromString(s string) (GetUserListOption, error) {
	switch s {
	case "id":
		return GetUserListOption_id, nil
	case "nick_name":
		return GetUserListOption_nick_name, nil
	case "user_name":
		return GetUserListOption_user_name, nil
	case "email":
		return GetUserListOption_email, nil
	case "mobile":
		return GetUserListOption_mobile, nil
	}
	return GetUserListOption(0), fmt.Errorf("not a valid GetUserListOption string")
}

func GetUserListOptionPtr(v GetUserListOption) *GetUserListOption { return &v }
func (p *GetUserListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetUserListOption(result.Int64)
	return
}

func (p *GetUserListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetRoleListOption int64

const (
	GetRoleListOption_id          GetRoleListOption = 1
	GetRoleListOption_name        GetRoleListOption = 2
	GetRoleListOption_str_role_id GetRoleListOption = 3
)

func (p GetRoleListOption) String() string {
	switch p {
	case GetRoleListOption_id:
		return "id"
	case GetRoleListOption_name:
		return "name"
	case GetRoleListOption_str_role_id:
		return "str_role_id"
	}
	return "<UNSET>"
}

func GetRoleListOptionFromString(s string) (GetRoleListOption, error) {
	switch s {
	case "id":
		return GetRoleListOption_id, nil
	case "name":
		return GetRoleListOption_name, nil
	case "str_role_id":
		return GetRoleListOption_str_role_id, nil
	}
	return GetRoleListOption(0), fmt.Errorf("not a valid GetRoleListOption string")
}

func GetRoleListOptionPtr(v GetRoleListOption) *GetRoleListOption { return &v }
func (p *GetRoleListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetRoleListOption(result.Int64)
	return
}

func (p *GetRoleListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetPermissionListOption int64

const (
	GetPermissionListOption_id                GetPermissionListOption = 1
	GetPermissionListOption_name              GetPermissionListOption = 2
	GetPermissionListOption_str_permission_id GetPermissionListOption = 3
)

func (p GetPermissionListOption) String() string {
	switch p {
	case GetPermissionListOption_id:
		return "id"
	case GetPermissionListOption_name:
		return "name"
	case GetPermissionListOption_str_permission_id:
		return "str_permission_id"
	}
	return "<UNSET>"
}

func GetPermissionListOptionFromString(s string) (GetPermissionListOption, error) {
	switch s {
	case "id":
		return GetPermissionListOption_id, nil
	case "name":
		return GetPermissionListOption_name, nil
	case "str_permission_id":
		return GetPermissionListOption_str_permission_id, nil
	}
	return GetPermissionListOption(0), fmt.Errorf("not a valid GetPermissionListOption string")
}

func GetPermissionListOptionPtr(v GetPermissionListOption) *GetPermissionListOption { return &v }
func (p *GetPermissionListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetPermissionListOption(result.Int64)
	return
}

func (p *GetPermissionListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetOfficeListOption int64

const (
	GetOfficeListOption_name     GetOfficeListOption = 1
	GetOfficeListOption_name2    GetOfficeListOption = 2
	GetOfficeListOption_id       GetOfficeListOption = 3
	GetOfficeListOption_category GetOfficeListOption = 4
)

func (p GetOfficeListOption) String() string {
	switch p {
	case GetOfficeListOption_name:
		return "name"
	case GetOfficeListOption_name2:
		return "name2"
	case GetOfficeListOption_id:
		return "id"
	case GetOfficeListOption_category:
		return "category"
	}
	return "<UNSET>"
}

func GetOfficeListOptionFromString(s string) (GetOfficeListOption, error) {
	switch s {
	case "name":
		return GetOfficeListOption_name, nil
	case "name2":
		return GetOfficeListOption_name2, nil
	case "id":
		return GetOfficeListOption_id, nil
	case "category":
		return GetOfficeListOption_category, nil
	}
	return GetOfficeListOption(0), fmt.Errorf("not a valid GetOfficeListOption string")
}

func GetOfficeListOptionPtr(v GetOfficeListOption) *GetOfficeListOption { return &v }
func (p *GetOfficeListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetOfficeListOption(result.Int64)
	return
}

func (p *GetOfficeListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetMenuListOption int64

const (
	GetMenuListOption_id         GetMenuListOption = 1
	GetMenuListOption_name       GetMenuListOption = 2
	GetMenuListOption_path       GetMenuListOption = 3
	GetMenuListOption_component  GetMenuListOption = 4
	GetMenuListOption_redirect   GetMenuListOption = 5
	GetMenuListOption_parent_id  GetMenuListOption = 6
	GetMenuListOption_title      GetMenuListOption = 7
	GetMenuListOption_created_at GetMenuListOption = 8
)

func (p GetMenuListOption) String() string {
	switch p {
	case GetMenuListOption_id:
		return "id"
	case GetMenuListOption_name:
		return "name"
	case GetMenuListOption_path:
		return "path"
	case GetMenuListOption_component:
		return "component"
	case GetMenuListOption_redirect:
		return "redirect"
	case GetMenuListOption_parent_id:
		return "parent_id"
	case GetMenuListOption_title:
		return "title"
	case GetMenuListOption_created_at:
		return "created_at"
	}
	return "<UNSET>"
}

func GetMenuListOptionFromString(s string) (GetMenuListOption, error) {
	switch s {
	case "id":
		return GetMenuListOption_id, nil
	case "name":
		return GetMenuListOption_name, nil
	case "path":
		return GetMenuListOption_path, nil
	case "component":
		return GetMenuListOption_component, nil
	case "redirect":
		return GetMenuListOption_redirect, nil
	case "parent_id":
		return GetMenuListOption_parent_id, nil
	case "title":
		return GetMenuListOption_title, nil
	case "created_at":
		return GetMenuListOption_created_at, nil
	}
	return GetMenuListOption(0), fmt.Errorf("not a valid GetMenuListOption string")
}

func GetMenuListOptionPtr(v GetMenuListOption) *GetMenuListOption { return &v }
func (p *GetMenuListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetMenuListOption(result.Int64)
	return
}

func (p *GetMenuListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetCourseApplyListOption int64

const (
	GetCourseApplyListOption_id            GetCourseApplyListOption = 1
	GetCourseApplyListOption_course_name   GetCourseApplyListOption = 2
	GetCourseApplyListOption_academic_year GetCourseApplyListOption = 3
	GetCourseApplyListOption_semester      GetCourseApplyListOption = 4
	GetCourseApplyListOption_department    GetCourseApplyListOption = 5
	GetCourseApplyListOption_teacher_name  GetCourseApplyListOption = 6
	GetCourseApplyListOption_office_id     GetCourseApplyListOption = 7
	GetCourseApplyListOption_class_id      GetCourseApplyListOption = 8
	GetCourseApplyListOption_course_nature GetCourseApplyListOption = 9
	GetCourseApplyListOption_is_fill       GetCourseApplyListOption = 10
)

func (p GetCourseApplyListOption) String() string {
	switch p {
	case GetCourseApplyListOption_id:
		return "id"
	case GetCourseApplyListOption_course_name:
		return "course_name"
	case GetCourseApplyListOption_academic_year:
		return "academic_year"
	case GetCourseApplyListOption_semester:
		return "semester"
	case GetCourseApplyListOption_department:
		return "department"
	case GetCourseApplyListOption_teacher_name:
		return "teacher_name"
	case GetCourseApplyListOption_office_id:
		return "office_id"
	case GetCourseApplyListOption_class_id:
		return "class_id"
	case GetCourseApplyListOption_course_nature:
		return "course_nature"
	case GetCourseApplyListOption_is_fill:
		return "is_fill"
	}
	return "<UNSET>"
}

func GetCourseApplyListOptionFromString(s string) (GetCourseApplyListOption, error) {
	switch s {
	case "id":
		return GetCourseApplyListOption_id, nil
	case "course_name":
		return GetCourseApplyListOption_course_name, nil
	case "academic_year":
		return GetCourseApplyListOption_academic_year, nil
	case "semester":
		return GetCourseApplyListOption_semester, nil
	case "department":
		return GetCourseApplyListOption_department, nil
	case "teacher_name":
		return GetCourseApplyListOption_teacher_name, nil
	case "office_id":
		return GetCourseApplyListOption_office_id, nil
	case "class_id":
		return GetCourseApplyListOption_class_id, nil
	case "course_nature":
		return GetCourseApplyListOption_course_nature, nil
	case "is_fill":
		return GetCourseApplyListOption_is_fill, nil
	}
	return GetCourseApplyListOption(0), fmt.Errorf("not a valid GetCourseApplyListOption string")
}

func GetCourseApplyListOptionPtr(v GetCourseApplyListOption) *GetCourseApplyListOption { return &v }
func (p *GetCourseApplyListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetCourseApplyListOption(result.Int64)
	return
}

func (p *GetCourseApplyListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetSelfCourseApplyListOption int64

const (
	GetSelfCourseApplyListOption_id            GetSelfCourseApplyListOption = 1
	GetSelfCourseApplyListOption_course_name   GetSelfCourseApplyListOption = 2
	GetSelfCourseApplyListOption_academic_year GetSelfCourseApplyListOption = 3
	GetSelfCourseApplyListOption_semester      GetSelfCourseApplyListOption = 4
	GetSelfCourseApplyListOption_course_nature GetSelfCourseApplyListOption = 9
)

func (p GetSelfCourseApplyListOption) String() string {
	switch p {
	case GetSelfCourseApplyListOption_id:
		return "id"
	case GetSelfCourseApplyListOption_course_name:
		return "course_name"
	case GetSelfCourseApplyListOption_academic_year:
		return "academic_year"
	case GetSelfCourseApplyListOption_semester:
		return "semester"
	case GetSelfCourseApplyListOption_course_nature:
		return "course_nature"
	}
	return "<UNSET>"
}

func GetSelfCourseApplyListOptionFromString(s string) (GetSelfCourseApplyListOption, error) {
	switch s {
	case "id":
		return GetSelfCourseApplyListOption_id, nil
	case "course_name":
		return GetSelfCourseApplyListOption_course_name, nil
	case "academic_year":
		return GetSelfCourseApplyListOption_academic_year, nil
	case "semester":
		return GetSelfCourseApplyListOption_semester, nil
	case "course_nature":
		return GetSelfCourseApplyListOption_course_nature, nil
	}
	return GetSelfCourseApplyListOption(0), fmt.Errorf("not a valid GetSelfCourseApplyListOption string")
}

func GetSelfCourseApplyListOptionPtr(v GetSelfCourseApplyListOption) *GetSelfCourseApplyListOption {
	return &v
}
func (p *GetSelfCourseApplyListOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetSelfCourseApplyListOption(result.Int64)
	return
}

func (p *GetSelfCourseApplyListOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetClassListReqOption int64

const (
	GetClassListReqOption_id   GetClassListReqOption = 1
	GetClassListReqOption_name GetClassListReqOption = 2
)

func (p GetClassListReqOption) String() string {
	switch p {
	case GetClassListReqOption_id:
		return "id"
	case GetClassListReqOption_name:
		return "name"
	}
	return "<UNSET>"
}

func GetClassListReqOptionFromString(s string) (GetClassListReqOption, error) {
	switch s {
	case "id":
		return GetClassListReqOption_id, nil
	case "name":
		return GetClassListReqOption_name, nil
	}
	return GetClassListReqOption(0), fmt.Errorf("not a valid GetClassListReqOption string")
}

func GetClassListReqOptionPtr(v GetClassListReqOption) *GetClassListReqOption { return &v }
func (p *GetClassListReqOption) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GetClassListReqOption(result.Int64)
	return
}

func (p *GetClassListReqOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CourseApplyField int64

const (
	CourseApplyField_department             CourseApplyField = 1
	CourseApplyField_office_id              CourseApplyField = 2
	CourseApplyField_course_name            CourseApplyField = 3
	CourseApplyField_teach_class_name       CourseApplyField = 4
	CourseApplyField_class_id               CourseApplyField = 5
	CourseApplyField_teacher_name           CourseApplyField = 6
	CourseApplyField_total_hours            CourseApplyField = 7
	CourseApplyField_total_students         CourseApplyField = 8
	CourseApplyField_credit                 CourseApplyField = 9
	CourseApplyField_course_nature          CourseApplyField = 10
	CourseApplyField_start_week             CourseApplyField = 11
	CourseApplyField_online_platform_name   CourseApplyField = 12
	CourseApplyField_is_build_partner       CourseApplyField = 13
	CourseApplyField_is_self_property       CourseApplyField = 14
	CourseApplyField_resource_build_partner CourseApplyField = 15
	CourseApplyField_remark                 CourseApplyField = 16
	CourseApplyField_url                    CourseApplyField = 17
	CourseApplyField_isnot_account_password CourseApplyField = 18
	CourseApplyField_opinion                CourseApplyField = 19
)

func (p CourseApplyField) String() string {
	switch p {
	case CourseApplyField_department:
		return "department"
	case CourseApplyField_office_id:
		return "office_id"
	case CourseApplyField_course_name:
		return "course_name"
	case CourseApplyField_teach_class_name:
		return "teach_class_name"
	case CourseApplyField_class_id:
		return "class_id"
	case CourseApplyField_teacher_name:
		return "teacher_name"
	case CourseApplyField_total_hours:
		return "total_hours"
	case CourseApplyField_total_students:
		return "total_students"
	case CourseApplyField_credit:
		return "credit"
	case CourseApplyField_course_nature:
		return "course_nature"
	case CourseApplyField_start_week:
		return "start_week"
	case CourseApplyField_online_platform_name:
		return "online_platform_name"
	case CourseApplyField_is_build_partner:
		return "is_build_partner"
	case CourseApplyField_is_self_property:
		return "is_self_property"
	case CourseApplyField_resource_build_partner:
		return "resource_build_partner"
	case CourseApplyField_remark:
		return "remark"
	case CourseApplyField_url:
		return "url"
	case CourseApplyField_isnot_account_password:
		return "isnot_account_password"
	case CourseApplyField_opinion:
		return "opinion"
	}
	return "<UNSET>"
}

func CourseApplyFieldFromString(s string) (CourseApplyField, error) {
	switch s {
	case "department":
		return CourseApplyField_department, nil
	case "office_id":
		return CourseApplyField_office_id, nil
	case "course_name":
		return CourseApplyField_course_name, nil
	case "teach_class_name":
		return CourseApplyField_teach_class_name, nil
	case "class_id":
		return CourseApplyField_class_id, nil
	case "teacher_name":
		return CourseApplyField_teacher_name, nil
	case "total_hours":
		return CourseApplyField_total_hours, nil
	case "total_students":
		return CourseApplyField_total_students, nil
	case "credit":
		return CourseApplyField_credit, nil
	case "course_nature":
		return CourseApplyField_course_nature, nil
	case "start_week":
		return CourseApplyField_start_week, nil
	case "online_platform_name":
		return CourseApplyField_online_platform_name, nil
	case "is_build_partner":
		return CourseApplyField_is_build_partner, nil
	case "is_self_property":
		return CourseApplyField_is_self_property, nil
	case "resource_build_partner":
		return CourseApplyField_resource_build_partner, nil
	case "remark":
		return CourseApplyField_remark, nil
	case "url":
		return CourseApplyField_url, nil
	case "isnot_account_password":
		return CourseApplyField_isnot_account_password, nil
	case "opinion":
		return CourseApplyField_opinion, nil
	}
	return CourseApplyField(0), fmt.Errorf("not a valid CourseApplyField string")
}

func CourseApplyFieldPtr(v CourseApplyField) *CourseApplyField { return &v }
func (p *CourseApplyField) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CourseApplyField(result.Int64)
	return
}

func (p *CourseApplyField) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type InternshipCategory int64

const (
	InternshipCategory_PostInternship InternshipCategory = 1
	InternshipCategory_GraduateDesign InternshipCategory = 2
)

func (p InternshipCategory) String() string {
	switch p {
	case InternshipCategory_PostInternship:
		return "PostInternship"
	case InternshipCategory_GraduateDesign:
		return "GraduateDesign"
	}
	return "<UNSET>"
}

func InternshipCategoryFromString(s string) (InternshipCategory, error) {
	switch s {
	case "PostInternship":
		return InternshipCategory_PostInternship, nil
	case "GraduateDesign":
		return InternshipCategory_GraduateDesign, nil
	}
	return InternshipCategory(0), fmt.Errorf("not a valid InternshipCategory string")
}

func InternshipCategoryPtr(v InternshipCategory) *InternshipCategory { return &v }
func (p *InternshipCategory) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = InternshipCategory(result.Int64)
	return
}

func (p *InternshipCategory) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ApplicationType int64

const (
	ApplicationType_Unkknown      ApplicationType = 0
	ApplicationType_CourseChange  ApplicationType = 1
	ApplicationType_CourseStop    ApplicationType = 2
	ApplicationType_CourseReplace ApplicationType = 3
	ApplicationType_CourseSwap    ApplicationType = 4
)

func (p ApplicationType) String() string {
	switch p {
	case ApplicationType_Unkknown:
		return "Unkknown"
	case ApplicationType_CourseChange:
		return "CourseChange"
	case ApplicationType_CourseStop:
		return "CourseStop"
	case ApplicationType_CourseReplace:
		return "CourseReplace"
	case ApplicationType_CourseSwap:
		return "CourseSwap"
	}
	return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
	switch s {
	case "Unkknown":
		return ApplicationType_Unkknown, nil
	case "CourseChange":
		return ApplicationType_CourseChange, nil
	case "CourseStop":
		return ApplicationType_CourseStop, nil
	case "CourseReplace":
		return ApplicationType_CourseReplace, nil
	case "CourseSwap":
		return ApplicationType_CourseSwap, nil
	}
	return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}

func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }
func (p *ApplicationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ApplicationType(result.Int64)
	return
}

func (p *ApplicationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ModelTeacherOffice_Category int64

const (
	ModelTeacherOffice_Category_Unknown     ModelTeacherOffice_Category = 0
	ModelTeacherOffice_Category_CourseApply ModelTeacherOffice_Category = 1
	ModelTeacherOffice_Category_TeacherInfo ModelTeacherOffice_Category = 2
)

func (p ModelTeacherOffice_Category) String() string {
	switch p {
	case ModelTeacherOffice_Category_Unknown:
		return "Unknown"
	case ModelTeacherOffice_Category_CourseApply:
		return "CourseApply"
	case ModelTeacherOffice_Category_TeacherInfo:
		return "TeacherInfo"
	}
	return "<UNSET>"
}

func ModelTeacherOffice_CategoryFromString(s string) (ModelTeacherOffice_Category, error) {
	switch s {
	case "Unknown":
		return ModelTeacherOffice_Category_Unknown, nil
	case "CourseApply":
		return ModelTeacherOffice_Category_CourseApply, nil
	case "TeacherInfo":
		return ModelTeacherOffice_Category_TeacherInfo, nil
	}
	return ModelTeacherOffice_Category(0), fmt.Errorf("not a valid ModelTeacherOffice_Category string")
}

func ModelTeacherOffice_CategoryPtr(v ModelTeacherOffice_Category) *ModelTeacherOffice_Category {
	return &v
}
func (p *ModelTeacherOffice_Category) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ModelTeacherOffice_Category(result.Int64)
	return
}

func (p *ModelTeacherOffice_Category) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BooleanType int64

const (
	BooleanType_Unknown BooleanType = 0
	BooleanType_True    BooleanType = 1
	BooleanType_False   BooleanType = 2
)

func (p BooleanType) String() string {
	switch p {
	case BooleanType_Unknown:
		return "Unknown"
	case BooleanType_True:
		return "True"
	case BooleanType_False:
		return "False"
	}
	return "<UNSET>"
}

func BooleanTypeFromString(s string) (BooleanType, error) {
	switch s {
	case "Unknown":
		return BooleanType_Unknown, nil
	case "True":
		return BooleanType_True, nil
	case "False":
		return BooleanType_False, nil
	}
	return BooleanType(0), fmt.Errorf("not a valid BooleanType string")
}

func BooleanTypePtr(v BooleanType) *BooleanType { return &v }
func (p *BooleanType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = BooleanType(result.Int64)
	return
}

func (p *BooleanType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IsActiveType int64

const (
	IsActiveType_Unknown  IsActiveType = 0
	IsActiveType_Active   IsActiveType = 1
	IsActiveType_Inactive IsActiveType = 2
)

func (p IsActiveType) String() string {
	switch p {
	case IsActiveType_Unknown:
		return "Unknown"
	case IsActiveType_Active:
		return "Active"
	case IsActiveType_Inactive:
		return "Inactive"
	}
	return "<UNSET>"
}

func IsActiveTypeFromString(s string) (IsActiveType, error) {
	switch s {
	case "Unknown":
		return IsActiveType_Unknown, nil
	case "Active":
		return IsActiveType_Active, nil
	case "Inactive":
		return IsActiveType_Inactive, nil
	}
	return IsActiveType(0), fmt.Errorf("not a valid IsActiveType string")
}

func IsActiveTypePtr(v IsActiveType) *IsActiveType { return &v }
func (p *IsActiveType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = IsActiveType(result.Int64)
	return
}

func (p *IsActiveType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IsExternalType int64

const (
	IsExternalType_Unknown  IsExternalType = 0
	IsExternalType_External IsExternalType = 1
	IsExternalType_Internal IsExternalType = 2
)

func (p IsExternalType) String() string {
	switch p {
	case IsExternalType_Unknown:
		return "Unknown"
	case IsExternalType_External:
		return "External"
	case IsExternalType_Internal:
		return "Internal"
	}
	return "<UNSET>"
}

func IsExternalTypeFromString(s string) (IsExternalType, error) {
	switch s {
	case "Unknown":
		return IsExternalType_Unknown, nil
	case "External":
		return IsExternalType_External, nil
	case "Internal":
		return IsExternalType_Internal, nil
	}
	return IsExternalType(0), fmt.Errorf("not a valid IsExternalType string")
}

func IsExternalTypePtr(v IsExternalType) *IsExternalType { return &v }
func (p *IsExternalType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = IsExternalType(result.Int64)
	return
}

func (p *IsExternalType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DeleteFinalExamRecordReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteFinalExamRecordReq() *DeleteFinalExamRecordReq {
	return &DeleteFinalExamRecordReq{}
}

func (p *DeleteFinalExamRecordReq) InitDefault() {
}

func (p *DeleteFinalExamRecordReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteFinalExamRecordReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteFinalExamRecordReq = map[int16]string{
	1: "ids",
}

func (p *DeleteFinalExamRecordReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteFinalExamRecordReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteFinalExamRecordReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteFinalExamRecordReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExamRecordReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteFinalExamRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteFinalExamRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFinalExamRecordReq(%+v)", *p)

}

func (p *DeleteFinalExamRecordReq) DeepEqual(ano *DeleteFinalExamRecordReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteFinalExamRecordReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteFinalExamRecordResp struct {
}

func NewDeleteFinalExamRecordResp() *DeleteFinalExamRecordResp {
	return &DeleteFinalExamRecordResp{}
}

func (p *DeleteFinalExamRecordResp) InitDefault() {
}

var fieldIDToName_DeleteFinalExamRecordResp = map[int16]string{}

func (p *DeleteFinalExamRecordResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteFinalExamRecordResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteFinalExamRecordResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteFinalExamRecordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFinalExamRecordResp(%+v)", *p)

}

func (p *DeleteFinalExamRecordResp) DeepEqual(ano *DeleteFinalExamRecordResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetFinalExamRecordListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option" binding:"required"`
}

func NewGetFinalExamRecordListReq() *GetFinalExamRecordListReq {
	return &GetFinalExamRecordListReq{}
}

func (p *GetFinalExamRecordListReq) InitDefault() {
}

var GetFinalExamRecordListReq_ListOption_DEFAULT *base.ListOption

func (p *GetFinalExamRecordListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetFinalExamRecordListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetFinalExamRecordListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetFinalExamRecordListReq = map[int16]string{
	1: "list_option",
}

func (p *GetFinalExamRecordListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetFinalExamRecordListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamRecordListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamRecordListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetFinalExamRecordListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamRecordListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamRecordListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamRecordListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamRecordListReq(%+v)", *p)

}

func (p *GetFinalExamRecordListReq) DeepEqual(ano *GetFinalExamRecordListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetFinalExamRecordListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetFinalExamRecordListResp struct {
	List     []*ModelFinalExamRecord `thrift:"list,1" frugal:"1,default,list<ModelFinalExamRecord>" json:"list"`
	Paginate *base.Paginate          `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetFinalExamRecordListResp() *GetFinalExamRecordListResp {
	return &GetFinalExamRecordListResp{}
}

func (p *GetFinalExamRecordListResp) InitDefault() {
}

func (p *GetFinalExamRecordListResp) GetList() (v []*ModelFinalExamRecord) {
	return p.List
}

var GetFinalExamRecordListResp_Paginate_DEFAULT *base.Paginate

func (p *GetFinalExamRecordListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetFinalExamRecordListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetFinalExamRecordListResp) SetList(val []*ModelFinalExamRecord) {
	p.List = val
}
func (p *GetFinalExamRecordListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetFinalExamRecordListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetFinalExamRecordListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetFinalExamRecordListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamRecordListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamRecordListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelFinalExamRecord, 0, size)
	values := make([]ModelFinalExamRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetFinalExamRecordListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetFinalExamRecordListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamRecordListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamRecordListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamRecordListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetFinalExamRecordListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamRecordListResp(%+v)", *p)

}

func (p *GetFinalExamRecordListResp) DeepEqual(ano *GetFinalExamRecordListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetFinalExamRecordListResp) Field1DeepEqual(src []*ModelFinalExamRecord) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetFinalExamRecordListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type FillFinalExamPaperReq struct {
	AcademicYear     string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester         string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	ExamSubject      string `thrift:"exam_subject,3" frugal:"3,default,string" json:"exam_subject" binding:"required"`
	ClassName        string `thrift:"class_name,4" frugal:"4,default,string" json:"class_name" binding:"required"`
	AProposer        string `thrift:"a_proposer,5" frugal:"5,default,string" json:"a_proposer" binding:"required"`
	BProposer        string `thrift:"b_proposer,6" frugal:"6,default,string" json:"b_proposer"`
	CProposer        string `thrift:"c_proposer,7" frugal:"7,default,string" json:"c_proposer"`
	AssessmentMethod string `thrift:"assessment_method,8" frugal:"8,default,string" json:"assessment_method" binding:"required" `
}

func NewFillFinalExamPaperReq() *FillFinalExamPaperReq {
	return &FillFinalExamPaperReq{}
}

func (p *FillFinalExamPaperReq) InitDefault() {
}

func (p *FillFinalExamPaperReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *FillFinalExamPaperReq) GetSemester() (v string) {
	return p.Semester
}

func (p *FillFinalExamPaperReq) GetExamSubject() (v string) {
	return p.ExamSubject
}

func (p *FillFinalExamPaperReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *FillFinalExamPaperReq) GetAProposer() (v string) {
	return p.AProposer
}

func (p *FillFinalExamPaperReq) GetBProposer() (v string) {
	return p.BProposer
}

func (p *FillFinalExamPaperReq) GetCProposer() (v string) {
	return p.CProposer
}

func (p *FillFinalExamPaperReq) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}
func (p *FillFinalExamPaperReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *FillFinalExamPaperReq) SetSemester(val string) {
	p.Semester = val
}
func (p *FillFinalExamPaperReq) SetExamSubject(val string) {
	p.ExamSubject = val
}
func (p *FillFinalExamPaperReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *FillFinalExamPaperReq) SetAProposer(val string) {
	p.AProposer = val
}
func (p *FillFinalExamPaperReq) SetBProposer(val string) {
	p.BProposer = val
}
func (p *FillFinalExamPaperReq) SetCProposer(val string) {
	p.CProposer = val
}
func (p *FillFinalExamPaperReq) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}

var fieldIDToName_FillFinalExamPaperReq = map[int16]string{
	1: "academic_year",
	2: "semester",
	3: "exam_subject",
	4: "class_name",
	5: "a_proposer",
	6: "b_proposer",
	7: "c_proposer",
	8: "assessment_method",
}

func (p *FillFinalExamPaperReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FillFinalExamPaperReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FillFinalExamPaperReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExamSubject = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AProposer = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BProposer = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CProposer = _field
	return nil
}
func (p *FillFinalExamPaperReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}

func (p *FillFinalExamPaperReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillFinalExamPaperReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exam_subject", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExamSubject); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_proposer", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b_proposer", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("c_proposer", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *FillFinalExamPaperReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillFinalExamPaperReq(%+v)", *p)

}

func (p *FillFinalExamPaperReq) DeepEqual(ano *FillFinalExamPaperReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExamSubject) {
		return false
	}
	if !p.Field4DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field5DeepEqual(ano.AProposer) {
		return false
	}
	if !p.Field6DeepEqual(ano.BProposer) {
		return false
	}
	if !p.Field7DeepEqual(ano.CProposer) {
		return false
	}
	if !p.Field8DeepEqual(ano.AssessmentMethod) {
		return false
	}
	return true
}

func (p *FillFinalExamPaperReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ExamSubject, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AProposer, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.BProposer, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CProposer, src) != 0 {
		return false
	}
	return true
}
func (p *FillFinalExamPaperReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}

type FillFinalExamPaperResp struct {
}

func NewFillFinalExamPaperResp() *FillFinalExamPaperResp {
	return &FillFinalExamPaperResp{}
}

func (p *FillFinalExamPaperResp) InitDefault() {
}

var fieldIDToName_FillFinalExamPaperResp = map[int16]string{}

func (p *FillFinalExamPaperResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FillFinalExamPaperResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("FillFinalExamPaperResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FillFinalExamPaperResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillFinalExamPaperResp(%+v)", *p)

}

func (p *FillFinalExamPaperResp) DeepEqual(ano *FillFinalExamPaperResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteFinalExamReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteFinalExamReq() *DeleteFinalExamReq {
	return &DeleteFinalExamReq{}
}

func (p *DeleteFinalExamReq) InitDefault() {
}

func (p *DeleteFinalExamReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteFinalExamReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteFinalExamReq = map[int16]string{
	1: "ids",
}

func (p *DeleteFinalExamReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteFinalExamReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteFinalExamReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteFinalExamReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExamReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteFinalExamReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteFinalExamReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFinalExamReq(%+v)", *p)

}

func (p *DeleteFinalExamReq) DeepEqual(ano *DeleteFinalExamReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteFinalExamReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteFinalExamResp struct {
}

func NewDeleteFinalExamResp() *DeleteFinalExamResp {
	return &DeleteFinalExamResp{}
}

func (p *DeleteFinalExamResp) InitDefault() {
}

var fieldIDToName_DeleteFinalExamResp = map[int16]string{}

func (p *DeleteFinalExamResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteFinalExamResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteFinalExamResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteFinalExamResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFinalExamResp(%+v)", *p)

}

func (p *DeleteFinalExamResp) DeepEqual(ano *DeleteFinalExamResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CalculateFinalExamWorkloadReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
}

func NewCalculateFinalExamWorkloadReq() *CalculateFinalExamWorkloadReq {
	return &CalculateFinalExamWorkloadReq{}
}

func (p *CalculateFinalExamWorkloadReq) InitDefault() {
}

func (p *CalculateFinalExamWorkloadReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *CalculateFinalExamWorkloadReq) GetSemester() (v string) {
	return p.Semester
}
func (p *CalculateFinalExamWorkloadReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *CalculateFinalExamWorkloadReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_CalculateFinalExamWorkloadReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *CalculateFinalExamWorkloadReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculateFinalExamWorkloadReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *CalculateFinalExamWorkloadReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *CalculateFinalExamWorkloadReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CalculateFinalExamWorkloadReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculateFinalExamWorkloadReq(%+v)", *p)

}

func (p *CalculateFinalExamWorkloadReq) DeepEqual(ano *CalculateFinalExamWorkloadReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *CalculateFinalExamWorkloadReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *CalculateFinalExamWorkloadReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type CalculateFinalExamWorkloadResp struct {
}

func NewCalculateFinalExamWorkloadResp() *CalculateFinalExamWorkloadResp {
	return &CalculateFinalExamWorkloadResp{}
}

func (p *CalculateFinalExamWorkloadResp) InitDefault() {
}

var fieldIDToName_CalculateFinalExamWorkloadResp = map[int16]string{}

func (p *CalculateFinalExamWorkloadResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CalculateFinalExamWorkloadResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculateFinalExamWorkloadResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculateFinalExamWorkloadResp(%+v)", *p)

}

func (p *CalculateFinalExamWorkloadResp) DeepEqual(ano *CalculateFinalExamWorkloadResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ExportFinalExamReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
}

func NewExportFinalExamReq() *ExportFinalExamReq {
	return &ExportFinalExamReq{}
}

func (p *ExportFinalExamReq) InitDefault() {
}

func (p *ExportFinalExamReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ExportFinalExamReq) GetSemester() (v string) {
	return p.Semester
}
func (p *ExportFinalExamReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ExportFinalExamReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ExportFinalExamReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *ExportFinalExamReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportFinalExamReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportFinalExamReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ExportFinalExamReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ExportFinalExamReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportFinalExamReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportFinalExamReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportFinalExamReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportFinalExamReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportFinalExamReq(%+v)", *p)

}

func (p *ExportFinalExamReq) DeepEqual(ano *ExportFinalExamReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ExportFinalExamReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ExportFinalExamReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ExportFinalExamResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportFinalExamResp() *ExportFinalExamResp {
	return &ExportFinalExamResp{}
}

func (p *ExportFinalExamResp) InitDefault() {
}

func (p *ExportFinalExamResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportFinalExamResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportFinalExamResp = map[int16]string{
	1: "task_key",
}

func (p *ExportFinalExamResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportFinalExamResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportFinalExamResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportFinalExamResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportFinalExamResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportFinalExamResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportFinalExamResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportFinalExamResp(%+v)", *p)

}

func (p *ExportFinalExamResp) DeepEqual(ano *ExportFinalExamResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportFinalExamResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type UpdateFinalExamReq struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	ExamSubject string `thrift:"exam_subject,2" frugal:"2,default,string" json:"exam_subject" binding:"required"`
	ClassName   string `thrift:"class_name,3" frugal:"3,default,string" json:"class_name" binding:"required"`
	AProposer   string `thrift:"a_proposer,10" frugal:"10,default,string" json:"a_proposer" gorm:"column:a_proposer"`
	BProposer   string `thrift:"b_proposer,11" frugal:"11,default,string" json:"b_proposer" gorm:"column:b_proposer"`
	CProposer   string `thrift:"c_proposer,12" frugal:"12,default,string" json:"c_proposer" gorm:"column:c_proposer"`
}

func NewUpdateFinalExamReq() *UpdateFinalExamReq {
	return &UpdateFinalExamReq{}
}

func (p *UpdateFinalExamReq) InitDefault() {
}

func (p *UpdateFinalExamReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateFinalExamReq) GetExamSubject() (v string) {
	return p.ExamSubject
}

func (p *UpdateFinalExamReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *UpdateFinalExamReq) GetAProposer() (v string) {
	return p.AProposer
}

func (p *UpdateFinalExamReq) GetBProposer() (v string) {
	return p.BProposer
}

func (p *UpdateFinalExamReq) GetCProposer() (v string) {
	return p.CProposer
}
func (p *UpdateFinalExamReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateFinalExamReq) SetExamSubject(val string) {
	p.ExamSubject = val
}
func (p *UpdateFinalExamReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *UpdateFinalExamReq) SetAProposer(val string) {
	p.AProposer = val
}
func (p *UpdateFinalExamReq) SetBProposer(val string) {
	p.BProposer = val
}
func (p *UpdateFinalExamReq) SetCProposer(val string) {
	p.CProposer = val
}

var fieldIDToName_UpdateFinalExamReq = map[int16]string{
	1:  "id",
	2:  "exam_subject",
	3:  "class_name",
	10: "a_proposer",
	11: "b_proposer",
	12: "c_proposer",
}

func (p *UpdateFinalExamReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateFinalExamReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateFinalExamReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateFinalExamReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExamSubject = _field
	return nil
}
func (p *UpdateFinalExamReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *UpdateFinalExamReq) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AProposer = _field
	return nil
}
func (p *UpdateFinalExamReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BProposer = _field
	return nil
}
func (p *UpdateFinalExamReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CProposer = _field
	return nil
}

func (p *UpdateFinalExamReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateFinalExamReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exam_subject", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExamSubject); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_proposer", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b_proposer", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdateFinalExamReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("c_proposer", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *UpdateFinalExamReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateFinalExamReq(%+v)", *p)

}

func (p *UpdateFinalExamReq) DeepEqual(ano *UpdateFinalExamReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExamSubject) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field10DeepEqual(ano.AProposer) {
		return false
	}
	if !p.Field11DeepEqual(ano.BProposer) {
		return false
	}
	if !p.Field12DeepEqual(ano.CProposer) {
		return false
	}
	return true
}

func (p *UpdateFinalExamReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateFinalExamReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ExamSubject, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateFinalExamReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateFinalExamReq) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AProposer, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateFinalExamReq) Field11DeepEqual(src string) bool {

	if strings.Compare(p.BProposer, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateFinalExamReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CProposer, src) != 0 {
		return false
	}
	return true
}

type UpdateFinalExamResp struct {
}

func NewUpdateFinalExamResp() *UpdateFinalExamResp {
	return &UpdateFinalExamResp{}
}

func (p *UpdateFinalExamResp) InitDefault() {
}

var fieldIDToName_UpdateFinalExamResp = map[int16]string{}

func (p *UpdateFinalExamResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateFinalExamResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateFinalExamResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateFinalExamResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateFinalExamResp(%+v)", *p)

}

func (p *UpdateFinalExamResp) DeepEqual(ano *UpdateFinalExamResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetFinalExamSubjectListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option" binding:"required"`
}

func NewGetFinalExamSubjectListReq() *GetFinalExamSubjectListReq {
	return &GetFinalExamSubjectListReq{}
}

func (p *GetFinalExamSubjectListReq) InitDefault() {
}

var GetFinalExamSubjectListReq_ListOption_DEFAULT *base.ListOption

func (p *GetFinalExamSubjectListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetFinalExamSubjectListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetFinalExamSubjectListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetFinalExamSubjectListReq = map[int16]string{
	1: "list_option",
}

func (p *GetFinalExamSubjectListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetFinalExamSubjectListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamSubjectListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamSubjectListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetFinalExamSubjectListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamSubjectListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamSubjectListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamSubjectListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamSubjectListReq(%+v)", *p)

}

func (p *GetFinalExamSubjectListReq) DeepEqual(ano *GetFinalExamSubjectListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetFinalExamSubjectListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type FinalExamSubject struct {
	CourseName string `thrift:"course_name,1" frugal:"1,default,string" json:"course_name"`
	Count      int32  `thrift:"count,2" frugal:"2,default,i32" json:"count"`
}

func NewFinalExamSubject() *FinalExamSubject {
	return &FinalExamSubject{}
}

func (p *FinalExamSubject) InitDefault() {
}

func (p *FinalExamSubject) GetCourseName() (v string) {
	return p.CourseName
}

func (p *FinalExamSubject) GetCount() (v int32) {
	return p.Count
}
func (p *FinalExamSubject) SetCourseName(val string) {
	p.CourseName = val
}
func (p *FinalExamSubject) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_FinalExamSubject = map[int16]string{
	1: "course_name",
	2: "count",
}

func (p *FinalExamSubject) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FinalExamSubject[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FinalExamSubject) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *FinalExamSubject) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Count = _field
	return nil
}

func (p *FinalExamSubject) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FinalExamSubject"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FinalExamSubject) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FinalExamSubject) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FinalExamSubject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinalExamSubject(%+v)", *p)

}

func (p *FinalExamSubject) DeepEqual(ano *FinalExamSubject) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *FinalExamSubject) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *FinalExamSubject) Field2DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type GetFinalExamSubjectListResp struct {
	List     []*FinalExamSubject `thrift:"list,1" frugal:"1,default,list<FinalExamSubject>" json:"list"`
	Paginate *base.Paginate      `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetFinalExamSubjectListResp() *GetFinalExamSubjectListResp {
	return &GetFinalExamSubjectListResp{}
}

func (p *GetFinalExamSubjectListResp) InitDefault() {
}

func (p *GetFinalExamSubjectListResp) GetList() (v []*FinalExamSubject) {
	return p.List
}

var GetFinalExamSubjectListResp_Paginate_DEFAULT *base.Paginate

func (p *GetFinalExamSubjectListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetFinalExamSubjectListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetFinalExamSubjectListResp) SetList(val []*FinalExamSubject) {
	p.List = val
}
func (p *GetFinalExamSubjectListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetFinalExamSubjectListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetFinalExamSubjectListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetFinalExamSubjectListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamSubjectListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamSubjectListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FinalExamSubject, 0, size)
	values := make([]FinalExamSubject, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetFinalExamSubjectListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetFinalExamSubjectListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamSubjectListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamSubjectListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamSubjectListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetFinalExamSubjectListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamSubjectListResp(%+v)", *p)

}

func (p *GetFinalExamSubjectListResp) DeepEqual(ano *GetFinalExamSubjectListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetFinalExamSubjectListResp) Field1DeepEqual(src []*FinalExamSubject) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetFinalExamSubjectListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetFinalExamListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option" binding:"required"`
}

func NewGetFinalExamListReq() *GetFinalExamListReq {
	return &GetFinalExamListReq{}
}

func (p *GetFinalExamListReq) InitDefault() {
}

var GetFinalExamListReq_ListOption_DEFAULT *base.ListOption

func (p *GetFinalExamListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetFinalExamListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetFinalExamListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetFinalExamListReq = map[int16]string{
	1: "list_option",
}

func (p *GetFinalExamListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetFinalExamListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetFinalExamListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamListReq(%+v)", *p)

}

func (p *GetFinalExamListReq) DeepEqual(ano *GetFinalExamListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetFinalExamListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetFinalExamListResp struct {
	List     []*ModelFinalExam `thrift:"list,1" frugal:"1,default,list<ModelFinalExam>" json:"list"`
	Paginate *base.Paginate    `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetFinalExamListResp() *GetFinalExamListResp {
	return &GetFinalExamListResp{}
}

func (p *GetFinalExamListResp) InitDefault() {
}

func (p *GetFinalExamListResp) GetList() (v []*ModelFinalExam) {
	return p.List
}

var GetFinalExamListResp_Paginate_DEFAULT *base.Paginate

func (p *GetFinalExamListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetFinalExamListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetFinalExamListResp) SetList(val []*ModelFinalExam) {
	p.List = val
}
func (p *GetFinalExamListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetFinalExamListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetFinalExamListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetFinalExamListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetFinalExamListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetFinalExamListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelFinalExam, 0, size)
	values := make([]ModelFinalExam, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetFinalExamListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetFinalExamListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetFinalExamListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetFinalExamListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetFinalExamListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFinalExamListResp(%+v)", *p)

}

func (p *GetFinalExamListResp) DeepEqual(ano *GetFinalExamListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetFinalExamListResp) Field1DeepEqual(src []*ModelFinalExam) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetFinalExamListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type SyncFinalExamReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required" `
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester"binding:"required" `
}

func NewSyncFinalExamReq() *SyncFinalExamReq {
	return &SyncFinalExamReq{}
}

func (p *SyncFinalExamReq) InitDefault() {
}

func (p *SyncFinalExamReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *SyncFinalExamReq) GetSemester() (v string) {
	return p.Semester
}
func (p *SyncFinalExamReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *SyncFinalExamReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_SyncFinalExamReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *SyncFinalExamReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SyncFinalExamReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SyncFinalExamReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *SyncFinalExamReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *SyncFinalExamReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncFinalExamReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SyncFinalExamReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SyncFinalExamReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SyncFinalExamReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncFinalExamReq(%+v)", *p)

}

func (p *SyncFinalExamReq) DeepEqual(ano *SyncFinalExamReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *SyncFinalExamReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *SyncFinalExamReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type SyncFinalExamResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewSyncFinalExamResp() *SyncFinalExamResp {
	return &SyncFinalExamResp{}
}

func (p *SyncFinalExamResp) InitDefault() {
}

func (p *SyncFinalExamResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *SyncFinalExamResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_SyncFinalExamResp = map[int16]string{
	1: "task_key",
}

func (p *SyncFinalExamResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SyncFinalExamResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SyncFinalExamResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *SyncFinalExamResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncFinalExamResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SyncFinalExamResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SyncFinalExamResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncFinalExamResp(%+v)", *p)

}

func (p *SyncFinalExamResp) DeepEqual(ano *SyncFinalExamResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *SyncFinalExamResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type GetSelfTrainingCourseListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option" binding:"required"`
}

func NewGetSelfTrainingCourseListReq() *GetSelfTrainingCourseListReq {
	return &GetSelfTrainingCourseListReq{}
}

func (p *GetSelfTrainingCourseListReq) InitDefault() {
}

var GetSelfTrainingCourseListReq_ListOption_DEFAULT *base.ListOption

func (p *GetSelfTrainingCourseListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetSelfTrainingCourseListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetSelfTrainingCourseListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetSelfTrainingCourseListReq = map[int16]string{
	1: "list_option",
}

func (p *GetSelfTrainingCourseListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetSelfTrainingCourseListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfTrainingCourseListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfTrainingCourseListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetSelfTrainingCourseListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfTrainingCourseListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfTrainingCourseListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfTrainingCourseListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfTrainingCourseListReq(%+v)", *p)

}

func (p *GetSelfTrainingCourseListReq) DeepEqual(ano *GetSelfTrainingCourseListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetSelfTrainingCourseListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfTrainingCourseListResp struct {
	List       []*ModelTrainingCourse                  `thrift:"list,1" frugal:"1,default,list<ModelTrainingCourse>" json:"list"`
	Paginate   *base.Paginate                          `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
	TeacherMap map[int32][]*ModelTrainingCourseTeacher `thrift:"teacher_map,3" frugal:"3,default,map<i32:list<ModelTrainingCourseTeacher>>" json:"teacher_map"`
}

func NewGetSelfTrainingCourseListResp() *GetSelfTrainingCourseListResp {
	return &GetSelfTrainingCourseListResp{}
}

func (p *GetSelfTrainingCourseListResp) InitDefault() {
}

func (p *GetSelfTrainingCourseListResp) GetList() (v []*ModelTrainingCourse) {
	return p.List
}

var GetSelfTrainingCourseListResp_Paginate_DEFAULT *base.Paginate

func (p *GetSelfTrainingCourseListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetSelfTrainingCourseListResp_Paginate_DEFAULT
	}
	return p.Paginate
}

func (p *GetSelfTrainingCourseListResp) GetTeacherMap() (v map[int32][]*ModelTrainingCourseTeacher) {
	return p.TeacherMap
}
func (p *GetSelfTrainingCourseListResp) SetList(val []*ModelTrainingCourse) {
	p.List = val
}
func (p *GetSelfTrainingCourseListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}
func (p *GetSelfTrainingCourseListResp) SetTeacherMap(val map[int32][]*ModelTrainingCourseTeacher) {
	p.TeacherMap = val
}

var fieldIDToName_GetSelfTrainingCourseListResp = map[int16]string{
	1: "list",
	2: "paginate",
	3: "teacher_map",
}

func (p *GetSelfTrainingCourseListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetSelfTrainingCourseListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfTrainingCourseListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfTrainingCourseListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelTrainingCourse, 0, size)
	values := make([]ModelTrainingCourse, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetSelfTrainingCourseListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}
func (p *GetSelfTrainingCourseListResp) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*ModelTrainingCourseTeacher, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*ModelTrainingCourseTeacher, 0, size)
		values := make([]ModelTrainingCourseTeacher, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TeacherMap = _field
	return nil
}

func (p *GetSelfTrainingCourseListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfTrainingCourseListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfTrainingCourseListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfTrainingCourseListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSelfTrainingCourseListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_map", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.TeacherMap)); err != nil {
		return err
	}
	for k, v := range p.TeacherMap {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSelfTrainingCourseListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfTrainingCourseListResp(%+v)", *p)

}

func (p *GetSelfTrainingCourseListResp) DeepEqual(ano *GetSelfTrainingCourseListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	if !p.Field3DeepEqual(ano.TeacherMap) {
		return false
	}
	return true
}

func (p *GetSelfTrainingCourseListResp) Field1DeepEqual(src []*ModelTrainingCourse) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSelfTrainingCourseListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetSelfTrainingCourseListResp) Field3DeepEqual(src map[int32][]*ModelTrainingCourseTeacher) bool {

	if len(p.TeacherMap) != len(src) {
		return false
	}
	for k, v := range p.TeacherMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type ImportTrainingCourseReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required" `
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester"binding:"required" `
	UploadId     string `thrift:"upload_id,3" frugal:"3,default,string" json:"upload_id" binding:"required"`
}

func NewImportTrainingCourseReq() *ImportTrainingCourseReq {
	return &ImportTrainingCourseReq{}
}

func (p *ImportTrainingCourseReq) InitDefault() {
}

func (p *ImportTrainingCourseReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ImportTrainingCourseReq) GetSemester() (v string) {
	return p.Semester
}

func (p *ImportTrainingCourseReq) GetUploadId() (v string) {
	return p.UploadId
}
func (p *ImportTrainingCourseReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ImportTrainingCourseReq) SetSemester(val string) {
	p.Semester = val
}
func (p *ImportTrainingCourseReq) SetUploadId(val string) {
	p.UploadId = val
}

var fieldIDToName_ImportTrainingCourseReq = map[int16]string{
	1: "academic_year",
	2: "semester",
	3: "upload_id",
}

func (p *ImportTrainingCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportTrainingCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportTrainingCourseReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ImportTrainingCourseReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ImportTrainingCourseReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UploadId = _field
	return nil
}

func (p *ImportTrainingCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTrainingCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportTrainingCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportTrainingCourseReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ImportTrainingCourseReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("upload_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ImportTrainingCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportTrainingCourseReq(%+v)", *p)

}

func (p *ImportTrainingCourseReq) DeepEqual(ano *ImportTrainingCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.UploadId) {
		return false
	}
	return true
}

func (p *ImportTrainingCourseReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ImportTrainingCourseReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ImportTrainingCourseReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UploadId, src) != 0 {
		return false
	}
	return true
}

type ImportTrainingCourseResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportTrainingCourseResp() *ImportTrainingCourseResp {
	return &ImportTrainingCourseResp{}
}

func (p *ImportTrainingCourseResp) InitDefault() {
}

func (p *ImportTrainingCourseResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportTrainingCourseResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportTrainingCourseResp = map[int16]string{
	1: "task_key",
}

func (p *ImportTrainingCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportTrainingCourseResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportTrainingCourseResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportTrainingCourseResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTrainingCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportTrainingCourseResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportTrainingCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportTrainingCourseResp(%+v)", *p)

}

func (p *ImportTrainingCourseResp) DeepEqual(ano *ImportTrainingCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportTrainingCourseResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type UpdateTrainingCourseTeacherReqItem struct {
	TeacherId string `thrift:"teacher_id,1" frugal:"1,default,string" json:"teacher_id"`
	Week      string `thrift:"week,2" frugal:"2,default,string" json:"week"`
}

func NewUpdateTrainingCourseTeacherReqItem() *UpdateTrainingCourseTeacherReqItem {
	return &UpdateTrainingCourseTeacherReqItem{}
}

func (p *UpdateTrainingCourseTeacherReqItem) InitDefault() {
}

func (p *UpdateTrainingCourseTeacherReqItem) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *UpdateTrainingCourseTeacherReqItem) GetWeek() (v string) {
	return p.Week
}
func (p *UpdateTrainingCourseTeacherReqItem) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *UpdateTrainingCourseTeacherReqItem) SetWeek(val string) {
	p.Week = val
}

var fieldIDToName_UpdateTrainingCourseTeacherReqItem = map[int16]string{
	1: "teacher_id",
	2: "week",
}

func (p *UpdateTrainingCourseTeacherReqItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTrainingCourseTeacherReqItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReqItem) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *UpdateTrainingCourseTeacherReqItem) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Week = _field
	return nil
}

func (p *UpdateTrainingCourseTeacherReqItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourseTeacherReqItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReqItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReqItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Week); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReqItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTrainingCourseTeacherReqItem(%+v)", *p)

}

func (p *UpdateTrainingCourseTeacherReqItem) DeepEqual(ano *UpdateTrainingCourseTeacherReqItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Week) {
		return false
	}
	return true
}

func (p *UpdateTrainingCourseTeacherReqItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseTeacherReqItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Week, src) != 0 {
		return false
	}
	return true
}

type UpdateTrainingCourseTeacherReq struct {
	TrainingCourseId int32                                 `thrift:"training_course_id,1" frugal:"1,default,i32" json:"training_course_id" binding:"required"`
	Items            []*UpdateTrainingCourseTeacherReqItem `thrift:"items,2" frugal:"2,default,list<UpdateTrainingCourseTeacherReqItem>" json:"items" binding:"required"`
}

func NewUpdateTrainingCourseTeacherReq() *UpdateTrainingCourseTeacherReq {
	return &UpdateTrainingCourseTeacherReq{}
}

func (p *UpdateTrainingCourseTeacherReq) InitDefault() {
}

func (p *UpdateTrainingCourseTeacherReq) GetTrainingCourseId() (v int32) {
	return p.TrainingCourseId
}

func (p *UpdateTrainingCourseTeacherReq) GetItems() (v []*UpdateTrainingCourseTeacherReqItem) {
	return p.Items
}
func (p *UpdateTrainingCourseTeacherReq) SetTrainingCourseId(val int32) {
	p.TrainingCourseId = val
}
func (p *UpdateTrainingCourseTeacherReq) SetItems(val []*UpdateTrainingCourseTeacherReqItem) {
	p.Items = val
}

var fieldIDToName_UpdateTrainingCourseTeacherReq = map[int16]string{
	1: "training_course_id",
	2: "items",
}

func (p *UpdateTrainingCourseTeacherReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTrainingCourseTeacherReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrainingCourseId = _field
	return nil
}
func (p *UpdateTrainingCourseTeacherReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*UpdateTrainingCourseTeacherReqItem, 0, size)
	values := make([]UpdateTrainingCourseTeacherReqItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}

func (p *UpdateTrainingCourseTeacherReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourseTeacherReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("training_course_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TrainingCourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTrainingCourseTeacherReq(%+v)", *p)

}

func (p *UpdateTrainingCourseTeacherReq) DeepEqual(ano *UpdateTrainingCourseTeacherReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TrainingCourseId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *UpdateTrainingCourseTeacherReq) Field1DeepEqual(src int32) bool {

	if p.TrainingCourseId != src {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseTeacherReq) Field2DeepEqual(src []*UpdateTrainingCourseTeacherReqItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UpdateTrainingCourseTeacherResp struct {
}

func NewUpdateTrainingCourseTeacherResp() *UpdateTrainingCourseTeacherResp {
	return &UpdateTrainingCourseTeacherResp{}
}

func (p *UpdateTrainingCourseTeacherResp) InitDefault() {
}

var fieldIDToName_UpdateTrainingCourseTeacherResp = map[int16]string{}

func (p *UpdateTrainingCourseTeacherResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateTrainingCourseTeacherResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTrainingCourseTeacherResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTrainingCourseTeacherResp(%+v)", *p)

}

func (p *UpdateTrainingCourseTeacherResp) DeepEqual(ano *UpdateTrainingCourseTeacherResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateTrainingCourseReq struct {
	Id                    int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	Major                 string `thrift:"major,2" frugal:"2,default,string" json:"major" binding:"required"`
	ClassName             string `thrift:"class_name,3" frugal:"3,default,string" json:"class_name" binding:"required"`
	StudentNumber         int32  `thrift:"student_number,4" frugal:"4,default,i32" json:"student_number" binding:"required"`
	CourseName            string `thrift:"course_name,5" frugal:"5,default,string" json:"course_name" binding:"required"`
	Location              string `thrift:"location,6" frugal:"6,default,string" json:"location" binding:"required"`
	CooperationEnterprise string `thrift:"cooperation_enterprise,7" frugal:"7,default,string" json:"cooperation_enterprise"`
	TrainingWeek          int32  `thrift:"training_week,8" frugal:"8,default,i32" json:"training_week" binding:"required"`
	EnterpriseTeacherName string `thrift:"enterprise_teacher_name,9" frugal:"9,default,string" json:"enterprise_teacher_name" `
}

func NewUpdateTrainingCourseReq() *UpdateTrainingCourseReq {
	return &UpdateTrainingCourseReq{}
}

func (p *UpdateTrainingCourseReq) InitDefault() {
}

func (p *UpdateTrainingCourseReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateTrainingCourseReq) GetMajor() (v string) {
	return p.Major
}

func (p *UpdateTrainingCourseReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *UpdateTrainingCourseReq) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *UpdateTrainingCourseReq) GetCourseName() (v string) {
	return p.CourseName
}

func (p *UpdateTrainingCourseReq) GetLocation() (v string) {
	return p.Location
}

func (p *UpdateTrainingCourseReq) GetCooperationEnterprise() (v string) {
	return p.CooperationEnterprise
}

func (p *UpdateTrainingCourseReq) GetTrainingWeek() (v int32) {
	return p.TrainingWeek
}

func (p *UpdateTrainingCourseReq) GetEnterpriseTeacherName() (v string) {
	return p.EnterpriseTeacherName
}
func (p *UpdateTrainingCourseReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateTrainingCourseReq) SetMajor(val string) {
	p.Major = val
}
func (p *UpdateTrainingCourseReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *UpdateTrainingCourseReq) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *UpdateTrainingCourseReq) SetCourseName(val string) {
	p.CourseName = val
}
func (p *UpdateTrainingCourseReq) SetLocation(val string) {
	p.Location = val
}
func (p *UpdateTrainingCourseReq) SetCooperationEnterprise(val string) {
	p.CooperationEnterprise = val
}
func (p *UpdateTrainingCourseReq) SetTrainingWeek(val int32) {
	p.TrainingWeek = val
}
func (p *UpdateTrainingCourseReq) SetEnterpriseTeacherName(val string) {
	p.EnterpriseTeacherName = val
}

var fieldIDToName_UpdateTrainingCourseReq = map[int16]string{
	1: "id",
	2: "major",
	3: "class_name",
	4: "student_number",
	5: "course_name",
	6: "location",
	7: "cooperation_enterprise",
	8: "training_week",
	9: "enterprise_teacher_name",
}

func (p *UpdateTrainingCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTrainingCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Major = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Location = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CooperationEnterprise = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrainingWeek = _field
	return nil
}
func (p *UpdateTrainingCourseReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnterpriseTeacherName = _field
	return nil
}

func (p *UpdateTrainingCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("major", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Major); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Location); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cooperation_enterprise", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CooperationEnterprise); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("training_week", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TrainingWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_teacher_name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EnterpriseTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateTrainingCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTrainingCourseReq(%+v)", *p)

}

func (p *UpdateTrainingCourseReq) DeepEqual(ano *UpdateTrainingCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Major) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field4DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field5DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Location) {
		return false
	}
	if !p.Field7DeepEqual(ano.CooperationEnterprise) {
		return false
	}
	if !p.Field8DeepEqual(ano.TrainingWeek) {
		return false
	}
	if !p.Field9DeepEqual(ano.EnterpriseTeacherName) {
		return false
	}
	return true
}

func (p *UpdateTrainingCourseReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Major, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field4DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Location, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CooperationEnterprise, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field8DeepEqual(src int32) bool {

	if p.TrainingWeek != src {
		return false
	}
	return true
}
func (p *UpdateTrainingCourseReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.EnterpriseTeacherName, src) != 0 {
		return false
	}
	return true
}

type UpdateTrainingCourseResp struct {
}

func NewUpdateTrainingCourseResp() *UpdateTrainingCourseResp {
	return &UpdateTrainingCourseResp{}
}

func (p *UpdateTrainingCourseResp) InitDefault() {
}

var fieldIDToName_UpdateTrainingCourseResp = map[int16]string{}

func (p *UpdateTrainingCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTrainingCourseResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateTrainingCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTrainingCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTrainingCourseResp(%+v)", *p)

}

func (p *UpdateTrainingCourseResp) DeepEqual(ano *UpdateTrainingCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteTrainingCourseReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteTrainingCourseReq() *DeleteTrainingCourseReq {
	return &DeleteTrainingCourseReq{}
}

func (p *DeleteTrainingCourseReq) InitDefault() {
}

func (p *DeleteTrainingCourseReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteTrainingCourseReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteTrainingCourseReq = map[int16]string{
	1: "ids",
}

func (p *DeleteTrainingCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteTrainingCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteTrainingCourseReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteTrainingCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTrainingCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteTrainingCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteTrainingCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTrainingCourseReq(%+v)", *p)

}

func (p *DeleteTrainingCourseReq) DeepEqual(ano *DeleteTrainingCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteTrainingCourseReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteTrainingCourseResp struct {
}

func NewDeleteTrainingCourseResp() *DeleteTrainingCourseResp {
	return &DeleteTrainingCourseResp{}
}

func (p *DeleteTrainingCourseResp) InitDefault() {
}

var fieldIDToName_DeleteTrainingCourseResp = map[int16]string{}

func (p *DeleteTrainingCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteTrainingCourseResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteTrainingCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteTrainingCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTrainingCourseResp(%+v)", *p)

}

func (p *DeleteTrainingCourseResp) DeepEqual(ano *DeleteTrainingCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CreateTrainingCourseReq struct {
	AcademicYear          string `thrift:"academic_year,10" frugal:"10,default,string" json:"academic_year" binding:"required" `
	Semester              string `thrift:"semester,1" frugal:"1,default,string" json:"semester" binding:"required" `
	Major                 string `thrift:"major,2" frugal:"2,default,string" json:"major" binding:"required"`
	ClassName             string `thrift:"class_name,3" frugal:"3,default,string" json:"class_name" binding:"required"`
	StudentNumber         int32  `thrift:"student_number,4" frugal:"4,default,i32" json:"student_number" binding:"required"`
	CourseName            string `thrift:"course_name,5" frugal:"5,default,string" json:"course_name" binding:"required"`
	Location              string `thrift:"location,6" frugal:"6,default,string" json:"location" binding:"required"`
	CooperationEnterprise string `thrift:"cooperation_enterprise,7" frugal:"7,default,string" json:"cooperation_enterprise"`
	TrainingWeek          int32  `thrift:"training_week,8" frugal:"8,default,i32" json:"training_week" binding:"required"`
	EnterpriseTeacherName string `thrift:"enterprise_teacher_name,9" frugal:"9,default,string" json:"enterprise_teacher_name" `
}

func NewCreateTrainingCourseReq() *CreateTrainingCourseReq {
	return &CreateTrainingCourseReq{}
}

func (p *CreateTrainingCourseReq) InitDefault() {
}

func (p *CreateTrainingCourseReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *CreateTrainingCourseReq) GetSemester() (v string) {
	return p.Semester
}

func (p *CreateTrainingCourseReq) GetMajor() (v string) {
	return p.Major
}

func (p *CreateTrainingCourseReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *CreateTrainingCourseReq) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *CreateTrainingCourseReq) GetCourseName() (v string) {
	return p.CourseName
}

func (p *CreateTrainingCourseReq) GetLocation() (v string) {
	return p.Location
}

func (p *CreateTrainingCourseReq) GetCooperationEnterprise() (v string) {
	return p.CooperationEnterprise
}

func (p *CreateTrainingCourseReq) GetTrainingWeek() (v int32) {
	return p.TrainingWeek
}

func (p *CreateTrainingCourseReq) GetEnterpriseTeacherName() (v string) {
	return p.EnterpriseTeacherName
}
func (p *CreateTrainingCourseReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *CreateTrainingCourseReq) SetSemester(val string) {
	p.Semester = val
}
func (p *CreateTrainingCourseReq) SetMajor(val string) {
	p.Major = val
}
func (p *CreateTrainingCourseReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *CreateTrainingCourseReq) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *CreateTrainingCourseReq) SetCourseName(val string) {
	p.CourseName = val
}
func (p *CreateTrainingCourseReq) SetLocation(val string) {
	p.Location = val
}
func (p *CreateTrainingCourseReq) SetCooperationEnterprise(val string) {
	p.CooperationEnterprise = val
}
func (p *CreateTrainingCourseReq) SetTrainingWeek(val int32) {
	p.TrainingWeek = val
}
func (p *CreateTrainingCourseReq) SetEnterpriseTeacherName(val string) {
	p.EnterpriseTeacherName = val
}

var fieldIDToName_CreateTrainingCourseReq = map[int16]string{
	10: "academic_year",
	1:  "semester",
	2:  "major",
	3:  "class_name",
	4:  "student_number",
	5:  "course_name",
	6:  "location",
	7:  "cooperation_enterprise",
	8:  "training_week",
	9:  "enterprise_teacher_name",
}

func (p *CreateTrainingCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateTrainingCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTrainingCourseReq) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Major = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Location = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CooperationEnterprise = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrainingWeek = _field
	return nil
}
func (p *CreateTrainingCourseReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnterpriseTeacherName = _field
	return nil
}

func (p *CreateTrainingCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTrainingCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("major", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Major); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Location); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cooperation_enterprise", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CooperationEnterprise); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("training_week", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TrainingWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_teacher_name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EnterpriseTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateTrainingCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTrainingCourseReq(%+v)", *p)

}

func (p *CreateTrainingCourseReq) DeepEqual(ano *CreateTrainingCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field10DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field1DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field2DeepEqual(ano.Major) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field4DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field5DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Location) {
		return false
	}
	if !p.Field7DeepEqual(ano.CooperationEnterprise) {
		return false
	}
	if !p.Field8DeepEqual(ano.TrainingWeek) {
		return false
	}
	if !p.Field9DeepEqual(ano.EnterpriseTeacherName) {
		return false
	}
	return true
}

func (p *CreateTrainingCourseReq) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Major, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field4DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Location, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CooperationEnterprise, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field8DeepEqual(src int32) bool {

	if p.TrainingWeek != src {
		return false
	}
	return true
}
func (p *CreateTrainingCourseReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.EnterpriseTeacherName, src) != 0 {
		return false
	}
	return true
}

type CreateTrainingCourseResp struct {
}

func NewCreateTrainingCourseResp() *CreateTrainingCourseResp {
	return &CreateTrainingCourseResp{}
}

func (p *CreateTrainingCourseResp) InitDefault() {
}

var fieldIDToName_CreateTrainingCourseResp = map[int16]string{}

func (p *CreateTrainingCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTrainingCourseResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateTrainingCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTrainingCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTrainingCourseResp(%+v)", *p)

}

func (p *CreateTrainingCourseResp) DeepEqual(ano *CreateTrainingCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetTrainingCourseListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option" binding:"required"`
}

func NewGetTrainingCourseListReq() *GetTrainingCourseListReq {
	return &GetTrainingCourseListReq{}
}

func (p *GetTrainingCourseListReq) InitDefault() {
}

var GetTrainingCourseListReq_ListOption_DEFAULT *base.ListOption

func (p *GetTrainingCourseListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetTrainingCourseListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetTrainingCourseListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetTrainingCourseListReq = map[int16]string{
	1: "list_option",
}

func (p *GetTrainingCourseListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetTrainingCourseListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTrainingCourseListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTrainingCourseListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetTrainingCourseListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrainingCourseListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTrainingCourseListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTrainingCourseListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTrainingCourseListReq(%+v)", *p)

}

func (p *GetTrainingCourseListReq) DeepEqual(ano *GetTrainingCourseListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetTrainingCourseListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetTrainingCourseListResp struct {
	List       []*ModelTrainingCourse                  `thrift:"list,1" frugal:"1,default,list<ModelTrainingCourse>" json:"list"`
	Paginate   *base.Paginate                          `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
	TeacherMap map[int32][]*ModelTrainingCourseTeacher `thrift:"teacher_map,3" frugal:"3,default,map<i32:list<ModelTrainingCourseTeacher>>" json:"teacher_map"`
}

func NewGetTrainingCourseListResp() *GetTrainingCourseListResp {
	return &GetTrainingCourseListResp{}
}

func (p *GetTrainingCourseListResp) InitDefault() {
}

func (p *GetTrainingCourseListResp) GetList() (v []*ModelTrainingCourse) {
	return p.List
}

var GetTrainingCourseListResp_Paginate_DEFAULT *base.Paginate

func (p *GetTrainingCourseListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetTrainingCourseListResp_Paginate_DEFAULT
	}
	return p.Paginate
}

func (p *GetTrainingCourseListResp) GetTeacherMap() (v map[int32][]*ModelTrainingCourseTeacher) {
	return p.TeacherMap
}
func (p *GetTrainingCourseListResp) SetList(val []*ModelTrainingCourse) {
	p.List = val
}
func (p *GetTrainingCourseListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}
func (p *GetTrainingCourseListResp) SetTeacherMap(val map[int32][]*ModelTrainingCourseTeacher) {
	p.TeacherMap = val
}

var fieldIDToName_GetTrainingCourseListResp = map[int16]string{
	1: "list",
	2: "paginate",
	3: "teacher_map",
}

func (p *GetTrainingCourseListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetTrainingCourseListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTrainingCourseListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTrainingCourseListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelTrainingCourse, 0, size)
	values := make([]ModelTrainingCourse, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetTrainingCourseListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}
func (p *GetTrainingCourseListResp) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*ModelTrainingCourseTeacher, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*ModelTrainingCourseTeacher, 0, size)
		values := make([]ModelTrainingCourseTeacher, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TeacherMap = _field
	return nil
}

func (p *GetTrainingCourseListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrainingCourseListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTrainingCourseListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTrainingCourseListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTrainingCourseListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_map", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.TeacherMap)); err != nil {
		return err
	}
	for k, v := range p.TeacherMap {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetTrainingCourseListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTrainingCourseListResp(%+v)", *p)

}

func (p *GetTrainingCourseListResp) DeepEqual(ano *GetTrainingCourseListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	if !p.Field3DeepEqual(ano.TeacherMap) {
		return false
	}
	return true
}

func (p *GetTrainingCourseListResp) Field1DeepEqual(src []*ModelTrainingCourse) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetTrainingCourseListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTrainingCourseListResp) Field3DeepEqual(src map[int32][]*ModelTrainingCourseTeacher) bool {

	if len(p.TeacherMap) != len(src) {
		return false
	}
	for k, v := range p.TeacherMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type ImportInternshipReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	UploadId     string `thrift:"upload_id,3" frugal:"3,default,string" json:"upload_id" binding:"required"`
}

func NewImportInternshipReq() *ImportInternshipReq {
	return &ImportInternshipReq{}
}

func (p *ImportInternshipReq) InitDefault() {
}

func (p *ImportInternshipReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ImportInternshipReq) GetSemester() (v string) {
	return p.Semester
}

func (p *ImportInternshipReq) GetUploadId() (v string) {
	return p.UploadId
}
func (p *ImportInternshipReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ImportInternshipReq) SetSemester(val string) {
	p.Semester = val
}
func (p *ImportInternshipReq) SetUploadId(val string) {
	p.UploadId = val
}

var fieldIDToName_ImportInternshipReq = map[int16]string{
	1: "academic_year",
	2: "semester",
	3: "upload_id",
}

func (p *ImportInternshipReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportInternshipReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportInternshipReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ImportInternshipReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ImportInternshipReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UploadId = _field
	return nil
}

func (p *ImportInternshipReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportInternshipReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportInternshipReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportInternshipReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ImportInternshipReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("upload_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ImportInternshipReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportInternshipReq(%+v)", *p)

}

func (p *ImportInternshipReq) DeepEqual(ano *ImportInternshipReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.UploadId) {
		return false
	}
	return true
}

func (p *ImportInternshipReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ImportInternshipReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ImportInternshipReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UploadId, src) != 0 {
		return false
	}
	return true
}

type ImportInternshipResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportInternshipResp() *ImportInternshipResp {
	return &ImportInternshipResp{}
}

func (p *ImportInternshipResp) InitDefault() {
}

func (p *ImportInternshipResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportInternshipResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportInternshipResp = map[int16]string{
	1: "task_key",
}

func (p *ImportInternshipResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportInternshipResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportInternshipResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportInternshipResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportInternshipResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportInternshipResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportInternshipResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportInternshipResp(%+v)", *p)

}

func (p *ImportInternshipResp) DeepEqual(ano *ImportInternshipResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportInternshipResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type CreateInternshipReq struct {
	AcademicYear     string  `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester         string  `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	TeacherId        string  `thrift:"teacher_id,3" frugal:"3,default,string" json:"teacher_id" binding:"required"`
	TeacherName      string  `thrift:"teacher_name,4" frugal:"4,default,string" binding:"required" json:"teacher_name"`
	TeachClass       string  `thrift:"teach_class,5" frugal:"5,default,string" binding:"required" json:"teach_class"`
	ClassName        string  `thrift:"class_name,6" frugal:"6,default,string" binding:"required" json:"class_name"`
	Category         int32   `thrift:"category,7" frugal:"7,default,i32" binding:"required" json:"category"`
	StartWeek        int32   `thrift:"start_week,8" frugal:"8,default,i32" binding:"required" json:"start_week"`
	EndWeek          int32   `thrift:"end_week,9" frugal:"9,default,i32" binding:"required" json:"end_week"`
	AssessmentMethod string  `thrift:"assessment_method,10" frugal:"10,default,string"  json:"assessment_method"`
	StudentNumber    int32   `thrift:"student_number,11" frugal:"11,default,i32" binding:"required" json:"student_number"`
	WeekHour         float64 `thrift:"week_hour,12" frugal:"12,default,double" json:"week_hour"`
}

func NewCreateInternshipReq() *CreateInternshipReq {
	return &CreateInternshipReq{}
}

func (p *CreateInternshipReq) InitDefault() {
}

func (p *CreateInternshipReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *CreateInternshipReq) GetSemester() (v string) {
	return p.Semester
}

func (p *CreateInternshipReq) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *CreateInternshipReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *CreateInternshipReq) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *CreateInternshipReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *CreateInternshipReq) GetCategory() (v int32) {
	return p.Category
}

func (p *CreateInternshipReq) GetStartWeek() (v int32) {
	return p.StartWeek
}

func (p *CreateInternshipReq) GetEndWeek() (v int32) {
	return p.EndWeek
}

func (p *CreateInternshipReq) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}

func (p *CreateInternshipReq) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *CreateInternshipReq) GetWeekHour() (v float64) {
	return p.WeekHour
}
func (p *CreateInternshipReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *CreateInternshipReq) SetSemester(val string) {
	p.Semester = val
}
func (p *CreateInternshipReq) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *CreateInternshipReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *CreateInternshipReq) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *CreateInternshipReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *CreateInternshipReq) SetCategory(val int32) {
	p.Category = val
}
func (p *CreateInternshipReq) SetStartWeek(val int32) {
	p.StartWeek = val
}
func (p *CreateInternshipReq) SetEndWeek(val int32) {
	p.EndWeek = val
}
func (p *CreateInternshipReq) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}
func (p *CreateInternshipReq) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *CreateInternshipReq) SetWeekHour(val float64) {
	p.WeekHour = val
}

var fieldIDToName_CreateInternshipReq = map[int16]string{
	1:  "academic_year",
	2:  "semester",
	3:  "teacher_id",
	4:  "teacher_name",
	5:  "teach_class",
	6:  "class_name",
	7:  "category",
	8:  "start_week",
	9:  "end_week",
	10: "assessment_method",
	11: "student_number",
	12: "week_hour",
}

func (p *CreateInternshipReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateInternshipReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateInternshipReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *CreateInternshipReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *CreateInternshipReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *CreateInternshipReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *CreateInternshipReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *CreateInternshipReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *CreateInternshipReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Category = _field
	return nil
}
func (p *CreateInternshipReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *CreateInternshipReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndWeek = _field
	return nil
}
func (p *CreateInternshipReq) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}
func (p *CreateInternshipReq) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *CreateInternshipReq) ReadField12(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WeekHour = _field
	return nil
}

func (p *CreateInternshipReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInternshipReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateInternshipReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("category", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_week", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateInternshipReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week_hour", thrift.DOUBLE, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.WeekHour); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateInternshipReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInternshipReq(%+v)", *p)

}

func (p *CreateInternshipReq) DeepEqual(ano *CreateInternshipReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field4DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field5DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field6DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field7DeepEqual(ano.Category) {
		return false
	}
	if !p.Field8DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field9DeepEqual(ano.EndWeek) {
		return false
	}
	if !p.Field10DeepEqual(ano.AssessmentMethod) {
		return false
	}
	if !p.Field11DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field12DeepEqual(ano.WeekHour) {
		return false
	}
	return true
}

func (p *CreateInternshipReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field7DeepEqual(src int32) bool {

	if p.Category != src {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field8DeepEqual(src int32) bool {

	if p.StartWeek != src {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field9DeepEqual(src int32) bool {

	if p.EndWeek != src {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field11DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *CreateInternshipReq) Field12DeepEqual(src float64) bool {

	if p.WeekHour != src {
		return false
	}
	return true
}

type CreateInternshipResp struct {
}

func NewCreateInternshipResp() *CreateInternshipResp {
	return &CreateInternshipResp{}
}

func (p *CreateInternshipResp) InitDefault() {
}

var fieldIDToName_CreateInternshipResp = map[int16]string{}

func (p *CreateInternshipResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateInternshipResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateInternshipResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateInternshipResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInternshipResp(%+v)", *p)

}

func (p *CreateInternshipResp) DeepEqual(ano *CreateInternshipResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateInternshipReq struct {
	Id               int32   `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	TeacherId        string  `thrift:"teacher_id,2" frugal:"2,default,string" json:"teacher_id" binding:"required"`
	TeacherName      string  `thrift:"teacher_name,3" frugal:"3,default,string" binding:"required" json:"teacher_name"`
	TeachClass       string  `thrift:"teach_class,4" frugal:"4,default,string" binding:"required" json:"teach_class"`
	ClassName        string  `thrift:"class_name,5" frugal:"5,default,string" binding:"required" json:"class_name"`
	Category         int32   `thrift:"category,6" frugal:"6,default,i32" binding:"required" json:"category"`
	StartWeek        int32   `thrift:"start_week,7" frugal:"7,default,i32" binding:"required" json:"start_week"`
	EndWeek          int32   `thrift:"end_week,8" frugal:"8,default,i32" binding:"required" json:"end_week"`
	AssessmentMethod string  `thrift:"assessment_method,9" frugal:"9,default,string"  json:"assessment_method"`
	StudentNumber    int32   `thrift:"student_number,10" frugal:"10,default,i32" binding:"required" json:"student_number"`
	WeekHour         float64 `thrift:"week_hour,11" frugal:"11,default,double" json:"week_hour"`
}

func NewUpdateInternshipReq() *UpdateInternshipReq {
	return &UpdateInternshipReq{}
}

func (p *UpdateInternshipReq) InitDefault() {
}

func (p *UpdateInternshipReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateInternshipReq) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *UpdateInternshipReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *UpdateInternshipReq) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *UpdateInternshipReq) GetClassName() (v string) {
	return p.ClassName
}

func (p *UpdateInternshipReq) GetCategory() (v int32) {
	return p.Category
}

func (p *UpdateInternshipReq) GetStartWeek() (v int32) {
	return p.StartWeek
}

func (p *UpdateInternshipReq) GetEndWeek() (v int32) {
	return p.EndWeek
}

func (p *UpdateInternshipReq) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}

func (p *UpdateInternshipReq) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *UpdateInternshipReq) GetWeekHour() (v float64) {
	return p.WeekHour
}
func (p *UpdateInternshipReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateInternshipReq) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *UpdateInternshipReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *UpdateInternshipReq) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *UpdateInternshipReq) SetClassName(val string) {
	p.ClassName = val
}
func (p *UpdateInternshipReq) SetCategory(val int32) {
	p.Category = val
}
func (p *UpdateInternshipReq) SetStartWeek(val int32) {
	p.StartWeek = val
}
func (p *UpdateInternshipReq) SetEndWeek(val int32) {
	p.EndWeek = val
}
func (p *UpdateInternshipReq) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}
func (p *UpdateInternshipReq) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *UpdateInternshipReq) SetWeekHour(val float64) {
	p.WeekHour = val
}

var fieldIDToName_UpdateInternshipReq = map[int16]string{
	1:  "id",
	2:  "teacher_id",
	3:  "teacher_name",
	4:  "teach_class",
	5:  "class_name",
	6:  "category",
	7:  "start_week",
	8:  "end_week",
	9:  "assessment_method",
	10: "student_number",
	11: "week_hour",
}

func (p *UpdateInternshipReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateInternshipReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateInternshipReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Category = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndWeek = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *UpdateInternshipReq) ReadField11(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WeekHour = _field
	return nil
}

func (p *UpdateInternshipReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateInternshipReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("category", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_week", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateInternshipReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week_hour", thrift.DOUBLE, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.WeekHour); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdateInternshipReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateInternshipReq(%+v)", *p)

}

func (p *UpdateInternshipReq) DeepEqual(ano *UpdateInternshipReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field4DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field5DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Category) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field8DeepEqual(ano.EndWeek) {
		return false
	}
	if !p.Field9DeepEqual(ano.AssessmentMethod) {
		return false
	}
	if !p.Field10DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field11DeepEqual(ano.WeekHour) {
		return false
	}
	return true
}

func (p *UpdateInternshipReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field6DeepEqual(src int32) bool {

	if p.Category != src {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field7DeepEqual(src int32) bool {

	if p.StartWeek != src {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field8DeepEqual(src int32) bool {

	if p.EndWeek != src {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field10DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *UpdateInternshipReq) Field11DeepEqual(src float64) bool {

	if p.WeekHour != src {
		return false
	}
	return true
}

type UpdateInternshipResp struct {
}

func NewUpdateInternshipResp() *UpdateInternshipResp {
	return &UpdateInternshipResp{}
}

func (p *UpdateInternshipResp) InitDefault() {
}

var fieldIDToName_UpdateInternshipResp = map[int16]string{}

func (p *UpdateInternshipResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateInternshipResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateInternshipResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateInternshipResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateInternshipResp(%+v)", *p)

}

func (p *UpdateInternshipResp) DeepEqual(ano *UpdateInternshipResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteInternshipReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteInternshipReq() *DeleteInternshipReq {
	return &DeleteInternshipReq{}
}

func (p *DeleteInternshipReq) InitDefault() {
}

func (p *DeleteInternshipReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteInternshipReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteInternshipReq = map[int16]string{
	1: "ids",
}

func (p *DeleteInternshipReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteInternshipReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteInternshipReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteInternshipReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteInternshipReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteInternshipReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteInternshipReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteInternshipReq(%+v)", *p)

}

func (p *DeleteInternshipReq) DeepEqual(ano *DeleteInternshipReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteInternshipReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteInternshipResp struct {
}

func NewDeleteInternshipResp() *DeleteInternshipResp {
	return &DeleteInternshipResp{}
}

func (p *DeleteInternshipResp) InitDefault() {
}

var fieldIDToName_DeleteInternshipResp = map[int16]string{}

func (p *DeleteInternshipResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteInternshipResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteInternshipResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteInternshipResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteInternshipResp(%+v)", *p)

}

func (p *DeleteInternshipResp) DeepEqual(ano *DeleteInternshipResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetInternshipListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetInternshipListReq() *GetInternshipListReq {
	return &GetInternshipListReq{}
}

func (p *GetInternshipListReq) InitDefault() {
}

var GetInternshipListReq_ListOption_DEFAULT *base.ListOption

func (p *GetInternshipListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetInternshipListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetInternshipListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetInternshipListReq = map[int16]string{
	1: "list_option",
}

func (p *GetInternshipListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetInternshipListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetInternshipListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetInternshipListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetInternshipListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInternshipListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetInternshipListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetInternshipListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInternshipListReq(%+v)", *p)

}

func (p *GetInternshipListReq) DeepEqual(ano *GetInternshipListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetInternshipListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetInternshipListResp struct {
	List     []*ModelInternship `thrift:"list,1" frugal:"1,default,list<ModelInternship>" json:"list"`
	Paginate *base.Paginate     `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetInternshipListResp() *GetInternshipListResp {
	return &GetInternshipListResp{}
}

func (p *GetInternshipListResp) InitDefault() {
}

func (p *GetInternshipListResp) GetList() (v []*ModelInternship) {
	return p.List
}

var GetInternshipListResp_Paginate_DEFAULT *base.Paginate

func (p *GetInternshipListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetInternshipListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetInternshipListResp) SetList(val []*ModelInternship) {
	p.List = val
}
func (p *GetInternshipListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetInternshipListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetInternshipListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetInternshipListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetInternshipListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetInternshipListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelInternship, 0, size)
	values := make([]ModelInternship, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetInternshipListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetInternshipListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInternshipListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetInternshipListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetInternshipListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetInternshipListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInternshipListResp(%+v)", *p)

}

func (p *GetInternshipListResp) DeepEqual(ano *GetInternshipListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetInternshipListResp) Field1DeepEqual(src []*ModelInternship) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetInternshipListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateHolidayReq struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	Name      string `thrift:"name,3" frugal:"3,default,string" json:"name" binding:"required"`
	BiginDate string `thrift:"bigin_date,4" frugal:"4,default,string" json:"bigin_date" binding:"required"`
	EndDate   string `thrift:"end_date,5" frugal:"5,default,string" json:"end_date" binding:"required"`
	Remark    string `thrift:"remark,6" frugal:"6,default,string" json:"remark"`
}

func NewUpdateHolidayReq() *UpdateHolidayReq {
	return &UpdateHolidayReq{}
}

func (p *UpdateHolidayReq) InitDefault() {
}

func (p *UpdateHolidayReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateHolidayReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateHolidayReq) GetBiginDate() (v string) {
	return p.BiginDate
}

func (p *UpdateHolidayReq) GetEndDate() (v string) {
	return p.EndDate
}

func (p *UpdateHolidayReq) GetRemark() (v string) {
	return p.Remark
}
func (p *UpdateHolidayReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateHolidayReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateHolidayReq) SetBiginDate(val string) {
	p.BiginDate = val
}
func (p *UpdateHolidayReq) SetEndDate(val string) {
	p.EndDate = val
}
func (p *UpdateHolidayReq) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_UpdateHolidayReq = map[int16]string{
	1: "id",
	3: "name",
	4: "bigin_date",
	5: "end_date",
	6: "remark",
}

func (p *UpdateHolidayReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateHolidayReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateHolidayReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateHolidayReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateHolidayReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BiginDate = _field
	return nil
}
func (p *UpdateHolidayReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndDate = _field
	return nil
}
func (p *UpdateHolidayReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}

func (p *UpdateHolidayReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateHolidayReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateHolidayReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateHolidayReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateHolidayReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bigin_date", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BiginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateHolidayReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_date", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateHolidayReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateHolidayReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateHolidayReq(%+v)", *p)

}

func (p *UpdateHolidayReq) DeepEqual(ano *UpdateHolidayReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.BiginDate) {
		return false
	}
	if !p.Field5DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field6DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *UpdateHolidayReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateHolidayReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateHolidayReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.BiginDate, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateHolidayReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateHolidayReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type UpdateHolidayResp struct {
}

func NewUpdateHolidayResp() *UpdateHolidayResp {
	return &UpdateHolidayResp{}
}

func (p *UpdateHolidayResp) InitDefault() {
}

var fieldIDToName_UpdateHolidayResp = map[int16]string{}

func (p *UpdateHolidayResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateHolidayResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateHolidayResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateHolidayResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateHolidayResp(%+v)", *p)

}

func (p *UpdateHolidayResp) DeepEqual(ano *UpdateHolidayResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CreateHolidayReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required" `
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	Name         string `thrift:"name,3" frugal:"3,default,string" json:"name" binding:"required"`
	BeginDate    string `thrift:"begin_date,4" frugal:"4,default,string" json:"begin_date" binding:"required"`
	EndDate      string `thrift:"end_date,5" frugal:"5,default,string" json:"end_date" binding:"required"`
	Remark       string `thrift:"remark,6" frugal:"6,default,string" json:"remark"`
}

func NewCreateHolidayReq() *CreateHolidayReq {
	return &CreateHolidayReq{}
}

func (p *CreateHolidayReq) InitDefault() {
}

func (p *CreateHolidayReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *CreateHolidayReq) GetSemester() (v string) {
	return p.Semester
}

func (p *CreateHolidayReq) GetName() (v string) {
	return p.Name
}

func (p *CreateHolidayReq) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *CreateHolidayReq) GetEndDate() (v string) {
	return p.EndDate
}

func (p *CreateHolidayReq) GetRemark() (v string) {
	return p.Remark
}
func (p *CreateHolidayReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *CreateHolidayReq) SetSemester(val string) {
	p.Semester = val
}
func (p *CreateHolidayReq) SetName(val string) {
	p.Name = val
}
func (p *CreateHolidayReq) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *CreateHolidayReq) SetEndDate(val string) {
	p.EndDate = val
}
func (p *CreateHolidayReq) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_CreateHolidayReq = map[int16]string{
	1: "academic_year",
	2: "semester",
	3: "name",
	4: "begin_date",
	5: "end_date",
	6: "remark",
}

func (p *CreateHolidayReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateHolidayReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateHolidayReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *CreateHolidayReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *CreateHolidayReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateHolidayReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeginDate = _field
	return nil
}
func (p *CreateHolidayReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndDate = _field
	return nil
}
func (p *CreateHolidayReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}

func (p *CreateHolidayReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHolidayReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateHolidayReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateHolidayReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateHolidayReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateHolidayReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("begin_date", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateHolidayReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_date", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateHolidayReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateHolidayReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateHolidayReq(%+v)", *p)

}

func (p *CreateHolidayReq) DeepEqual(ano *CreateHolidayReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field5DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field6DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *CreateHolidayReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *CreateHolidayReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *CreateHolidayReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateHolidayReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *CreateHolidayReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *CreateHolidayReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type CreateHolidayResp struct {
}

func NewCreateHolidayResp() *CreateHolidayResp {
	return &CreateHolidayResp{}
}

func (p *CreateHolidayResp) InitDefault() {
}

var fieldIDToName_CreateHolidayResp = map[int16]string{}

func (p *CreateHolidayResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateHolidayResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateHolidayResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateHolidayResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateHolidayResp(%+v)", *p)

}

func (p *CreateHolidayResp) DeepEqual(ano *CreateHolidayResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteHolidayReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteHolidayReq() *DeleteHolidayReq {
	return &DeleteHolidayReq{}
}

func (p *DeleteHolidayReq) InitDefault() {
}

func (p *DeleteHolidayReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteHolidayReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteHolidayReq = map[int16]string{
	1: "ids",
}

func (p *DeleteHolidayReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteHolidayReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteHolidayReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteHolidayReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteHolidayReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteHolidayReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteHolidayReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteHolidayReq(%+v)", *p)

}

func (p *DeleteHolidayReq) DeepEqual(ano *DeleteHolidayReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteHolidayReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteHolidayResp struct {
}

func NewDeleteHolidayResp() *DeleteHolidayResp {
	return &DeleteHolidayResp{}
}

func (p *DeleteHolidayResp) InitDefault() {
}

var fieldIDToName_DeleteHolidayResp = map[int16]string{}

func (p *DeleteHolidayResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteHolidayResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteHolidayResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteHolidayResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteHolidayResp(%+v)", *p)

}

func (p *DeleteHolidayResp) DeepEqual(ano *DeleteHolidayResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetHolidayListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetHolidayListReq() *GetHolidayListReq {
	return &GetHolidayListReq{}
}

func (p *GetHolidayListReq) InitDefault() {
}

var GetHolidayListReq_ListOption_DEFAULT *base.ListOption

func (p *GetHolidayListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetHolidayListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetHolidayListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetHolidayListReq = map[int16]string{
	1: "list_option",
}

func (p *GetHolidayListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetHolidayListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetHolidayListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetHolidayListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetHolidayListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHolidayListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetHolidayListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetHolidayListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHolidayListReq(%+v)", *p)

}

func (p *GetHolidayListReq) DeepEqual(ano *GetHolidayListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetHolidayListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetHolidayListResp struct {
	List     []*ModelHoliday `thrift:"list,1" frugal:"1,default,list<ModelHoliday>" json:"list"`
	Paginate *base.Paginate  `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetHolidayListResp() *GetHolidayListResp {
	return &GetHolidayListResp{}
}

func (p *GetHolidayListResp) InitDefault() {
}

func (p *GetHolidayListResp) GetList() (v []*ModelHoliday) {
	return p.List
}

var GetHolidayListResp_Paginate_DEFAULT *base.Paginate

func (p *GetHolidayListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetHolidayListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetHolidayListResp) SetList(val []*ModelHoliday) {
	p.List = val
}
func (p *GetHolidayListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetHolidayListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetHolidayListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetHolidayListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetHolidayListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetHolidayListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelHoliday, 0, size)
	values := make([]ModelHoliday, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetHolidayListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetHolidayListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHolidayListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetHolidayListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetHolidayListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetHolidayListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHolidayListResp(%+v)", *p)

}

func (p *GetHolidayListResp) DeepEqual(ano *GetHolidayListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetHolidayListResp) Field1DeepEqual(src []*ModelHoliday) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetHolidayListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type AdjustCourseApplicationReq struct {
	AcademicYear     string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required" `
	Semester         string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	TeacherId        string `thrift:"teacher_id,3" frugal:"3,default,string" json:"teacher_id" binding:"required" `
	TeacherName      string `thrift:"teacher_name,4" frugal:"4,default,string" json:"teacher_name" binding:"required" `
	NewTeacherId_    string `thrift:"new_teacher_id,5" frugal:"5,default,string"  json:"new_teacher_id"`
	NewTeacherName_  string `thrift:"new_teacher_name,6" frugal:"6,default,string"  json:"new_teacher_name"`
	ApplicationType  int32  `thrift:"application_type,7" frugal:"7,default,i32" json:"application_type"`
	CourseName       string `thrift:"course_name,8" frugal:"8,default,string" json:"course_name"`
	TeachClass       string `thrift:"teach_class,9" frugal:"9,default,string" json:"teach_class"`
	CourseId         int32  `thrift:"course_id,10" frugal:"10,default,i32" json:"course_id"`
	ScheduleTime     string `thrift:"schedule_time,11" frugal:"11,default,string"  json:"schedule_time"`
	NewScheduleTime_ string `thrift:"new_schedule_time,12" frugal:"12,default,string" json:"new_schedule_time"`
	Location         string `thrift:"location,13" frugal:"13,default,string"  json:"location"`
	NewLocation_     string `thrift:"new_location,14" frugal:"14,default,string" json:"new_location"`
	Reason           string `thrift:"reason,15" frugal:"15,default,string" json:"reason"`
	AdjustCourseId   int32  `thrift:"adjust_course_id,16" frugal:"16,default,i32" json:"adjust_course_id"`
}

func NewAdjustCourseApplicationReq() *AdjustCourseApplicationReq {
	return &AdjustCourseApplicationReq{}
}

func (p *AdjustCourseApplicationReq) InitDefault() {
}

func (p *AdjustCourseApplicationReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *AdjustCourseApplicationReq) GetSemester() (v string) {
	return p.Semester
}

func (p *AdjustCourseApplicationReq) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *AdjustCourseApplicationReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *AdjustCourseApplicationReq) GetNewTeacherId_() (v string) {
	return p.NewTeacherId_
}

func (p *AdjustCourseApplicationReq) GetNewTeacherName_() (v string) {
	return p.NewTeacherName_
}

func (p *AdjustCourseApplicationReq) GetApplicationType() (v int32) {
	return p.ApplicationType
}

func (p *AdjustCourseApplicationReq) GetCourseName() (v string) {
	return p.CourseName
}

func (p *AdjustCourseApplicationReq) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *AdjustCourseApplicationReq) GetCourseId() (v int32) {
	return p.CourseId
}

func (p *AdjustCourseApplicationReq) GetScheduleTime() (v string) {
	return p.ScheduleTime
}

func (p *AdjustCourseApplicationReq) GetNewScheduleTime_() (v string) {
	return p.NewScheduleTime_
}

func (p *AdjustCourseApplicationReq) GetLocation() (v string) {
	return p.Location
}

func (p *AdjustCourseApplicationReq) GetNewLocation_() (v string) {
	return p.NewLocation_
}

func (p *AdjustCourseApplicationReq) GetReason() (v string) {
	return p.Reason
}

func (p *AdjustCourseApplicationReq) GetAdjustCourseId() (v int32) {
	return p.AdjustCourseId
}
func (p *AdjustCourseApplicationReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *AdjustCourseApplicationReq) SetSemester(val string) {
	p.Semester = val
}
func (p *AdjustCourseApplicationReq) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *AdjustCourseApplicationReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *AdjustCourseApplicationReq) SetNewTeacherId_(val string) {
	p.NewTeacherId_ = val
}
func (p *AdjustCourseApplicationReq) SetNewTeacherName_(val string) {
	p.NewTeacherName_ = val
}
func (p *AdjustCourseApplicationReq) SetApplicationType(val int32) {
	p.ApplicationType = val
}
func (p *AdjustCourseApplicationReq) SetCourseName(val string) {
	p.CourseName = val
}
func (p *AdjustCourseApplicationReq) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *AdjustCourseApplicationReq) SetCourseId(val int32) {
	p.CourseId = val
}
func (p *AdjustCourseApplicationReq) SetScheduleTime(val string) {
	p.ScheduleTime = val
}
func (p *AdjustCourseApplicationReq) SetNewScheduleTime_(val string) {
	p.NewScheduleTime_ = val
}
func (p *AdjustCourseApplicationReq) SetLocation(val string) {
	p.Location = val
}
func (p *AdjustCourseApplicationReq) SetNewLocation_(val string) {
	p.NewLocation_ = val
}
func (p *AdjustCourseApplicationReq) SetReason(val string) {
	p.Reason = val
}
func (p *AdjustCourseApplicationReq) SetAdjustCourseId(val int32) {
	p.AdjustCourseId = val
}

var fieldIDToName_AdjustCourseApplicationReq = map[int16]string{
	1:  "academic_year",
	2:  "semester",
	3:  "teacher_id",
	4:  "teacher_name",
	5:  "new_teacher_id",
	6:  "new_teacher_name",
	7:  "application_type",
	8:  "course_name",
	9:  "teach_class",
	10: "course_id",
	11: "schedule_time",
	12: "new_schedule_time",
	13: "location",
	14: "new_location",
	15: "reason",
	16: "adjust_course_id",
}

func (p *AdjustCourseApplicationReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AdjustCourseApplicationReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewTeacherId_ = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewTeacherName_ = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ApplicationType = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseId = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleTime = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewScheduleTime_ = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Location = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewLocation_ = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Reason = _field
	return nil
}
func (p *AdjustCourseApplicationReq) ReadField16(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdjustCourseId = _field
	return nil
}

func (p *AdjustCourseApplicationReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AdjustCourseApplicationReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_teacher_id", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewTeacherId_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_teacher_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewTeacherName_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("application_type", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ApplicationType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_id", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schedule_time", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_schedule_time", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewScheduleTime_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Location); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_location", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewLocation_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("reason", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Reason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("adjust_course_id", thrift.I32, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AdjustCourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *AdjustCourseApplicationReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdjustCourseApplicationReq(%+v)", *p)

}

func (p *AdjustCourseApplicationReq) DeepEqual(ano *AdjustCourseApplicationReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field4DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field5DeepEqual(ano.NewTeacherId_) {
		return false
	}
	if !p.Field6DeepEqual(ano.NewTeacherName_) {
		return false
	}
	if !p.Field7DeepEqual(ano.ApplicationType) {
		return false
	}
	if !p.Field8DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field9DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field10DeepEqual(ano.CourseId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ScheduleTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.NewScheduleTime_) {
		return false
	}
	if !p.Field13DeepEqual(ano.Location) {
		return false
	}
	if !p.Field14DeepEqual(ano.NewLocation_) {
		return false
	}
	if !p.Field15DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field16DeepEqual(ano.AdjustCourseId) {
		return false
	}
	return true
}

func (p *AdjustCourseApplicationReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NewTeacherId_, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.NewTeacherName_, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field7DeepEqual(src int32) bool {

	if p.ApplicationType != src {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field10DeepEqual(src int32) bool {

	if p.CourseId != src {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field11DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleTime, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.NewScheduleTime_, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field13DeepEqual(src string) bool {

	if strings.Compare(p.Location, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field14DeepEqual(src string) bool {

	if strings.Compare(p.NewLocation_, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Reason, src) != 0 {
		return false
	}
	return true
}
func (p *AdjustCourseApplicationReq) Field16DeepEqual(src int32) bool {

	if p.AdjustCourseId != src {
		return false
	}
	return true
}

type AdjustCourseApplicationResp struct {
}

func NewAdjustCourseApplicationResp() *AdjustCourseApplicationResp {
	return &AdjustCourseApplicationResp{}
}

func (p *AdjustCourseApplicationResp) InitDefault() {
}

var fieldIDToName_AdjustCourseApplicationResp = map[int16]string{}

func (p *AdjustCourseApplicationResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AdjustCourseApplicationResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("AdjustCourseApplicationResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AdjustCourseApplicationResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdjustCourseApplicationResp(%+v)", *p)

}

func (p *AdjustCourseApplicationResp) DeepEqual(ano *AdjustCourseApplicationResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetSelfCourseApplicationListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetSelfCourseApplicationListReq() *GetSelfCourseApplicationListReq {
	return &GetSelfCourseApplicationListReq{}
}

func (p *GetSelfCourseApplicationListReq) InitDefault() {
}

var GetSelfCourseApplicationListReq_ListOption_DEFAULT *base.ListOption

func (p *GetSelfCourseApplicationListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetSelfCourseApplicationListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetSelfCourseApplicationListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetSelfCourseApplicationListReq = map[int16]string{
	1: "list_option",
}

func (p *GetSelfCourseApplicationListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetSelfCourseApplicationListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseApplicationListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseApplicationListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetSelfCourseApplicationListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplicationListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseApplicationListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseApplicationListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseApplicationListReq(%+v)", *p)

}

func (p *GetSelfCourseApplicationListReq) DeepEqual(ano *GetSelfCourseApplicationListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetSelfCourseApplicationListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfCourseApplicationListResp struct {
	List     []*ModelCourseApplication `thrift:"list,1" frugal:"1,default,list<ModelCourseApplication>" json:"list"`
	Paginate *base.Paginate            `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetSelfCourseApplicationListResp() *GetSelfCourseApplicationListResp {
	return &GetSelfCourseApplicationListResp{}
}

func (p *GetSelfCourseApplicationListResp) InitDefault() {
}

func (p *GetSelfCourseApplicationListResp) GetList() (v []*ModelCourseApplication) {
	return p.List
}

var GetSelfCourseApplicationListResp_Paginate_DEFAULT *base.Paginate

func (p *GetSelfCourseApplicationListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetSelfCourseApplicationListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetSelfCourseApplicationListResp) SetList(val []*ModelCourseApplication) {
	p.List = val
}
func (p *GetSelfCourseApplicationListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetSelfCourseApplicationListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetSelfCourseApplicationListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetSelfCourseApplicationListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseApplicationListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseApplicationListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourseApplication, 0, size)
	values := make([]ModelCourseApplication, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetSelfCourseApplicationListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetSelfCourseApplicationListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplicationListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseApplicationListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseApplicationListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSelfCourseApplicationListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseApplicationListResp(%+v)", *p)

}

func (p *GetSelfCourseApplicationListResp) DeepEqual(ano *GetSelfCourseApplicationListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetSelfCourseApplicationListResp) Field1DeepEqual(src []*ModelCourseApplication) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSelfCourseApplicationListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteCourseApplicationReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
}

func NewDeleteCourseApplicationReq() *DeleteCourseApplicationReq {
	return &DeleteCourseApplicationReq{}
}

func (p *DeleteCourseApplicationReq) InitDefault() {
}

func (p *DeleteCourseApplicationReq) GetId() (v int32) {
	return p.Id
}
func (p *DeleteCourseApplicationReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_DeleteCourseApplicationReq = map[int16]string{
	1: "id",
}

func (p *DeleteCourseApplicationReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCourseApplicationReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseApplicationReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *DeleteCourseApplicationReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApplicationReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseApplicationReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCourseApplicationReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseApplicationReq(%+v)", *p)

}

func (p *DeleteCourseApplicationReq) DeepEqual(ano *DeleteCourseApplicationReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DeleteCourseApplicationReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type DeleteCourseApplicationResp struct {
}

func NewDeleteCourseApplicationResp() *DeleteCourseApplicationResp {
	return &DeleteCourseApplicationResp{}
}

func (p *DeleteCourseApplicationResp) InitDefault() {
}

var fieldIDToName_DeleteCourseApplicationResp = map[int16]string{}

func (p *DeleteCourseApplicationResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseApplicationResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteCourseApplicationResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseApplicationResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseApplicationResp(%+v)", *p)

}

func (p *DeleteCourseApplicationResp) DeepEqual(ano *DeleteCourseApplicationResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetCourseApplicationListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetCourseApplicationListReq() *GetCourseApplicationListReq {
	return &GetCourseApplicationListReq{}
}

func (p *GetCourseApplicationListReq) InitDefault() {
}

var GetCourseApplicationListReq_ListOption_DEFAULT *base.ListOption

func (p *GetCourseApplicationListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetCourseApplicationListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetCourseApplicationListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetCourseApplicationListReq = map[int16]string{
	1: "list_option",
}

func (p *GetCourseApplicationListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetCourseApplicationListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseApplicationListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseApplicationListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetCourseApplicationListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplicationListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseApplicationListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseApplicationListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseApplicationListReq(%+v)", *p)

}

func (p *GetCourseApplicationListReq) DeepEqual(ano *GetCourseApplicationListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetCourseApplicationListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetCourseApplicationListResp struct {
	List     []*ModelCourseApplication `thrift:"list,1" frugal:"1,default,list<ModelCourseApplication>" json:"list"`
	Paginate *base.Paginate            `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetCourseApplicationListResp() *GetCourseApplicationListResp {
	return &GetCourseApplicationListResp{}
}

func (p *GetCourseApplicationListResp) InitDefault() {
}

func (p *GetCourseApplicationListResp) GetList() (v []*ModelCourseApplication) {
	return p.List
}

var GetCourseApplicationListResp_Paginate_DEFAULT *base.Paginate

func (p *GetCourseApplicationListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetCourseApplicationListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetCourseApplicationListResp) SetList(val []*ModelCourseApplication) {
	p.List = val
}
func (p *GetCourseApplicationListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetCourseApplicationListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetCourseApplicationListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetCourseApplicationListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseApplicationListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseApplicationListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourseApplication, 0, size)
	values := make([]ModelCourseApplication, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetCourseApplicationListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetCourseApplicationListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplicationListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseApplicationListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseApplicationListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCourseApplicationListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseApplicationListResp(%+v)", *p)

}

func (p *GetCourseApplicationListResp) DeepEqual(ano *GetCourseApplicationListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetCourseApplicationListResp) Field1DeepEqual(src []*ModelCourseApplication) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCourseApplicationListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfCourseListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetSelfCourseListReq() *GetSelfCourseListReq {
	return &GetSelfCourseListReq{}
}

func (p *GetSelfCourseListReq) InitDefault() {
}

var GetSelfCourseListReq_ListOption_DEFAULT *base.ListOption

func (p *GetSelfCourseListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetSelfCourseListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetSelfCourseListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetSelfCourseListReq = map[int16]string{
	1: "list_option",
}

func (p *GetSelfCourseListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetSelfCourseListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetSelfCourseListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseListReq(%+v)", *p)

}

func (p *GetSelfCourseListReq) DeepEqual(ano *GetSelfCourseListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetSelfCourseListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfCourseListResp struct {
	List     []*ModelCourse `thrift:"list,1" frugal:"1,default,list<ModelCourse>" json:"list"`
	Paginate *base.Paginate `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetSelfCourseListResp() *GetSelfCourseListResp {
	return &GetSelfCourseListResp{}
}

func (p *GetSelfCourseListResp) InitDefault() {
}

func (p *GetSelfCourseListResp) GetList() (v []*ModelCourse) {
	return p.List
}

var GetSelfCourseListResp_Paginate_DEFAULT *base.Paginate

func (p *GetSelfCourseListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetSelfCourseListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetSelfCourseListResp) SetList(val []*ModelCourse) {
	p.List = val
}
func (p *GetSelfCourseListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetSelfCourseListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetSelfCourseListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetSelfCourseListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourse, 0, size)
	values := make([]ModelCourse, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetSelfCourseListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetSelfCourseListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSelfCourseListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseListResp(%+v)", *p)

}

func (p *GetSelfCourseListResp) DeepEqual(ano *GetSelfCourseListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetSelfCourseListResp) Field1DeepEqual(src []*ModelCourse) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSelfCourseListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateCourseReq struct {
	Id     int32        `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	Course *ModelCourse `thrift:"course,2" frugal:"2,default,ModelCourse" json:"course" binding:"required"`
}

func NewUpdateCourseReq() *UpdateCourseReq {
	return &UpdateCourseReq{}
}

func (p *UpdateCourseReq) InitDefault() {
}

func (p *UpdateCourseReq) GetId() (v int32) {
	return p.Id
}

var UpdateCourseReq_Course_DEFAULT *ModelCourse

func (p *UpdateCourseReq) GetCourse() (v *ModelCourse) {
	if !p.IsSetCourse() {
		return UpdateCourseReq_Course_DEFAULT
	}
	return p.Course
}
func (p *UpdateCourseReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateCourseReq) SetCourse(val *ModelCourse) {
	p.Course = val
}

var fieldIDToName_UpdateCourseReq = map[int16]string{
	1: "id",
	2: "course",
}

func (p *UpdateCourseReq) IsSetCourse() bool {
	return p.Course != nil
}

func (p *UpdateCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCourseReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateCourseReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewModelCourse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Course = _field
	return nil
}

func (p *UpdateCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateCourseReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Course.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCourseReq(%+v)", *p)

}

func (p *UpdateCourseReq) DeepEqual(ano *UpdateCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Course) {
		return false
	}
	return true
}

func (p *UpdateCourseReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateCourseReq) Field2DeepEqual(src *ModelCourse) bool {

	if !p.Course.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateCourseResp struct {
}

func NewUpdateCourseResp() *UpdateCourseResp {
	return &UpdateCourseResp{}
}

func (p *UpdateCourseResp) InitDefault() {
}

var fieldIDToName_UpdateCourseResp = map[int16]string{}

func (p *UpdateCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCourseResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCourseResp(%+v)", *p)

}

func (p *UpdateCourseResp) DeepEqual(ano *UpdateCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ImportCourseReq struct {
	UploadId string `thrift:"upload_id,1" frugal:"1,default,string" json:"upload_id"`
}

func NewImportCourseReq() *ImportCourseReq {
	return &ImportCourseReq{}
}

func (p *ImportCourseReq) InitDefault() {
}

func (p *ImportCourseReq) GetUploadId() (v string) {
	return p.UploadId
}
func (p *ImportCourseReq) SetUploadId(val string) {
	p.UploadId = val
}

var fieldIDToName_ImportCourseReq = map[int16]string{
	1: "upload_id",
}

func (p *ImportCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportCourseReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UploadId = _field
	return nil
}

func (p *ImportCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("upload_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportCourseReq(%+v)", *p)

}

func (p *ImportCourseReq) DeepEqual(ano *ImportCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UploadId) {
		return false
	}
	return true
}

func (p *ImportCourseReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UploadId, src) != 0 {
		return false
	}
	return true
}

type ImportCourseResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportCourseResp() *ImportCourseResp {
	return &ImportCourseResp{}
}

func (p *ImportCourseResp) InitDefault() {
}

func (p *ImportCourseResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportCourseResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportCourseResp = map[int16]string{
	1: "task_key",
}

func (p *ImportCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportCourseResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportCourseResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportCourseResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportCourseResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportCourseResp(%+v)", *p)

}

func (p *ImportCourseResp) DeepEqual(ano *ImportCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportCourseResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type DeleteCourseReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids"`
}

func NewDeleteCourseReq() *DeleteCourseReq {
	return &DeleteCourseReq{}
}

func (p *DeleteCourseReq) InitDefault() {
}

func (p *DeleteCourseReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteCourseReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteCourseReq = map[int16]string{
	1: "ids",
}

func (p *DeleteCourseReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCourseReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteCourseReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseReq(%+v)", *p)

}

func (p *DeleteCourseReq) DeepEqual(ano *DeleteCourseReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteCourseReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteCourseResp struct {
}

func NewDeleteCourseResp() *DeleteCourseResp {
	return &DeleteCourseResp{}
}

func (p *DeleteCourseResp) InitDefault() {
}

var fieldIDToName_DeleteCourseResp = map[int16]string{}

func (p *DeleteCourseResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteCourseResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseResp(%+v)", *p)

}

func (p *DeleteCourseResp) DeepEqual(ano *DeleteCourseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetCourseListResp struct {
	List     []*ModelCourse `thrift:"list,1" frugal:"1,default,list<ModelCourse>" json:"list"`
	Paginate *base.Paginate `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetCourseListResp() *GetCourseListResp {
	return &GetCourseListResp{}
}

func (p *GetCourseListResp) InitDefault() {
}

func (p *GetCourseListResp) GetList() (v []*ModelCourse) {
	return p.List
}

var GetCourseListResp_Paginate_DEFAULT *base.Paginate

func (p *GetCourseListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetCourseListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetCourseListResp) SetList(val []*ModelCourse) {
	p.List = val
}
func (p *GetCourseListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetCourseListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetCourseListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetCourseListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourse, 0, size)
	values := make([]ModelCourse, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetCourseListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetCourseListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCourseListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseListResp(%+v)", *p)

}

func (p *GetCourseListResp) DeepEqual(ano *GetCourseListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetCourseListResp) Field1DeepEqual(src []*ModelCourse) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCourseListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetCourseListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetCourseListReq() *GetCourseListReq {
	return &GetCourseListReq{}
}

func (p *GetCourseListReq) InitDefault() {
}

var GetCourseListReq_ListOption_DEFAULT *base.ListOption

func (p *GetCourseListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetCourseListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetCourseListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetCourseListReq = map[int16]string{
	1: "list_option",
}

func (p *GetCourseListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetCourseListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetCourseListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseListReq(%+v)", *p)

}

func (p *GetCourseListReq) DeepEqual(ano *GetCourseListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetCourseListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type ExportTeacherInfoReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids"`
}

func NewExportTeacherInfoReq() *ExportTeacherInfoReq {
	return &ExportTeacherInfoReq{}
}

func (p *ExportTeacherInfoReq) InitDefault() {
}

func (p *ExportTeacherInfoReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *ExportTeacherInfoReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_ExportTeacherInfoReq = map[int16]string{
	1: "ids",
}

func (p *ExportTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportTeacherInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportTeacherInfoReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *ExportTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportTeacherInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportTeacherInfoReq(%+v)", *p)

}

func (p *ExportTeacherInfoReq) DeepEqual(ano *ExportTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *ExportTeacherInfoReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ExportTeacherInfoResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportTeacherInfoResp() *ExportTeacherInfoResp {
	return &ExportTeacherInfoResp{}
}

func (p *ExportTeacherInfoResp) InitDefault() {
}

func (p *ExportTeacherInfoResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportTeacherInfoResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportTeacherInfoResp = map[int16]string{
	1: "task_key",
}

func (p *ExportTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportTeacherInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportTeacherInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportTeacherInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportTeacherInfoResp(%+v)", *p)

}

func (p *ExportTeacherInfoResp) DeepEqual(ano *ExportTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportTeacherInfoResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type CreateTeacherInfoReq struct {
	Name          string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Department    string `thrift:"department,2" frugal:"2,default,string" json:"department" binding:"required"`
	Uid           int32  `thrift:"uid,3" frugal:"3,default,i32" json:"uid" binding:"required"`
	OfficeId      int32  `thrift:"office_id,4" frugal:"4,default,i32" json:"office_id" binding:"required"`
	UserName      string `thrift:"user_name,5" frugal:"5,default,string" json:"user_name" binding:"required"`
	Duties        string `thrift:"duties,6" frugal:"6,default,string" json:"duties" `
	AppointTime   string `thrift:"appoint_time,7" frugal:"7,default,string" json:"appoint_time" `
	PositionLevel string `thrift:"position_level,8" frugal:"8,default,string" json:"position_level" `
	CpositionTime string `thrift:"cposition_time,9" frugal:"9,default,string" json:"cposition_time" `
	Remunerate    int64  `thrift:"remunerate,10" frugal:"10,default,i64" json:"remunerate" `
	IdCategory    string `thrift:"id_category,11" frugal:"11,default,string" json:"id_category" `
	IsExternal    int32  `thrift:"is_external,12" frugal:"12,default,i32" json:"is_external" `
}

func NewCreateTeacherInfoReq() *CreateTeacherInfoReq {
	return &CreateTeacherInfoReq{}
}

func (p *CreateTeacherInfoReq) InitDefault() {
}

func (p *CreateTeacherInfoReq) GetName() (v string) {
	return p.Name
}

func (p *CreateTeacherInfoReq) GetDepartment() (v string) {
	return p.Department
}

func (p *CreateTeacherInfoReq) GetUid() (v int32) {
	return p.Uid
}

func (p *CreateTeacherInfoReq) GetOfficeId() (v int32) {
	return p.OfficeId
}

func (p *CreateTeacherInfoReq) GetUserName() (v string) {
	return p.UserName
}

func (p *CreateTeacherInfoReq) GetDuties() (v string) {
	return p.Duties
}

func (p *CreateTeacherInfoReq) GetAppointTime() (v string) {
	return p.AppointTime
}

func (p *CreateTeacherInfoReq) GetPositionLevel() (v string) {
	return p.PositionLevel
}

func (p *CreateTeacherInfoReq) GetCpositionTime() (v string) {
	return p.CpositionTime
}

func (p *CreateTeacherInfoReq) GetRemunerate() (v int64) {
	return p.Remunerate
}

func (p *CreateTeacherInfoReq) GetIdCategory() (v string) {
	return p.IdCategory
}

func (p *CreateTeacherInfoReq) GetIsExternal() (v int32) {
	return p.IsExternal
}
func (p *CreateTeacherInfoReq) SetName(val string) {
	p.Name = val
}
func (p *CreateTeacherInfoReq) SetDepartment(val string) {
	p.Department = val
}
func (p *CreateTeacherInfoReq) SetUid(val int32) {
	p.Uid = val
}
func (p *CreateTeacherInfoReq) SetOfficeId(val int32) {
	p.OfficeId = val
}
func (p *CreateTeacherInfoReq) SetUserName(val string) {
	p.UserName = val
}
func (p *CreateTeacherInfoReq) SetDuties(val string) {
	p.Duties = val
}
func (p *CreateTeacherInfoReq) SetAppointTime(val string) {
	p.AppointTime = val
}
func (p *CreateTeacherInfoReq) SetPositionLevel(val string) {
	p.PositionLevel = val
}
func (p *CreateTeacherInfoReq) SetCpositionTime(val string) {
	p.CpositionTime = val
}
func (p *CreateTeacherInfoReq) SetRemunerate(val int64) {
	p.Remunerate = val
}
func (p *CreateTeacherInfoReq) SetIdCategory(val string) {
	p.IdCategory = val
}
func (p *CreateTeacherInfoReq) SetIsExternal(val int32) {
	p.IsExternal = val
}

var fieldIDToName_CreateTeacherInfoReq = map[int16]string{
	1:  "name",
	2:  "department",
	3:  "uid",
	4:  "office_id",
	5:  "user_name",
	6:  "duties",
	7:  "appoint_time",
	8:  "position_level",
	9:  "cposition_time",
	10: "remunerate",
	11: "id_category",
	12: "is_external",
}

func (p *CreateTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateTeacherInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTeacherInfoReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Department = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OfficeId = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duties = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppointTime = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PositionLevel = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CpositionTime = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remunerate = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCategory = _field
	return nil
}
func (p *CreateTeacherInfoReq) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsExternal = _field
	return nil
}

func (p *CreateTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Department); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_id", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OfficeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("duties", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Duties); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("appoint_time", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppointTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("position_level", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PositionLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cposition_time", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CpositionTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remunerate", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Remunerate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_category", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCategory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_external", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsExternal); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTeacherInfoReq(%+v)", *p)

}

func (p *CreateTeacherInfoReq) DeepEqual(ano *CreateTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Department) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.OfficeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Duties) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppointTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.PositionLevel) {
		return false
	}
	if !p.Field9DeepEqual(ano.CpositionTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.Remunerate) {
		return false
	}
	if !p.Field11DeepEqual(ano.IdCategory) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsExternal) {
		return false
	}
	return true
}

func (p *CreateTeacherInfoReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Department, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field3DeepEqual(src int32) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field4DeepEqual(src int32) bool {

	if p.OfficeId != src {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Duties, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.AppointTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PositionLevel, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CpositionTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field10DeepEqual(src int64) bool {

	if p.Remunerate != src {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field11DeepEqual(src string) bool {

	if strings.Compare(p.IdCategory, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTeacherInfoReq) Field12DeepEqual(src int32) bool {

	if p.IsExternal != src {
		return false
	}
	return true
}

type CreateTeacherInfoResp struct {
}

func NewCreateTeacherInfoResp() *CreateTeacherInfoResp {
	return &CreateTeacherInfoResp{}
}

func (p *CreateTeacherInfoResp) InitDefault() {
}

var fieldIDToName_CreateTeacherInfoResp = map[int16]string{}

func (p *CreateTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTeacherInfoResp(%+v)", *p)

}

func (p *CreateTeacherInfoResp) DeepEqual(ano *CreateTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteTeacherInfoReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteTeacherInfoReq() *DeleteTeacherInfoReq {
	return &DeleteTeacherInfoReq{}
}

func (p *DeleteTeacherInfoReq) InitDefault() {
}

func (p *DeleteTeacherInfoReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteTeacherInfoReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteTeacherInfoReq = map[int16]string{
	1: "ids",
}

func (p *DeleteTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteTeacherInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteTeacherInfoReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteTeacherInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTeacherInfoReq(%+v)", *p)

}

func (p *DeleteTeacherInfoReq) DeepEqual(ano *DeleteTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteTeacherInfoReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteTeacherInfoResp struct {
	Count int32 `thrift:"count,1" frugal:"1,default,i32" json:"count"`
}

func NewDeleteTeacherInfoResp() *DeleteTeacherInfoResp {
	return &DeleteTeacherInfoResp{}
}

func (p *DeleteTeacherInfoResp) InitDefault() {
}

func (p *DeleteTeacherInfoResp) GetCount() (v int32) {
	return p.Count
}
func (p *DeleteTeacherInfoResp) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_DeleteTeacherInfoResp = map[int16]string{
	1: "count",
}

func (p *DeleteTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteTeacherInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteTeacherInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Count = _field
	return nil
}

func (p *DeleteTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteTeacherInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTeacherInfoResp(%+v)", *p)

}

func (p *DeleteTeacherInfoResp) DeepEqual(ano *DeleteTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *DeleteTeacherInfoResp) Field1DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type ResetPasswordReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
}

func NewResetPasswordReq() *ResetPasswordReq {
	return &ResetPasswordReq{}
}

func (p *ResetPasswordReq) InitDefault() {
}

func (p *ResetPasswordReq) GetId() (v int32) {
	return p.Id
}
func (p *ResetPasswordReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_ResetPasswordReq = map[int16]string{
	1: "id",
}

func (p *ResetPasswordReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResetPasswordReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResetPasswordReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *ResetPasswordReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetPasswordReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResetPasswordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResetPasswordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetPasswordReq(%+v)", *p)

}

func (p *ResetPasswordReq) DeepEqual(ano *ResetPasswordReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *ResetPasswordReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type ResetPasswordResp struct {
}

func NewResetPasswordResp() *ResetPasswordResp {
	return &ResetPasswordResp{}
}

func (p *ResetPasswordResp) InitDefault() {
}

var fieldIDToName_ResetPasswordResp = map[int16]string{}

func (p *ResetPasswordResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResetPasswordResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ResetPasswordResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResetPasswordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetPasswordResp(%+v)", *p)

}

func (p *ResetPasswordResp) DeepEqual(ano *ResetPasswordResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateUserReq struct {
	Id       int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	UserName string `thrift:"user_name,2" frugal:"2,default,string" json:"user_name" binding:"required"`
	NickName string `thrift:"nick_name,3" frugal:"3,default,string" json:"nick_name" binding:"required"`
	Email    string `thrift:"email,4" frugal:"4,default,string" json:"email"`
	Mobile   string `thrift:"mobile,5" frugal:"5,default,string" json:"mobile"`
}

func NewUpdateUserReq() *UpdateUserReq {
	return &UpdateUserReq{}
}

func (p *UpdateUserReq) InitDefault() {
}

func (p *UpdateUserReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateUserReq) GetUserName() (v string) {
	return p.UserName
}

func (p *UpdateUserReq) GetNickName() (v string) {
	return p.NickName
}

func (p *UpdateUserReq) GetEmail() (v string) {
	return p.Email
}

func (p *UpdateUserReq) GetMobile() (v string) {
	return p.Mobile
}
func (p *UpdateUserReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateUserReq) SetUserName(val string) {
	p.UserName = val
}
func (p *UpdateUserReq) SetNickName(val string) {
	p.NickName = val
}
func (p *UpdateUserReq) SetEmail(val string) {
	p.Email = val
}
func (p *UpdateUserReq) SetMobile(val string) {
	p.Mobile = val
}

var fieldIDToName_UpdateUserReq = map[int16]string{
	1: "id",
	2: "user_name",
	3: "nick_name",
	4: "email",
	5: "mobile",
}

func (p *UpdateUserReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateUserReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateUserReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateUserReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *UpdateUserReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NickName = _field
	return nil
}
func (p *UpdateUserReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *UpdateUserReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}

func (p *UpdateUserReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUserReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nick_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateUserReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserReq(%+v)", *p)

}

func (p *UpdateUserReq) DeepEqual(ano *UpdateUserReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field3DeepEqual(ano.NickName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Email) {
		return false
	}
	if !p.Field5DeepEqual(ano.Mobile) {
		return false
	}
	return true
}

func (p *UpdateUserReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateUserReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateUserReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NickName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateUserReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateUserReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}

type UpdateUserResp struct {
}

func NewUpdateUserResp() *UpdateUserResp {
	return &UpdateUserResp{}
}

func (p *UpdateUserResp) InitDefault() {
}

var fieldIDToName_UpdateUserResp = map[int16]string{}

func (p *UpdateUserResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateUserResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateUserResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserResp(%+v)", *p)

}

func (p *UpdateUserResp) DeepEqual(ano *UpdateUserResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateOfficeReq struct {
	Name        string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
	Name2       string `thrift:"name2,3" frugal:"3,default,string" json:"name2"`
	Order       int32  `thrift:"order,4" frugal:"4,default,i32" json:"order"`
	Id          int32  `thrift:"id,5" frugal:"5,default,i32" json:"id" binding:"required"`
}

func NewUpdateOfficeReq() *UpdateOfficeReq {
	return &UpdateOfficeReq{}
}

func (p *UpdateOfficeReq) InitDefault() {
}

func (p *UpdateOfficeReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateOfficeReq) GetDescription() (v string) {
	return p.Description
}

func (p *UpdateOfficeReq) GetName2() (v string) {
	return p.Name2
}

func (p *UpdateOfficeReq) GetOrder() (v int32) {
	return p.Order
}

func (p *UpdateOfficeReq) GetId() (v int32) {
	return p.Id
}
func (p *UpdateOfficeReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateOfficeReq) SetDescription(val string) {
	p.Description = val
}
func (p *UpdateOfficeReq) SetName2(val string) {
	p.Name2 = val
}
func (p *UpdateOfficeReq) SetOrder(val int32) {
	p.Order = val
}
func (p *UpdateOfficeReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_UpdateOfficeReq = map[int16]string{
	1: "name",
	2: "description",
	3: "name2",
	4: "order",
	5: "id",
}

func (p *UpdateOfficeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateOfficeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateOfficeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateOfficeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *UpdateOfficeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name2 = _field
	return nil
}
func (p *UpdateOfficeReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}
func (p *UpdateOfficeReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *UpdateOfficeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateOfficeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateOfficeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateOfficeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateOfficeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name2", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateOfficeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateOfficeReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateOfficeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOfficeReq(%+v)", *p)

}

func (p *UpdateOfficeReq) DeepEqual(ano *UpdateOfficeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name2) {
		return false
	}
	if !p.Field4DeepEqual(ano.Order) {
		return false
	}
	if !p.Field5DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *UpdateOfficeReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateOfficeReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateOfficeReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name2, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateOfficeReq) Field4DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}
func (p *UpdateOfficeReq) Field5DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type UpdateOfficeResp struct {
}

func NewUpdateOfficeResp() *UpdateOfficeResp {
	return &UpdateOfficeResp{}
}

func (p *UpdateOfficeResp) InitDefault() {
}

var fieldIDToName_UpdateOfficeResp = map[int16]string{}

func (p *UpdateOfficeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateOfficeResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateOfficeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateOfficeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOfficeResp(%+v)", *p)

}

func (p *UpdateOfficeResp) DeepEqual(ano *UpdateOfficeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteOfficeReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteOfficeReq() *DeleteOfficeReq {
	return &DeleteOfficeReq{}
}

func (p *DeleteOfficeReq) InitDefault() {
}

func (p *DeleteOfficeReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteOfficeReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteOfficeReq = map[int16]string{
	1: "ids",
}

func (p *DeleteOfficeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteOfficeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteOfficeReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteOfficeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteOfficeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteOfficeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteOfficeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOfficeReq(%+v)", *p)

}

func (p *DeleteOfficeReq) DeepEqual(ano *DeleteOfficeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteOfficeReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteOfficeResp struct {
}

func NewDeleteOfficeResp() *DeleteOfficeResp {
	return &DeleteOfficeResp{}
}

func (p *DeleteOfficeResp) InitDefault() {
}

var fieldIDToName_DeleteOfficeResp = map[int16]string{}

func (p *DeleteOfficeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteOfficeResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteOfficeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteOfficeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOfficeResp(%+v)", *p)

}

func (p *DeleteOfficeResp) DeepEqual(ano *DeleteOfficeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteRoleReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteRoleReq() *DeleteRoleReq {
	return &DeleteRoleReq{}
}

func (p *DeleteRoleReq) InitDefault() {
}

func (p *DeleteRoleReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteRoleReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteRoleReq = map[int16]string{
	1: "ids",
}

func (p *DeleteRoleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteRoleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteRoleReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteRoleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRoleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteRoleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRoleReq(%+v)", *p)

}

func (p *DeleteRoleReq) DeepEqual(ano *DeleteRoleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteRoleReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteRoleResp struct {
}

func NewDeleteRoleResp() *DeleteRoleResp {
	return &DeleteRoleResp{}
}

func (p *DeleteRoleResp) InitDefault() {
}

var fieldIDToName_DeleteRoleResp = map[int16]string{}

func (p *DeleteRoleResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteRoleResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteRoleResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteRoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRoleResp(%+v)", *p)

}

func (p *DeleteRoleResp) DeepEqual(ano *DeleteRoleResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SetRoleStatusReq struct {
	Items []*base.StatusValue `thrift:"items,1" frugal:"1,default,list<base.StatusValue>" json:"items" binding:"required"`
}

func NewSetRoleStatusReq() *SetRoleStatusReq {
	return &SetRoleStatusReq{}
}

func (p *SetRoleStatusReq) InitDefault() {
}

func (p *SetRoleStatusReq) GetItems() (v []*base.StatusValue) {
	return p.Items
}
func (p *SetRoleStatusReq) SetItems(val []*base.StatusValue) {
	p.Items = val
}

var fieldIDToName_SetRoleStatusReq = map[int16]string{
	1: "items",
}

func (p *SetRoleStatusReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetRoleStatusReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRoleStatusReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*base.StatusValue, 0, size)
	values := make([]base.StatusValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}

func (p *SetRoleStatusReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleStatusReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRoleStatusReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetRoleStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoleStatusReq(%+v)", *p)

}

func (p *SetRoleStatusReq) DeepEqual(ano *SetRoleStatusReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *SetRoleStatusReq) Field1DeepEqual(src []*base.StatusValue) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SetRoleStatusResp struct {
}

func NewSetRoleStatusResp() *SetRoleStatusResp {
	return &SetRoleStatusResp{}
}

func (p *SetRoleStatusResp) InitDefault() {
}

var fieldIDToName_SetRoleStatusResp = map[int16]string{}

func (p *SetRoleStatusResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRoleStatusResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SetRoleStatusResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRoleStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoleStatusResp(%+v)", *p)

}

func (p *SetRoleStatusResp) DeepEqual(ano *SetRoleStatusResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateRoleReq struct {
	Name        string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
	Id          int32  `thrift:"id,3" frugal:"3,default,i32" json:"id" binding:"required"`
}

func NewUpdateRoleReq() *UpdateRoleReq {
	return &UpdateRoleReq{}
}

func (p *UpdateRoleReq) InitDefault() {
}

func (p *UpdateRoleReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateRoleReq) GetDescription() (v string) {
	return p.Description
}

func (p *UpdateRoleReq) GetId() (v int32) {
	return p.Id
}
func (p *UpdateRoleReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateRoleReq) SetDescription(val string) {
	p.Description = val
}
func (p *UpdateRoleReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_UpdateRoleReq = map[int16]string{
	1: "name",
	2: "description",
	3: "id",
}

func (p *UpdateRoleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateRoleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateRoleReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateRoleReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *UpdateRoleReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *UpdateRoleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRoleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateRoleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateRoleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateRoleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoleReq(%+v)", *p)

}

func (p *UpdateRoleReq) DeepEqual(ano *UpdateRoleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *UpdateRoleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateRoleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateRoleReq) Field3DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type UpdateRoleResp struct {
}

func NewUpdateRoleResp() *UpdateRoleResp {
	return &UpdateRoleResp{}
}

func (p *UpdateRoleResp) InitDefault() {
}

var fieldIDToName_UpdateRoleResp = map[int16]string{}

func (p *UpdateRoleResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateRoleResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateRoleResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateRoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoleResp(%+v)", *p)

}

func (p *UpdateRoleResp) DeepEqual(ano *UpdateRoleResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetTokenReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username" binding:"required"`
	AppId    int32  `thrift:"app_id,2" frugal:"2,default,i32" json:"app_id" binding:"required"`
}

func NewGetTokenReq() *GetTokenReq {
	return &GetTokenReq{}
}

func (p *GetTokenReq) InitDefault() {
}

func (p *GetTokenReq) GetUsername() (v string) {
	return p.Username
}

func (p *GetTokenReq) GetAppId() (v int32) {
	return p.AppId
}
func (p *GetTokenReq) SetUsername(val string) {
	p.Username = val
}
func (p *GetTokenReq) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_GetTokenReq = map[int16]string{
	1: "username",
	2: "app_id",
}

func (p *GetTokenReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTokenReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTokenReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Username = _field
	return nil
}
func (p *GetTokenReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *GetTokenReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTokenReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTokenReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTokenReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenReq(%+v)", *p)

}

func (p *GetTokenReq) DeepEqual(ano *GetTokenReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *GetTokenReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *GetTokenReq) Field2DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type GetTokenResp struct {
	Token string `thrift:"token,1" frugal:"1,default,string" json:"token"`
}

func NewGetTokenResp() *GetTokenResp {
	return &GetTokenResp{}
}

func (p *GetTokenResp) InitDefault() {
}

func (p *GetTokenResp) GetToken() (v string) {
	return p.Token
}
func (p *GetTokenResp) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_GetTokenResp = map[int16]string{
	1: "token",
}

func (p *GetTokenResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTokenResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTokenResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *GetTokenResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTokenResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTokenResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenResp(%+v)", *p)

}

func (p *GetTokenResp) DeepEqual(ano *GetTokenResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *GetTokenResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type GetTeacherInfoListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetTeacherInfoListReq() *GetTeacherInfoListReq {
	return &GetTeacherInfoListReq{}
}

func (p *GetTeacherInfoListReq) InitDefault() {
}

var GetTeacherInfoListReq_ListOption_DEFAULT *base.ListOption

func (p *GetTeacherInfoListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetTeacherInfoListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetTeacherInfoListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetTeacherInfoListReq = map[int16]string{
	1: "list_option",
}

func (p *GetTeacherInfoListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetTeacherInfoListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTeacherInfoListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTeacherInfoListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetTeacherInfoListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTeacherInfoListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTeacherInfoListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTeacherInfoListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTeacherInfoListReq(%+v)", *p)

}

func (p *GetTeacherInfoListReq) DeepEqual(ano *GetTeacherInfoListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetTeacherInfoListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetTeacherInfoListResp struct {
	List      []*ModelTeacherInfo           `thrift:"list,1" frugal:"1,default,list<ModelTeacherInfo>" json:"list"`
	Paginate  *base.Paginate                `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
	OfficeMap map[int32]*ModelTeacherOffice `thrift:"office_map,3" frugal:"3,default,map<i32:ModelTeacherOffice>" json:"office_map"`
}

func NewGetTeacherInfoListResp() *GetTeacherInfoListResp {
	return &GetTeacherInfoListResp{}
}

func (p *GetTeacherInfoListResp) InitDefault() {
}

func (p *GetTeacherInfoListResp) GetList() (v []*ModelTeacherInfo) {
	return p.List
}

var GetTeacherInfoListResp_Paginate_DEFAULT *base.Paginate

func (p *GetTeacherInfoListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetTeacherInfoListResp_Paginate_DEFAULT
	}
	return p.Paginate
}

func (p *GetTeacherInfoListResp) GetOfficeMap() (v map[int32]*ModelTeacherOffice) {
	return p.OfficeMap
}
func (p *GetTeacherInfoListResp) SetList(val []*ModelTeacherInfo) {
	p.List = val
}
func (p *GetTeacherInfoListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}
func (p *GetTeacherInfoListResp) SetOfficeMap(val map[int32]*ModelTeacherOffice) {
	p.OfficeMap = val
}

var fieldIDToName_GetTeacherInfoListResp = map[int16]string{
	1: "list",
	2: "paginate",
	3: "office_map",
}

func (p *GetTeacherInfoListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetTeacherInfoListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTeacherInfoListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTeacherInfoListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelTeacherInfo, 0, size)
	values := make([]ModelTeacherInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetTeacherInfoListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}
func (p *GetTeacherInfoListResp) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]*ModelTeacherOffice, size)
	values := make([]ModelTeacherOffice, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.OfficeMap = _field
	return nil
}

func (p *GetTeacherInfoListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTeacherInfoListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTeacherInfoListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetTeacherInfoListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetTeacherInfoListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_map", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.OfficeMap)); err != nil {
		return err
	}
	for k, v := range p.OfficeMap {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetTeacherInfoListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTeacherInfoListResp(%+v)", *p)

}

func (p *GetTeacherInfoListResp) DeepEqual(ano *GetTeacherInfoListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	if !p.Field3DeepEqual(ano.OfficeMap) {
		return false
	}
	return true
}

func (p *GetTeacherInfoListResp) Field1DeepEqual(src []*ModelTeacherInfo) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetTeacherInfoListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTeacherInfoListResp) Field3DeepEqual(src map[int32]*ModelTeacherOffice) bool {

	if len(p.OfficeMap) != len(src) {
		return false
	}
	for k, v := range p.OfficeMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ImportTeacherInfoReq struct {
	FileUploadId string `thrift:"file_upload_id,1" frugal:"1,default,string" json:"file_upload_id" binding:"required"`
}

func NewImportTeacherInfoReq() *ImportTeacherInfoReq {
	return &ImportTeacherInfoReq{}
}

func (p *ImportTeacherInfoReq) InitDefault() {
}

func (p *ImportTeacherInfoReq) GetFileUploadId() (v string) {
	return p.FileUploadId
}
func (p *ImportTeacherInfoReq) SetFileUploadId(val string) {
	p.FileUploadId = val
}

var fieldIDToName_ImportTeacherInfoReq = map[int16]string{
	1: "file_upload_id",
}

func (p *ImportTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportTeacherInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportTeacherInfoReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileUploadId = _field
	return nil
}

func (p *ImportTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportTeacherInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_upload_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileUploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportTeacherInfoReq(%+v)", *p)

}

func (p *ImportTeacherInfoReq) DeepEqual(ano *ImportTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileUploadId) {
		return false
	}
	return true
}

func (p *ImportTeacherInfoReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileUploadId, src) != 0 {
		return false
	}
	return true
}

type ImportTeacherInfoResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportTeacherInfoResp() *ImportTeacherInfoResp {
	return &ImportTeacherInfoResp{}
}

func (p *ImportTeacherInfoResp) InitDefault() {
}

func (p *ImportTeacherInfoResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportTeacherInfoResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportTeacherInfoResp = map[int16]string{
	1: "task_key",
}

func (p *ImportTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportTeacherInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportTeacherInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportTeacherInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportTeacherInfoResp(%+v)", *p)

}

func (p *ImportTeacherInfoResp) DeepEqual(ano *ImportTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportTeacherInfoResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type UpdateTeacherInfoReq struct {
	Uid           int32  `thrift:"uid,1" frugal:"1,default,i32" json:"id" binding:"required"`
	OfficeId      int32  `thrift:"office_id,2" frugal:"2,default,i32" json:"office_id" binding:"required"`
	Duties        string `thrift:"duties,3" frugal:"3,default,string" json:"duties"`
	AppointTime   string `thrift:"appoint_time,4" frugal:"4,default,string" json:"appoint_time"`
	PositionLevel string `thrift:"position_level,5" frugal:"5,default,string" json:"position_level"`
	CpositionTime string `thrift:"cposition_time,6" frugal:"6,default,string" json:"cposition_time"`
	Remunerate    int64  `thrift:"remunerate,7" frugal:"7,default,i64" json:"remunerate"`
	IdCategory    string `thrift:"id_category,8" frugal:"8,default,string" json:"id_category"`
	IsExternal    int32  `thrift:"is_external,9" frugal:"9,default,i32" json:"is_external" binding:"required"`
	Order         int32  `thrift:"order,10" frugal:"10,default,i32" json:"order"`
	Department    string `thrift:"department,11" frugal:"11,default,string" json:"department"`
}

func NewUpdateTeacherInfoReq() *UpdateTeacherInfoReq {
	return &UpdateTeacherInfoReq{}
}

func (p *UpdateTeacherInfoReq) InitDefault() {
}

func (p *UpdateTeacherInfoReq) GetUid() (v int32) {
	return p.Uid
}

func (p *UpdateTeacherInfoReq) GetOfficeId() (v int32) {
	return p.OfficeId
}

func (p *UpdateTeacherInfoReq) GetDuties() (v string) {
	return p.Duties
}

func (p *UpdateTeacherInfoReq) GetAppointTime() (v string) {
	return p.AppointTime
}

func (p *UpdateTeacherInfoReq) GetPositionLevel() (v string) {
	return p.PositionLevel
}

func (p *UpdateTeacherInfoReq) GetCpositionTime() (v string) {
	return p.CpositionTime
}

func (p *UpdateTeacherInfoReq) GetRemunerate() (v int64) {
	return p.Remunerate
}

func (p *UpdateTeacherInfoReq) GetIdCategory() (v string) {
	return p.IdCategory
}

func (p *UpdateTeacherInfoReq) GetIsExternal() (v int32) {
	return p.IsExternal
}

func (p *UpdateTeacherInfoReq) GetOrder() (v int32) {
	return p.Order
}

func (p *UpdateTeacherInfoReq) GetDepartment() (v string) {
	return p.Department
}
func (p *UpdateTeacherInfoReq) SetUid(val int32) {
	p.Uid = val
}
func (p *UpdateTeacherInfoReq) SetOfficeId(val int32) {
	p.OfficeId = val
}
func (p *UpdateTeacherInfoReq) SetDuties(val string) {
	p.Duties = val
}
func (p *UpdateTeacherInfoReq) SetAppointTime(val string) {
	p.AppointTime = val
}
func (p *UpdateTeacherInfoReq) SetPositionLevel(val string) {
	p.PositionLevel = val
}
func (p *UpdateTeacherInfoReq) SetCpositionTime(val string) {
	p.CpositionTime = val
}
func (p *UpdateTeacherInfoReq) SetRemunerate(val int64) {
	p.Remunerate = val
}
func (p *UpdateTeacherInfoReq) SetIdCategory(val string) {
	p.IdCategory = val
}
func (p *UpdateTeacherInfoReq) SetIsExternal(val int32) {
	p.IsExternal = val
}
func (p *UpdateTeacherInfoReq) SetOrder(val int32) {
	p.Order = val
}
func (p *UpdateTeacherInfoReq) SetDepartment(val string) {
	p.Department = val
}

var fieldIDToName_UpdateTeacherInfoReq = map[int16]string{
	1:  "uid",
	2:  "office_id",
	3:  "duties",
	4:  "appoint_time",
	5:  "position_level",
	6:  "cposition_time",
	7:  "remunerate",
	8:  "id_category",
	9:  "is_external",
	10: "order",
	11: "department",
}

func (p *UpdateTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTeacherInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OfficeId = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duties = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppointTime = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PositionLevel = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CpositionTime = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remunerate = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCategory = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsExternal = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}
func (p *UpdateTeacherInfoReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Department = _field
	return nil
}

func (p *UpdateTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OfficeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("duties", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Duties); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("appoint_time", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppointTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("position_level", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PositionLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cposition_time", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CpositionTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remunerate", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Remunerate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_category", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCategory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_external", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsExternal); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Department); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdateTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTeacherInfoReq(%+v)", *p)

}

func (p *UpdateTeacherInfoReq) DeepEqual(ano *UpdateTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.OfficeId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Duties) {
		return false
	}
	if !p.Field4DeepEqual(ano.AppointTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.PositionLevel) {
		return false
	}
	if !p.Field6DeepEqual(ano.CpositionTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.Remunerate) {
		return false
	}
	if !p.Field8DeepEqual(ano.IdCategory) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsExternal) {
		return false
	}
	if !p.Field10DeepEqual(ano.Order) {
		return false
	}
	if !p.Field11DeepEqual(ano.Department) {
		return false
	}
	return true
}

func (p *UpdateTeacherInfoReq) Field1DeepEqual(src int32) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field2DeepEqual(src int32) bool {

	if p.OfficeId != src {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Duties, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.AppointTime, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.PositionLevel, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CpositionTime, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field7DeepEqual(src int64) bool {

	if p.Remunerate != src {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.IdCategory, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field9DeepEqual(src int32) bool {

	if p.IsExternal != src {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field10DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}
func (p *UpdateTeacherInfoReq) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Department, src) != 0 {
		return false
	}
	return true
}

type UpdateTeacherInfoResp struct {
}

func NewUpdateTeacherInfoResp() *UpdateTeacherInfoResp {
	return &UpdateTeacherInfoResp{}
}

func (p *UpdateTeacherInfoResp) InitDefault() {
}

var fieldIDToName_UpdateTeacherInfoResp = map[int16]string{}

func (p *UpdateTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTeacherInfoResp(%+v)", *p)

}

func (p *UpdateTeacherInfoResp) DeepEqual(ano *UpdateTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SetTeacherInfoStatusReq struct {
	Item []*SetTeacherInfoStatusReq_Value `thrift:"item,1" frugal:"1,default,list<SetTeacherInfoStatusReq_Value>" json:"item" binding:"required"`
}

func NewSetTeacherInfoStatusReq() *SetTeacherInfoStatusReq {
	return &SetTeacherInfoStatusReq{}
}

func (p *SetTeacherInfoStatusReq) InitDefault() {
}

func (p *SetTeacherInfoStatusReq) GetItem() (v []*SetTeacherInfoStatusReq_Value) {
	return p.Item
}
func (p *SetTeacherInfoStatusReq) SetItem(val []*SetTeacherInfoStatusReq_Value) {
	p.Item = val
}

var fieldIDToName_SetTeacherInfoStatusReq = map[int16]string{
	1: "item",
}

func (p *SetTeacherInfoStatusReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetTeacherInfoStatusReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SetTeacherInfoStatusReq_Value, 0, size)
	values := make([]SetTeacherInfoStatusReq_Value, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Item = _field
	return nil
}

func (p *SetTeacherInfoStatusReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetTeacherInfoStatusReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Item)); err != nil {
		return err
	}
	for _, v := range p.Item {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTeacherInfoStatusReq(%+v)", *p)

}

func (p *SetTeacherInfoStatusReq) DeepEqual(ano *SetTeacherInfoStatusReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Item) {
		return false
	}
	return true
}

func (p *SetTeacherInfoStatusReq) Field1DeepEqual(src []*SetTeacherInfoStatusReq_Value) bool {

	if len(p.Item) != len(src) {
		return false
	}
	for i, v := range p.Item {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SetTeacherInfoStatusReq_Value struct {
	Id    int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Value int32 `thrift:"value,2" frugal:"2,default,i32" json:"value"`
}

func NewSetTeacherInfoStatusReq_Value() *SetTeacherInfoStatusReq_Value {
	return &SetTeacherInfoStatusReq_Value{}
}

func (p *SetTeacherInfoStatusReq_Value) InitDefault() {
}

func (p *SetTeacherInfoStatusReq_Value) GetId() (v int32) {
	return p.Id
}

func (p *SetTeacherInfoStatusReq_Value) GetValue() (v int32) {
	return p.Value
}
func (p *SetTeacherInfoStatusReq_Value) SetId(val int32) {
	p.Id = val
}
func (p *SetTeacherInfoStatusReq_Value) SetValue(val int32) {
	p.Value = val
}

var fieldIDToName_SetTeacherInfoStatusReq_Value = map[int16]string{
	1: "id",
	2: "value",
}

func (p *SetTeacherInfoStatusReq_Value) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetTeacherInfoStatusReq_Value[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq_Value) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *SetTeacherInfoStatusReq_Value) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *SetTeacherInfoStatusReq_Value) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetTeacherInfoStatusReq_Value"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq_Value) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq_Value) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetTeacherInfoStatusReq_Value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTeacherInfoStatusReq_Value(%+v)", *p)

}

func (p *SetTeacherInfoStatusReq_Value) DeepEqual(ano *SetTeacherInfoStatusReq_Value) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *SetTeacherInfoStatusReq_Value) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *SetTeacherInfoStatusReq_Value) Field2DeepEqual(src int32) bool {

	if p.Value != src {
		return false
	}
	return true
}

type OrderTeacherInfoReq struct {
}

func NewOrderTeacherInfoReq() *OrderTeacherInfoReq {
	return &OrderTeacherInfoReq{}
}

func (p *OrderTeacherInfoReq) InitDefault() {
}

var fieldIDToName_OrderTeacherInfoReq = map[int16]string{}

func (p *OrderTeacherInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderTeacherInfoReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("OrderTeacherInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderTeacherInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderTeacherInfoReq(%+v)", *p)

}

func (p *OrderTeacherInfoReq) DeepEqual(ano *OrderTeacherInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SetTeacherInfoStatusResp struct {
}

func NewSetTeacherInfoStatusResp() *SetTeacherInfoStatusResp {
	return &SetTeacherInfoStatusResp{}
}

func (p *SetTeacherInfoStatusResp) InitDefault() {
}

var fieldIDToName_SetTeacherInfoStatusResp = map[int16]string{}

func (p *SetTeacherInfoStatusResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SetTeacherInfoStatusResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetTeacherInfoStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTeacherInfoStatusResp(%+v)", *p)

}

func (p *SetTeacherInfoStatusResp) DeepEqual(ano *SetTeacherInfoStatusResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type OrderTeacherInfoResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewOrderTeacherInfoResp() *OrderTeacherInfoResp {
	return &OrderTeacherInfoResp{}
}

func (p *OrderTeacherInfoResp) InitDefault() {
}

func (p *OrderTeacherInfoResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *OrderTeacherInfoResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_OrderTeacherInfoResp = map[int16]string{
	1: "task_key",
}

func (p *OrderTeacherInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrderTeacherInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderTeacherInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *OrderTeacherInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrderTeacherInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderTeacherInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OrderTeacherInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderTeacherInfoResp(%+v)", *p)

}

func (p *OrderTeacherInfoResp) DeepEqual(ano *OrderTeacherInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *OrderTeacherInfoResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type CreateAppReq struct {
	SchoolName  string `thrift:"school_name,1" frugal:"1,default,string" json:"school_name" binding:"required"`
	CollegeName string `thrift:"college_name,2" frugal:"2,default,string" json:"college_name" binding:"required"`
}

func NewCreateAppReq() *CreateAppReq {
	return &CreateAppReq{}
}

func (p *CreateAppReq) InitDefault() {
}

func (p *CreateAppReq) GetSchoolName() (v string) {
	return p.SchoolName
}

func (p *CreateAppReq) GetCollegeName() (v string) {
	return p.CollegeName
}
func (p *CreateAppReq) SetSchoolName(val string) {
	p.SchoolName = val
}
func (p *CreateAppReq) SetCollegeName(val string) {
	p.CollegeName = val
}

var fieldIDToName_CreateAppReq = map[int16]string{
	1: "school_name",
	2: "college_name",
}

func (p *CreateAppReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateAppReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateAppReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchoolName = _field
	return nil
}
func (p *CreateAppReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CollegeName = _field
	return nil
}

func (p *CreateAppReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAppReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateAppReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("school_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SchoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateAppReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("college_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CollegeName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateAppReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppReq(%+v)", *p)

}

func (p *CreateAppReq) DeepEqual(ano *CreateAppReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SchoolName) {
		return false
	}
	if !p.Field2DeepEqual(ano.CollegeName) {
		return false
	}
	return true
}

func (p *CreateAppReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SchoolName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CollegeName, src) != 0 {
		return false
	}
	return true
}

type CreateAppResp struct {
	App   *ModelApp    `thrift:"app,1" frugal:"1,default,ModelApp" json:"app"`
	Root  *ModelUser   `thrift:"root,2" frugal:"2,default,ModelUser" json:"user"`
	Roles []*ModelRole `thrift:"roles,3" frugal:"3,default,list<ModelRole>" json:"roles"`
}

func NewCreateAppResp() *CreateAppResp {
	return &CreateAppResp{}
}

func (p *CreateAppResp) InitDefault() {
}

var CreateAppResp_App_DEFAULT *ModelApp

func (p *CreateAppResp) GetApp() (v *ModelApp) {
	if !p.IsSetApp() {
		return CreateAppResp_App_DEFAULT
	}
	return p.App
}

var CreateAppResp_Root_DEFAULT *ModelUser

func (p *CreateAppResp) GetRoot() (v *ModelUser) {
	if !p.IsSetRoot() {
		return CreateAppResp_Root_DEFAULT
	}
	return p.Root
}

func (p *CreateAppResp) GetRoles() (v []*ModelRole) {
	return p.Roles
}
func (p *CreateAppResp) SetApp(val *ModelApp) {
	p.App = val
}
func (p *CreateAppResp) SetRoot(val *ModelUser) {
	p.Root = val
}
func (p *CreateAppResp) SetRoles(val []*ModelRole) {
	p.Roles = val
}

var fieldIDToName_CreateAppResp = map[int16]string{
	1: "app",
	2: "root",
	3: "roles",
}

func (p *CreateAppResp) IsSetApp() bool {
	return p.App != nil
}

func (p *CreateAppResp) IsSetRoot() bool {
	return p.Root != nil
}

func (p *CreateAppResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateAppResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateAppResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewModelApp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.App = _field
	return nil
}
func (p *CreateAppResp) ReadField2(iprot thrift.TProtocol) error {
	_field := NewModelUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Root = _field
	return nil
}
func (p *CreateAppResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelRole, 0, size)
	values := make([]ModelRole, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Roles = _field
	return nil
}

func (p *CreateAppResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAppResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateAppResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.App.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateAppResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("root", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Root.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateAppResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roles", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Roles)); err != nil {
		return err
	}
	for _, v := range p.Roles {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateAppResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppResp(%+v)", *p)

}

func (p *CreateAppResp) DeepEqual(ano *CreateAppResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.App) {
		return false
	}
	if !p.Field2DeepEqual(ano.Root) {
		return false
	}
	if !p.Field3DeepEqual(ano.Roles) {
		return false
	}
	return true
}

func (p *CreateAppResp) Field1DeepEqual(src *ModelApp) bool {

	if !p.App.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateAppResp) Field2DeepEqual(src *ModelUser) bool {

	if !p.Root.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateAppResp) Field3DeepEqual(src []*ModelRole) bool {

	if len(p.Roles) != len(src) {
		return false
	}
	for i, v := range p.Roles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type LoginReq struct {
	UserName string `thrift:"user_name,1" frugal:"1,default,string" json:"username" binding:"required"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password" binding:"required"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetUserName() (v string) {
	return p.UserName
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetUserName(val string) {
	p.UserName = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "user_name",
	2: "password",
}

func (p *LoginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *LoginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *LoginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)

}

func (p *LoginReq) DeepEqual(ano *LoginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *LoginReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *LoginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type LoginResp struct {
	Token string     `thrift:"token,1" frugal:"1,default,string" json:"token"`
	User  *ModelUser `thrift:"user,2" frugal:"2,default,ModelUser" json:"user"`
	Roles []string   `thrift:"roles,3" frugal:"3,default,list<string>" json:"roles"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetToken() (v string) {
	return p.Token
}

var LoginResp_User_DEFAULT *ModelUser

func (p *LoginResp) GetUser() (v *ModelUser) {
	if !p.IsSetUser() {
		return LoginResp_User_DEFAULT
	}
	return p.User
}

func (p *LoginResp) GetRoles() (v []string) {
	return p.Roles
}
func (p *LoginResp) SetToken(val string) {
	p.Token = val
}
func (p *LoginResp) SetUser(val *ModelUser) {
	p.User = val
}
func (p *LoginResp) SetRoles(val []string) {
	p.Roles = val
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "token",
	2: "user",
	3: "roles",
}

func (p *LoginResp) IsSetUser() bool {
	return p.User != nil
}

func (p *LoginResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *LoginResp) ReadField2(iprot thrift.TProtocol) error {
	_field := NewModelUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.User = _field
	return nil
}
func (p *LoginResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Roles = _field
	return nil
}

func (p *LoginResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.User.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roles", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Roles)); err != nil {
		return err
	}
	for _, v := range p.Roles {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)

}

func (p *LoginResp) DeepEqual(ano *LoginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Roles) {
		return false
	}
	return true
}

func (p *LoginResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *LoginResp) Field2DeepEqual(src *ModelUser) bool {

	if !p.User.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LoginResp) Field3DeepEqual(src []string) bool {

	if len(p.Roles) != len(src) {
		return false
	}
	for i, v := range p.Roles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type GetUserListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetUserListReq() *GetUserListReq {
	return &GetUserListReq{}
}

func (p *GetUserListReq) InitDefault() {
}

var GetUserListReq_ListOption_DEFAULT *base.ListOption

func (p *GetUserListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetUserListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetUserListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetUserListReq = map[int16]string{
	1: "list_option",
}

func (p *GetUserListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetUserListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetUserListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserListReq(%+v)", *p)

}

func (p *GetUserListReq) DeepEqual(ano *GetUserListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetUserListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetUserListResp struct {
	List     []*ModelUser           `thrift:"list,1" frugal:"1,default,list<ModelUser>" json:"list"`
	Paginate *base.Paginate         `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
	RoleMap  map[int32][]*ModelRole `thrift:"role_map,3" frugal:"3,default,map<i32:list<ModelRole>>" json:"role_map"`
}

func NewGetUserListResp() *GetUserListResp {
	return &GetUserListResp{}
}

func (p *GetUserListResp) InitDefault() {
}

func (p *GetUserListResp) GetList() (v []*ModelUser) {
	return p.List
}

var GetUserListResp_Paginate_DEFAULT *base.Paginate

func (p *GetUserListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetUserListResp_Paginate_DEFAULT
	}
	return p.Paginate
}

func (p *GetUserListResp) GetRoleMap() (v map[int32][]*ModelRole) {
	return p.RoleMap
}
func (p *GetUserListResp) SetList(val []*ModelUser) {
	p.List = val
}
func (p *GetUserListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}
func (p *GetUserListResp) SetRoleMap(val map[int32][]*ModelRole) {
	p.RoleMap = val
}

var fieldIDToName_GetUserListResp = map[int16]string{
	1: "list",
	2: "paginate",
	3: "role_map",
}

func (p *GetUserListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetUserListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelUser, 0, size)
	values := make([]ModelUser, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetUserListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}
func (p *GetUserListResp) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*ModelRole, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*ModelRole, 0, size)
		values := make([]ModelRole, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoleMap = _field
	return nil
}

func (p *GetUserListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_map", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.RoleMap)); err != nil {
		return err
	}
	for k, v := range p.RoleMap {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserListResp(%+v)", *p)

}

func (p *GetUserListResp) DeepEqual(ano *GetUserListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	if !p.Field3DeepEqual(ano.RoleMap) {
		return false
	}
	return true
}

func (p *GetUserListResp) Field1DeepEqual(src []*ModelUser) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetUserListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetUserListResp) Field3DeepEqual(src map[int32][]*ModelRole) bool {

	if len(p.RoleMap) != len(src) {
		return false
	}
	for k, v := range p.RoleMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type GetRoleListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetRoleListReq() *GetRoleListReq {
	return &GetRoleListReq{}
}

func (p *GetRoleListReq) InitDefault() {
}

var GetRoleListReq_ListOption_DEFAULT *base.ListOption

func (p *GetRoleListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetRoleListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetRoleListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetRoleListReq = map[int16]string{
	1: "list_option",
}

func (p *GetRoleListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetRoleListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRoleListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetRoleListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetRoleListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoleListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRoleListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRoleListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleListReq(%+v)", *p)

}

func (p *GetRoleListReq) DeepEqual(ano *GetRoleListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetRoleListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetRoleListResp struct {
	List     []*ModelRole   `thrift:"list,1" frugal:"1,default,list<ModelRole>" json:"list"`
	Paginate *base.Paginate `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetRoleListResp() *GetRoleListResp {
	return &GetRoleListResp{}
}

func (p *GetRoleListResp) InitDefault() {
}

func (p *GetRoleListResp) GetList() (v []*ModelRole) {
	return p.List
}

var GetRoleListResp_Paginate_DEFAULT *base.Paginate

func (p *GetRoleListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetRoleListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetRoleListResp) SetList(val []*ModelRole) {
	p.List = val
}
func (p *GetRoleListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetRoleListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetRoleListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetRoleListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRoleListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetRoleListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelRole, 0, size)
	values := make([]ModelRole, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetRoleListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetRoleListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoleListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRoleListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRoleListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetRoleListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleListResp(%+v)", *p)

}

func (p *GetRoleListResp) DeepEqual(ano *GetRoleListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetRoleListResp) Field1DeepEqual(src []*ModelRole) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetRoleListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetMenuReq struct {
}

func NewGetMenuReq() *GetMenuReq {
	return &GetMenuReq{}
}

func (p *GetMenuReq) InitDefault() {
}

var fieldIDToName_GetMenuReq = map[int16]string{}

func (p *GetMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMenuReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMenuReq(%+v)", *p)

}

func (p *GetMenuReq) DeepEqual(ano *GetMenuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetMenuResp struct {
	List []*ModelMenu `thrift:"list,1" frugal:"1,default,list<ModelMenu>" json:"list"`
}

func NewGetMenuResp() *GetMenuResp {
	return &GetMenuResp{}
}

func (p *GetMenuResp) InitDefault() {
}

func (p *GetMenuResp) GetList() (v []*ModelMenu) {
	return p.List
}
func (p *GetMenuResp) SetList(val []*ModelMenu) {
	p.List = val
}

var fieldIDToName_GetMenuResp = map[int16]string{
	1: "list",
}

func (p *GetMenuResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMenuResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMenuResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelMenu, 0, size)
	values := make([]ModelMenu, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}

func (p *GetMenuResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenuResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMenuResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMenuResp(%+v)", *p)

}

func (p *GetMenuResp) DeepEqual(ano *GetMenuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	return true
}

func (p *GetMenuResp) Field1DeepEqual(src []*ModelMenu) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetPermissionListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetPermissionListReq() *GetPermissionListReq {
	return &GetPermissionListReq{}
}

func (p *GetPermissionListReq) InitDefault() {
}

var GetPermissionListReq_ListOption_DEFAULT *base.ListOption

func (p *GetPermissionListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetPermissionListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetPermissionListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetPermissionListReq = map[int16]string{
	1: "list_option",
}

func (p *GetPermissionListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetPermissionListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPermissionListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPermissionListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetPermissionListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPermissionListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPermissionListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPermissionListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionListReq(%+v)", *p)

}

func (p *GetPermissionListReq) DeepEqual(ano *GetPermissionListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetPermissionListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetPermissionListResp struct {
	List     []*ModelPermission `thrift:"list,1" frugal:"1,default,list<ModelPermission>" json:"list"`
	Paginate *base.Paginate     `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetPermissionListResp() *GetPermissionListResp {
	return &GetPermissionListResp{}
}

func (p *GetPermissionListResp) InitDefault() {
}

func (p *GetPermissionListResp) GetList() (v []*ModelPermission) {
	return p.List
}

var GetPermissionListResp_Paginate_DEFAULT *base.Paginate

func (p *GetPermissionListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetPermissionListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetPermissionListResp) SetList(val []*ModelPermission) {
	p.List = val
}
func (p *GetPermissionListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetPermissionListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetPermissionListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetPermissionListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPermissionListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPermissionListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelPermission, 0, size)
	values := make([]ModelPermission, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetPermissionListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetPermissionListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPermissionListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPermissionListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPermissionListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetPermissionListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionListResp(%+v)", *p)

}

func (p *GetPermissionListResp) DeepEqual(ano *GetPermissionListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetPermissionListResp) Field1DeepEqual(src []*ModelPermission) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPermissionListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type CreateUserResp struct {
	User  *ModelUser `thrift:"user,1" frugal:"1,default,ModelUser" json:"user"`
	Roles []string   `thrift:"roles,2" frugal:"2,default,list<string>" json:"roles"`
}

func NewCreateUserResp() *CreateUserResp {
	return &CreateUserResp{}
}

func (p *CreateUserResp) InitDefault() {
}

var CreateUserResp_User_DEFAULT *ModelUser

func (p *CreateUserResp) GetUser() (v *ModelUser) {
	if !p.IsSetUser() {
		return CreateUserResp_User_DEFAULT
	}
	return p.User
}

func (p *CreateUserResp) GetRoles() (v []string) {
	return p.Roles
}
func (p *CreateUserResp) SetUser(val *ModelUser) {
	p.User = val
}
func (p *CreateUserResp) SetRoles(val []string) {
	p.Roles = val
}

var fieldIDToName_CreateUserResp = map[int16]string{
	1: "user",
	2: "roles",
}

func (p *CreateUserResp) IsSetUser() bool {
	return p.User != nil
}

func (p *CreateUserResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateUserResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateUserResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewModelUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.User = _field
	return nil
}
func (p *CreateUserResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Roles = _field
	return nil
}

func (p *CreateUserResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUserResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateUserResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.User.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateUserResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roles", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Roles)); err != nil {
		return err
	}
	for _, v := range p.Roles {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserResp(%+v)", *p)

}

func (p *CreateUserResp) DeepEqual(ano *CreateUserResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field2DeepEqual(ano.Roles) {
		return false
	}
	return true
}

func (p *CreateUserResp) Field1DeepEqual(src *ModelUser) bool {

	if !p.User.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateUserResp) Field2DeepEqual(src []string) bool {

	if len(p.Roles) != len(src) {
		return false
	}
	for i, v := range p.Roles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type CreateUserReq struct {
	UserName string  `thrift:"user_name,1" frugal:"1,default,string" json:"username" binding:"required"`
	Password string  `thrift:"password,2" frugal:"2,default,string" json:"password" binding:"required"`
	NickName string  `thrift:"nick_name,3" frugal:"3,default,string" json:"nick_name" binding:"required"`
	Email    string  `thrift:"email,4" frugal:"4,default,string" json:"email"`
	Mobile   string  `thrift:"mobile,5" frugal:"5,default,string" json:"mobile"`
	Avatar   string  `thrift:"avatar,6" frugal:"6,default,string" json:"avatar"`
	RoleIds  []int32 `thrift:"role_ids,7" frugal:"7,default,list<i32>" json:"role_ids" binding:"required"`
}

func NewCreateUserReq() *CreateUserReq {
	return &CreateUserReq{}
}

func (p *CreateUserReq) InitDefault() {
}

func (p *CreateUserReq) GetUserName() (v string) {
	return p.UserName
}

func (p *CreateUserReq) GetPassword() (v string) {
	return p.Password
}

func (p *CreateUserReq) GetNickName() (v string) {
	return p.NickName
}

func (p *CreateUserReq) GetEmail() (v string) {
	return p.Email
}

func (p *CreateUserReq) GetMobile() (v string) {
	return p.Mobile
}

func (p *CreateUserReq) GetAvatar() (v string) {
	return p.Avatar
}

func (p *CreateUserReq) GetRoleIds() (v []int32) {
	return p.RoleIds
}
func (p *CreateUserReq) SetUserName(val string) {
	p.UserName = val
}
func (p *CreateUserReq) SetPassword(val string) {
	p.Password = val
}
func (p *CreateUserReq) SetNickName(val string) {
	p.NickName = val
}
func (p *CreateUserReq) SetEmail(val string) {
	p.Email = val
}
func (p *CreateUserReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *CreateUserReq) SetAvatar(val string) {
	p.Avatar = val
}
func (p *CreateUserReq) SetRoleIds(val []int32) {
	p.RoleIds = val
}

var fieldIDToName_CreateUserReq = map[int16]string{
	1: "user_name",
	2: "password",
	3: "nick_name",
	4: "email",
	5: "mobile",
	6: "avatar",
	7: "role_ids",
}

func (p *CreateUserReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateUserReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateUserReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *CreateUserReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}
func (p *CreateUserReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NickName = _field
	return nil
}
func (p *CreateUserReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *CreateUserReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *CreateUserReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *CreateUserReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RoleIds = _field
	return nil
}

func (p *CreateUserReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUserReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nick_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateUserReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateUserReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateUserReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_ids", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RoleIds)); err != nil {
		return err
	}
	for _, v := range p.RoleIds {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserReq(%+v)", *p)

}

func (p *CreateUserReq) DeepEqual(ano *CreateUserReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.NickName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Email) {
		return false
	}
	if !p.Field5DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field6DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field7DeepEqual(ano.RoleIds) {
		return false
	}
	return true
}

func (p *CreateUserReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NickName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *CreateUserReq) Field7DeepEqual(src []int32) bool {

	if len(p.RoleIds) != len(src) {
		return false
	}
	for i, v := range p.RoleIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type SetUserRoleReq struct {
	UserId int32   `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id" binding:"required"`
	RoleId []int32 `thrift:"role_id,2" frugal:"2,default,list<i32>" json:"role_id"`
}

func NewSetUserRoleReq() *SetUserRoleReq {
	return &SetUserRoleReq{}
}

func (p *SetUserRoleReq) InitDefault() {
}

func (p *SetUserRoleReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *SetUserRoleReq) GetRoleId() (v []int32) {
	return p.RoleId
}
func (p *SetUserRoleReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *SetUserRoleReq) SetRoleId(val []int32) {
	p.RoleId = val
}

var fieldIDToName_SetUserRoleReq = map[int16]string{
	1: "user_id",
	2: "role_id",
}

func (p *SetUserRoleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetUserRoleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetUserRoleReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *SetUserRoleReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RoleId = _field
	return nil
}

func (p *SetUserRoleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetUserRoleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetUserRoleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetUserRoleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RoleId)); err != nil {
		return err
	}
	for _, v := range p.RoleId {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetUserRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserRoleReq(%+v)", *p)

}

func (p *SetUserRoleReq) DeepEqual(ano *SetUserRoleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.RoleId) {
		return false
	}
	return true
}

func (p *SetUserRoleReq) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *SetUserRoleReq) Field2DeepEqual(src []int32) bool {

	if len(p.RoleId) != len(src) {
		return false
	}
	for i, v := range p.RoleId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type SetUserRoleResp struct {
}

func NewSetUserRoleResp() *SetUserRoleResp {
	return &SetUserRoleResp{}
}

func (p *SetUserRoleResp) InitDefault() {
}

var fieldIDToName_SetUserRoleResp = map[int16]string{}

func (p *SetUserRoleResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetUserRoleResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SetUserRoleResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetUserRoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserRoleResp(%+v)", *p)

}

func (p *SetUserRoleResp) DeepEqual(ano *SetUserRoleResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SetRolePermissionReq struct {
	RoleId       int32   `thrift:"role_id,1" frugal:"1,default,i32" json:"role_id" binding:"required"`
	PermissionId []int32 `thrift:"permission_id,2" frugal:"2,default,list<i32>" json:"permission_id"`
}

func NewSetRolePermissionReq() *SetRolePermissionReq {
	return &SetRolePermissionReq{}
}

func (p *SetRolePermissionReq) InitDefault() {
}

func (p *SetRolePermissionReq) GetRoleId() (v int32) {
	return p.RoleId
}

func (p *SetRolePermissionReq) GetPermissionId() (v []int32) {
	return p.PermissionId
}
func (p *SetRolePermissionReq) SetRoleId(val int32) {
	p.RoleId = val
}
func (p *SetRolePermissionReq) SetPermissionId(val []int32) {
	p.PermissionId = val
}

var fieldIDToName_SetRolePermissionReq = map[int16]string{
	1: "role_id",
	2: "permission_id",
}

func (p *SetRolePermissionReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetRolePermissionReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRolePermissionReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RoleId = _field
	return nil
}
func (p *SetRolePermissionReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PermissionId = _field
	return nil
}

func (p *SetRolePermissionReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRolePermissionReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRolePermissionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetRolePermissionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("permission_id", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.PermissionId)); err != nil {
		return err
	}
	for _, v := range p.PermissionId {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetRolePermissionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRolePermissionReq(%+v)", *p)

}

func (p *SetRolePermissionReq) DeepEqual(ano *SetRolePermissionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PermissionId) {
		return false
	}
	return true
}

func (p *SetRolePermissionReq) Field1DeepEqual(src int32) bool {

	if p.RoleId != src {
		return false
	}
	return true
}
func (p *SetRolePermissionReq) Field2DeepEqual(src []int32) bool {

	if len(p.PermissionId) != len(src) {
		return false
	}
	for i, v := range p.PermissionId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type SetRolePermissionResp struct {
}

func NewSetRolePermissionResp() *SetRolePermissionResp {
	return &SetRolePermissionResp{}
}

func (p *SetRolePermissionResp) InitDefault() {
}

var fieldIDToName_SetRolePermissionResp = map[int16]string{}

func (p *SetRolePermissionResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRolePermissionResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SetRolePermissionResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRolePermissionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRolePermissionResp(%+v)", *p)

}

func (p *SetRolePermissionResp) DeepEqual(ano *SetRolePermissionResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SetRoleMenuReq struct {
	RoleId int32   `thrift:"role_id,1" frugal:"1,default,i32" json:"role_id" binding:"required"`
	MenuId []int32 `thrift:"menu_id,2" frugal:"2,default,list<i32>" json:"menu_id" `
}

func NewSetRoleMenuReq() *SetRoleMenuReq {
	return &SetRoleMenuReq{}
}

func (p *SetRoleMenuReq) InitDefault() {
}

func (p *SetRoleMenuReq) GetRoleId() (v int32) {
	return p.RoleId
}

func (p *SetRoleMenuReq) GetMenuId() (v []int32) {
	return p.MenuId
}
func (p *SetRoleMenuReq) SetRoleId(val int32) {
	p.RoleId = val
}
func (p *SetRoleMenuReq) SetMenuId(val []int32) {
	p.MenuId = val
}

var fieldIDToName_SetRoleMenuReq = map[int16]string{
	1: "role_id",
	2: "menu_id",
}

func (p *SetRoleMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetRoleMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRoleMenuReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RoleId = _field
	return nil
}
func (p *SetRoleMenuReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MenuId = _field
	return nil
}

func (p *SetRoleMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRoleMenuReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetRoleMenuReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("menu_id", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.MenuId)); err != nil {
		return err
	}
	for _, v := range p.MenuId {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetRoleMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoleMenuReq(%+v)", *p)

}

func (p *SetRoleMenuReq) DeepEqual(ano *SetRoleMenuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MenuId) {
		return false
	}
	return true
}

func (p *SetRoleMenuReq) Field1DeepEqual(src int32) bool {

	if p.RoleId != src {
		return false
	}
	return true
}
func (p *SetRoleMenuReq) Field2DeepEqual(src []int32) bool {

	if len(p.MenuId) != len(src) {
		return false
	}
	for i, v := range p.MenuId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type SetRoleMenuResp struct {
}

func NewSetRoleMenuResp() *SetRoleMenuResp {
	return &SetRoleMenuResp{}
}

func (p *SetRoleMenuResp) InitDefault() {
}

var fieldIDToName_SetRoleMenuResp = map[int16]string{}

func (p *SetRoleMenuResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetRoleMenuResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SetRoleMenuResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetRoleMenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoleMenuResp(%+v)", *p)

}

func (p *SetRoleMenuResp) DeepEqual(ano *SetRoleMenuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CreateMenuReq struct {
	Name      string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Path      string `thrift:"path,2" frugal:"2,default,string" json:"path" binding:"required"`
	Component string `thrift:"component,3" frugal:"3,default,string" json:"component" binding:"required"`
	Redirect  string `thrift:"redirect,4" frugal:"4,default,string" json:"redirect"`
	ParentId  int32  `thrift:"parent_id,5" frugal:"5,default,i32" json:"parent_id"`
	Meta      *Meta  `thrift:"meta,6" frugal:"6,default,Meta" json:"meta"`
}

func NewCreateMenuReq() *CreateMenuReq {
	return &CreateMenuReq{}
}

func (p *CreateMenuReq) InitDefault() {
}

func (p *CreateMenuReq) GetName() (v string) {
	return p.Name
}

func (p *CreateMenuReq) GetPath() (v string) {
	return p.Path
}

func (p *CreateMenuReq) GetComponent() (v string) {
	return p.Component
}

func (p *CreateMenuReq) GetRedirect() (v string) {
	return p.Redirect
}

func (p *CreateMenuReq) GetParentId() (v int32) {
	return p.ParentId
}

var CreateMenuReq_Meta_DEFAULT *Meta

func (p *CreateMenuReq) GetMeta() (v *Meta) {
	if !p.IsSetMeta() {
		return CreateMenuReq_Meta_DEFAULT
	}
	return p.Meta
}
func (p *CreateMenuReq) SetName(val string) {
	p.Name = val
}
func (p *CreateMenuReq) SetPath(val string) {
	p.Path = val
}
func (p *CreateMenuReq) SetComponent(val string) {
	p.Component = val
}
func (p *CreateMenuReq) SetRedirect(val string) {
	p.Redirect = val
}
func (p *CreateMenuReq) SetParentId(val int32) {
	p.ParentId = val
}
func (p *CreateMenuReq) SetMeta(val *Meta) {
	p.Meta = val
}

var fieldIDToName_CreateMenuReq = map[int16]string{
	1: "name",
	2: "path",
	3: "component",
	4: "redirect",
	5: "parent_id",
	6: "meta",
}

func (p *CreateMenuReq) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *CreateMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateMenuReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateMenuReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *CreateMenuReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Component = _field
	return nil
}
func (p *CreateMenuReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Redirect = _field
	return nil
}
func (p *CreateMenuReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentId = _field
	return nil
}
func (p *CreateMenuReq) ReadField6(iprot thrift.TProtocol) error {
	_field := NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}

func (p *CreateMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateMenuReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateMenuReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateMenuReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("component", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Component); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateMenuReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("redirect", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Redirect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateMenuReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ParentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateMenuReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuReq(%+v)", *p)

}

func (p *CreateMenuReq) DeepEqual(ano *CreateMenuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Path) {
		return false
	}
	if !p.Field3DeepEqual(ano.Component) {
		return false
	}
	if !p.Field4DeepEqual(ano.Redirect) {
		return false
	}
	if !p.Field5DeepEqual(ano.ParentId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Meta) {
		return false
	}
	return true
}

func (p *CreateMenuReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateMenuReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *CreateMenuReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Component, src) != 0 {
		return false
	}
	return true
}
func (p *CreateMenuReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Redirect, src) != 0 {
		return false
	}
	return true
}
func (p *CreateMenuReq) Field5DeepEqual(src int32) bool {

	if p.ParentId != src {
		return false
	}
	return true
}
func (p *CreateMenuReq) Field6DeepEqual(src *Meta) bool {

	if !p.Meta.DeepEqual(src) {
		return false
	}
	return true
}

type CreateMenuResp struct {
}

func NewCreateMenuResp() *CreateMenuResp {
	return &CreateMenuResp{}
}

func (p *CreateMenuResp) InitDefault() {
}

var fieldIDToName_CreateMenuResp = map[int16]string{}

func (p *CreateMenuResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateMenuResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateMenuResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateMenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuResp(%+v)", *p)

}

func (p *CreateMenuResp) DeepEqual(ano *CreateMenuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CreateRoleReq struct {
	Name        string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
}

func NewCreateRoleReq() *CreateRoleReq {
	return &CreateRoleReq{}
}

func (p *CreateRoleReq) InitDefault() {
}

func (p *CreateRoleReq) GetName() (v string) {
	return p.Name
}

func (p *CreateRoleReq) GetDescription() (v string) {
	return p.Description
}
func (p *CreateRoleReq) SetName(val string) {
	p.Name = val
}
func (p *CreateRoleReq) SetDescription(val string) {
	p.Description = val
}

var fieldIDToName_CreateRoleReq = map[int16]string{
	1: "name",
	2: "description",
}

func (p *CreateRoleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateRoleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateRoleReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateRoleReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}

func (p *CreateRoleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRoleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateRoleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateRoleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleReq(%+v)", *p)

}

func (p *CreateRoleReq) DeepEqual(ano *CreateRoleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	return true
}

func (p *CreateRoleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateRoleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}

type CreateRoleResp struct {
	Role *ModelRole `thrift:"role,1" frugal:"1,default,ModelRole" json:"role"`
}

func NewCreateRoleResp() *CreateRoleResp {
	return &CreateRoleResp{}
}

func (p *CreateRoleResp) InitDefault() {
}

var CreateRoleResp_Role_DEFAULT *ModelRole

func (p *CreateRoleResp) GetRole() (v *ModelRole) {
	if !p.IsSetRole() {
		return CreateRoleResp_Role_DEFAULT
	}
	return p.Role
}
func (p *CreateRoleResp) SetRole(val *ModelRole) {
	p.Role = val
}

var fieldIDToName_CreateRoleResp = map[int16]string{
	1: "role",
}

func (p *CreateRoleResp) IsSetRole() bool {
	return p.Role != nil
}

func (p *CreateRoleResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateRoleResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateRoleResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewModelRole()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Role = _field
	return nil
}

func (p *CreateRoleResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRoleResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateRoleResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Role.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateRoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleResp(%+v)", *p)

}

func (p *CreateRoleResp) DeepEqual(ano *CreateRoleResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	return true
}

func (p *CreateRoleResp) Field1DeepEqual(src *ModelRole) bool {

	if !p.Role.DeepEqual(src) {
		return false
	}
	return true
}

type CreatePermissionReq struct {
	Name        string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
}

func NewCreatePermissionReq() *CreatePermissionReq {
	return &CreatePermissionReq{}
}

func (p *CreatePermissionReq) InitDefault() {
}

func (p *CreatePermissionReq) GetName() (v string) {
	return p.Name
}

func (p *CreatePermissionReq) GetDescription() (v string) {
	return p.Description
}
func (p *CreatePermissionReq) SetName(val string) {
	p.Name = val
}
func (p *CreatePermissionReq) SetDescription(val string) {
	p.Description = val
}

var fieldIDToName_CreatePermissionReq = map[int16]string{
	1: "name",
	2: "description",
}

func (p *CreatePermissionReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePermissionReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePermissionReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreatePermissionReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}

func (p *CreatePermissionReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePermissionReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePermissionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePermissionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreatePermissionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePermissionReq(%+v)", *p)

}

func (p *CreatePermissionReq) DeepEqual(ano *CreatePermissionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	return true
}

func (p *CreatePermissionReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePermissionReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}

type CreatePermissionResp struct {
	Permission *ModelPermission `thrift:"permission,1" frugal:"1,default,ModelPermission" json:"permission"`
}

func NewCreatePermissionResp() *CreatePermissionResp {
	return &CreatePermissionResp{}
}

func (p *CreatePermissionResp) InitDefault() {
}

var CreatePermissionResp_Permission_DEFAULT *ModelPermission

func (p *CreatePermissionResp) GetPermission() (v *ModelPermission) {
	if !p.IsSetPermission() {
		return CreatePermissionResp_Permission_DEFAULT
	}
	return p.Permission
}
func (p *CreatePermissionResp) SetPermission(val *ModelPermission) {
	p.Permission = val
}

var fieldIDToName_CreatePermissionResp = map[int16]string{
	1: "permission",
}

func (p *CreatePermissionResp) IsSetPermission() bool {
	return p.Permission != nil
}

func (p *CreatePermissionResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePermissionResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePermissionResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewModelPermission()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Permission = _field
	return nil
}

func (p *CreatePermissionResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePermissionResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePermissionResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("permission", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Permission.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePermissionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePermissionResp(%+v)", *p)

}

func (p *CreatePermissionResp) DeepEqual(ano *CreatePermissionResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Permission) {
		return false
	}
	return true
}

func (p *CreatePermissionResp) Field1DeepEqual(src *ModelPermission) bool {

	if !p.Permission.DeepEqual(src) {
		return false
	}
	return true
}

type CreateOfficeReq struct {
	Name        string `thrift:"name,1" frugal:"1,default,string" json:"name" binding:"required"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
	AppId       int32  `thrift:"app_id,3" frugal:"3,default,i32" json:"app_id" binding:"required"`
	Name2       string `thrift:"name2,4" frugal:"4,default,string" json:"name2"`
	Order       int32  `thrift:"order,5" frugal:"5,default,i32" json:"order"`
}

func NewCreateOfficeReq() *CreateOfficeReq {
	return &CreateOfficeReq{}
}

func (p *CreateOfficeReq) InitDefault() {
}

func (p *CreateOfficeReq) GetName() (v string) {
	return p.Name
}

func (p *CreateOfficeReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateOfficeReq) GetAppId() (v int32) {
	return p.AppId
}

func (p *CreateOfficeReq) GetName2() (v string) {
	return p.Name2
}

func (p *CreateOfficeReq) GetOrder() (v int32) {
	return p.Order
}
func (p *CreateOfficeReq) SetName(val string) {
	p.Name = val
}
func (p *CreateOfficeReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateOfficeReq) SetAppId(val int32) {
	p.AppId = val
}
func (p *CreateOfficeReq) SetName2(val string) {
	p.Name2 = val
}
func (p *CreateOfficeReq) SetOrder(val int32) {
	p.Order = val
}

var fieldIDToName_CreateOfficeReq = map[int16]string{
	1: "name",
	2: "description",
	3: "app_id",
	4: "name2",
	5: "order",
}

func (p *CreateOfficeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOfficeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOfficeReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateOfficeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *CreateOfficeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *CreateOfficeReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name2 = _field
	return nil
}
func (p *CreateOfficeReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}

func (p *CreateOfficeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOfficeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOfficeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOfficeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOfficeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOfficeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name2", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOfficeReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateOfficeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOfficeReq(%+v)", *p)

}

func (p *CreateOfficeReq) DeepEqual(ano *CreateOfficeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name2) {
		return false
	}
	if !p.Field5DeepEqual(ano.Order) {
		return false
	}
	return true
}

func (p *CreateOfficeReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateOfficeReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateOfficeReq) Field3DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *CreateOfficeReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name2, src) != 0 {
		return false
	}
	return true
}
func (p *CreateOfficeReq) Field5DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}

type CreateOfficeResp struct {
}

func NewCreateOfficeResp() *CreateOfficeResp {
	return &CreateOfficeResp{}
}

func (p *CreateOfficeResp) InitDefault() {
}

var fieldIDToName_CreateOfficeResp = map[int16]string{}

func (p *CreateOfficeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOfficeResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateOfficeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOfficeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOfficeResp(%+v)", *p)

}

func (p *CreateOfficeResp) DeepEqual(ano *CreateOfficeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetOfficeListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetOfficeListReq() *GetOfficeListReq {
	return &GetOfficeListReq{}
}

func (p *GetOfficeListReq) InitDefault() {
}

var GetOfficeListReq_ListOption_DEFAULT *base.ListOption

func (p *GetOfficeListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetOfficeListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetOfficeListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetOfficeListReq = map[int16]string{
	1: "list_option",
}

func (p *GetOfficeListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetOfficeListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetOfficeListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetOfficeListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetOfficeListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOfficeListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetOfficeListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetOfficeListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOfficeListReq(%+v)", *p)

}

func (p *GetOfficeListReq) DeepEqual(ano *GetOfficeListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetOfficeListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetOfficeListResp struct {
	List     []*ModelTeacherOffice `thrift:"list,1" frugal:"1,default,list<ModelTeacherOffice>" json:"list"`
	Paginate *base.Paginate        `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetOfficeListResp() *GetOfficeListResp {
	return &GetOfficeListResp{}
}

func (p *GetOfficeListResp) InitDefault() {
}

func (p *GetOfficeListResp) GetList() (v []*ModelTeacherOffice) {
	return p.List
}

var GetOfficeListResp_Paginate_DEFAULT *base.Paginate

func (p *GetOfficeListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetOfficeListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetOfficeListResp) SetList(val []*ModelTeacherOffice) {
	p.List = val
}
func (p *GetOfficeListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetOfficeListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetOfficeListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetOfficeListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetOfficeListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetOfficeListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelTeacherOffice, 0, size)
	values := make([]ModelTeacherOffice, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetOfficeListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetOfficeListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOfficeListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetOfficeListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetOfficeListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetOfficeListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOfficeListResp(%+v)", *p)

}

func (p *GetOfficeListResp) DeepEqual(ano *GetOfficeListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetOfficeListResp) Field1DeepEqual(src []*ModelTeacherOffice) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetOfficeListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteUserResp struct {
}

func NewDeleteUserResp() *DeleteUserResp {
	return &DeleteUserResp{}
}

func (p *DeleteUserResp) InitDefault() {
}

var fieldIDToName_DeleteUserResp = map[int16]string{}

func (p *DeleteUserResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteUserResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteUserResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserResp(%+v)", *p)

}

func (p *DeleteUserResp) DeepEqual(ano *DeleteUserResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type DeleteUserReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id" binding:"required"`
}

func NewDeleteUserReq() *DeleteUserReq {
	return &DeleteUserReq{}
}

func (p *DeleteUserReq) InitDefault() {
}

func (p *DeleteUserReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *DeleteUserReq) SetUserId(val int32) {
	p.UserId = val
}

var fieldIDToName_DeleteUserReq = map[int16]string{
	1: "user_id",
}

func (p *DeleteUserReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteUserReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteUserReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *DeleteUserReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUserReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserReq(%+v)", *p)

}

func (p *DeleteUserReq) DeepEqual(ano *DeleteUserReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *DeleteUserReq) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetMenuListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetMenuListReq() *GetMenuListReq {
	return &GetMenuListReq{}
}

func (p *GetMenuListReq) InitDefault() {
}

var GetMenuListReq_ListOption_DEFAULT *base.ListOption

func (p *GetMenuListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetMenuListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetMenuListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetMenuListReq = map[int16]string{
	1: "list_option",
}

func (p *GetMenuListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetMenuListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMenuListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMenuListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetMenuListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenuListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMenuListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMenuListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMenuListReq(%+v)", *p)

}

func (p *GetMenuListReq) DeepEqual(ano *GetMenuListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetMenuListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetMenuListResp struct {
	List     []*ModelMenu   `thrift:"list,1" frugal:"1,default,list<ModelMenu>" json:"list"`
	Paginate *base.Paginate `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetMenuListResp() *GetMenuListResp {
	return &GetMenuListResp{}
}

func (p *GetMenuListResp) InitDefault() {
}

func (p *GetMenuListResp) GetList() (v []*ModelMenu) {
	return p.List
}

var GetMenuListResp_Paginate_DEFAULT *base.Paginate

func (p *GetMenuListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetMenuListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetMenuListResp) SetList(val []*ModelMenu) {
	p.List = val
}
func (p *GetMenuListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetMenuListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetMenuListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetMenuListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMenuListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMenuListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelMenu, 0, size)
	values := make([]ModelMenu, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetMenuListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetMenuListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenuListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMenuListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMenuListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetMenuListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMenuListResp(%+v)", *p)

}

func (p *GetMenuListResp) DeepEqual(ano *GetMenuListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetMenuListResp) Field1DeepEqual(src []*ModelMenu) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetMenuListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type ImportCourseApplyReq struct {
	FileUploadId string `thrift:"file_upload_id,1" frugal:"1,default,string" json:"file_upload_id" binding:"required"`
	AcademicYear string `thrift:"academic_year,2" frugal:"2,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,3" frugal:"3,default,string" json:"semester" binding:"required"`
}

func NewImportCourseApplyReq() *ImportCourseApplyReq {
	return &ImportCourseApplyReq{}
}

func (p *ImportCourseApplyReq) InitDefault() {
}

func (p *ImportCourseApplyReq) GetFileUploadId() (v string) {
	return p.FileUploadId
}

func (p *ImportCourseApplyReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ImportCourseApplyReq) GetSemester() (v string) {
	return p.Semester
}
func (p *ImportCourseApplyReq) SetFileUploadId(val string) {
	p.FileUploadId = val
}
func (p *ImportCourseApplyReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ImportCourseApplyReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ImportCourseApplyReq = map[int16]string{
	1: "file_upload_id",
	2: "academic_year",
	3: "semester",
}

func (p *ImportCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileUploadId = _field
	return nil
}
func (p *ImportCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ImportCourseApplyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ImportCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_upload_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileUploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ImportCourseApplyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ImportCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportCourseApplyReq(%+v)", *p)

}

func (p *ImportCourseApplyReq) DeepEqual(ano *ImportCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileUploadId) {
		return false
	}
	if !p.Field2DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field3DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ImportCourseApplyReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileUploadId, src) != 0 {
		return false
	}
	return true
}
func (p *ImportCourseApplyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ImportCourseApplyReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ImportUserReq struct {
	FileUploadId string `thrift:"file_upload_id,1" frugal:"1,default,string" json:"file_upload_id" binding:"required"`
}

func NewImportUserReq() *ImportUserReq {
	return &ImportUserReq{}
}

func (p *ImportUserReq) InitDefault() {
}

func (p *ImportUserReq) GetFileUploadId() (v string) {
	return p.FileUploadId
}
func (p *ImportUserReq) SetFileUploadId(val string) {
	p.FileUploadId = val
}

var fieldIDToName_ImportUserReq = map[int16]string{
	1: "file_upload_id",
}

func (p *ImportUserReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportUserReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportUserReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileUploadId = _field
	return nil
}

func (p *ImportUserReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportUserReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_upload_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileUploadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportUserReq(%+v)", *p)

}

func (p *ImportUserReq) DeepEqual(ano *ImportUserReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileUploadId) {
		return false
	}
	return true
}

func (p *ImportUserReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileUploadId, src) != 0 {
		return false
	}
	return true
}

type ImportUserResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportUserResp() *ImportUserResp {
	return &ImportUserResp{}
}

func (p *ImportUserResp) InitDefault() {
}

func (p *ImportUserResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportUserResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportUserResp = map[int16]string{
	1: "task_key",
}

func (p *ImportUserResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportUserResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportUserResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportUserResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportUserResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportUserResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportUserResp(%+v)", *p)

}

func (p *ImportUserResp) DeepEqual(ano *ImportUserResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportUserResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type ImportCourseApplyResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewImportCourseApplyResp() *ImportCourseApplyResp {
	return &ImportCourseApplyResp{}
}

func (p *ImportCourseApplyResp) InitDefault() {
}

func (p *ImportCourseApplyResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ImportCourseApplyResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ImportCourseApplyResp = map[int16]string{
	1: "task_key",
}

func (p *ImportCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportCourseApplyResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportCourseApplyResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ImportCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportCourseApplyResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportCourseApplyResp(%+v)", *p)

}

func (p *ImportCourseApplyResp) DeepEqual(ano *ImportCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ImportCourseApplyResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type GetCourseApplyListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetCourseApplyListReq() *GetCourseApplyListReq {
	return &GetCourseApplyListReq{}
}

func (p *GetCourseApplyListReq) InitDefault() {
}

var GetCourseApplyListReq_ListOption_DEFAULT *base.ListOption

func (p *GetCourseApplyListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetCourseApplyListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetCourseApplyListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetCourseApplyListReq = map[int16]string{
	1: "list_option",
}

func (p *GetCourseApplyListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetCourseApplyListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseApplyListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseApplyListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetCourseApplyListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplyListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseApplyListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseApplyListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseApplyListReq(%+v)", *p)

}

func (p *GetCourseApplyListReq) DeepEqual(ano *GetCourseApplyListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetCourseApplyListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetCourseApplyListResp struct {
	List     []*ModelCourseApply `thrift:"list,1" frugal:"1,default,list<ModelCourseApply>" json:"list"`
	Paginate *base.Paginate      `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetCourseApplyListResp() *GetCourseApplyListResp {
	return &GetCourseApplyListResp{}
}

func (p *GetCourseApplyListResp) InitDefault() {
}

func (p *GetCourseApplyListResp) GetList() (v []*ModelCourseApply) {
	return p.List
}

var GetCourseApplyListResp_Paginate_DEFAULT *base.Paginate

func (p *GetCourseApplyListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetCourseApplyListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetCourseApplyListResp) SetList(val []*ModelCourseApply) {
	p.List = val
}
func (p *GetCourseApplyListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetCourseApplyListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetCourseApplyListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetCourseApplyListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCourseApplyListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCourseApplyListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourseApply, 0, size)
	values := make([]ModelCourseApply, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetCourseApplyListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetCourseApplyListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplyListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCourseApplyListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCourseApplyListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCourseApplyListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCourseApplyListResp(%+v)", *p)

}

func (p *GetCourseApplyListResp) DeepEqual(ano *GetCourseApplyListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetCourseApplyListResp) Field1DeepEqual(src []*ModelCourseApply) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCourseApplyListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfCourseApplyListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetSelfCourseApplyListReq() *GetSelfCourseApplyListReq {
	return &GetSelfCourseApplyListReq{}
}

func (p *GetSelfCourseApplyListReq) InitDefault() {
}

var GetSelfCourseApplyListReq_ListOption_DEFAULT *base.ListOption

func (p *GetSelfCourseApplyListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetSelfCourseApplyListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetSelfCourseApplyListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetSelfCourseApplyListReq = map[int16]string{
	1: "list_option",
}

func (p *GetSelfCourseApplyListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetSelfCourseApplyListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseApplyListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseApplyListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetSelfCourseApplyListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplyListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseApplyListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseApplyListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseApplyListReq(%+v)", *p)

}

func (p *GetSelfCourseApplyListReq) DeepEqual(ano *GetSelfCourseApplyListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetSelfCourseApplyListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelfCourseApplyListResp struct {
	List     []*ModelCourseApply `thrift:"list,1" frugal:"1,default,list<ModelCourseApply>" json:"list"`
	Paginate *base.Paginate      `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetSelfCourseApplyListResp() *GetSelfCourseApplyListResp {
	return &GetSelfCourseApplyListResp{}
}

func (p *GetSelfCourseApplyListResp) InitDefault() {
}

func (p *GetSelfCourseApplyListResp) GetList() (v []*ModelCourseApply) {
	return p.List
}

var GetSelfCourseApplyListResp_Paginate_DEFAULT *base.Paginate

func (p *GetSelfCourseApplyListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetSelfCourseApplyListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetSelfCourseApplyListResp) SetList(val []*ModelCourseApply) {
	p.List = val
}
func (p *GetSelfCourseApplyListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetSelfCourseApplyListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetSelfCourseApplyListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetSelfCourseApplyListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelfCourseApplyListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelfCourseApplyListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelCourseApply, 0, size)
	values := make([]ModelCourseApply, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetSelfCourseApplyListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetSelfCourseApplyListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplyListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelfCourseApplyListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelfCourseApplyListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSelfCourseApplyListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelfCourseApplyListResp(%+v)", *p)

}

func (p *GetSelfCourseApplyListResp) DeepEqual(ano *GetSelfCourseApplyListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetSelfCourseApplyListResp) Field1DeepEqual(src []*ModelCourseApply) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSelfCourseApplyListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteCourseApplyReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteCourseApplyReq() *DeleteCourseApplyReq {
	return &DeleteCourseApplyReq{}
}

func (p *DeleteCourseApplyReq) InitDefault() {
}

func (p *DeleteCourseApplyReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteCourseApplyReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteCourseApplyReq = map[int16]string{
	1: "ids",
}

func (p *DeleteCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseApplyReq(%+v)", *p)

}

func (p *DeleteCourseApplyReq) DeepEqual(ano *DeleteCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteCourseApplyReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteCourseApplyResp struct {
}

func NewDeleteCourseApplyResp() *DeleteCourseApplyResp {
	return &DeleteCourseApplyResp{}
}

func (p *DeleteCourseApplyResp) InitDefault() {
}

var fieldIDToName_DeleteCourseApplyResp = map[int16]string{}

func (p *DeleteCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCourseApplyResp(%+v)", *p)

}

func (p *DeleteCourseApplyResp) DeepEqual(ano *DeleteCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ApproveCourseApplyReq struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	Examination int32  `thrift:"examination,2" frugal:"2,default,i32" json:"examination" binding:"required"`
	Opinion     string `thrift:"opinion,3" frugal:"3,default,string" json:"opinion"`
}

func NewApproveCourseApplyReq() *ApproveCourseApplyReq {
	return &ApproveCourseApplyReq{}
}

func (p *ApproveCourseApplyReq) InitDefault() {
}

func (p *ApproveCourseApplyReq) GetId() (v int32) {
	return p.Id
}

func (p *ApproveCourseApplyReq) GetExamination() (v int32) {
	return p.Examination
}

func (p *ApproveCourseApplyReq) GetOpinion() (v string) {
	return p.Opinion
}
func (p *ApproveCourseApplyReq) SetId(val int32) {
	p.Id = val
}
func (p *ApproveCourseApplyReq) SetExamination(val int32) {
	p.Examination = val
}
func (p *ApproveCourseApplyReq) SetOpinion(val string) {
	p.Opinion = val
}

var fieldIDToName_ApproveCourseApplyReq = map[int16]string{
	1: "id",
	2: "examination",
	3: "opinion",
}

func (p *ApproveCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApproveCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApproveCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ApproveCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Examination = _field
	return nil
}
func (p *ApproveCourseApplyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Opinion = _field
	return nil
}

func (p *ApproveCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApproveCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApproveCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApproveCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("examination", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Examination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ApproveCourseApplyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opinion", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Opinion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ApproveCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveCourseApplyReq(%+v)", *p)

}

func (p *ApproveCourseApplyReq) DeepEqual(ano *ApproveCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Examination) {
		return false
	}
	if !p.Field3DeepEqual(ano.Opinion) {
		return false
	}
	return true
}

func (p *ApproveCourseApplyReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ApproveCourseApplyReq) Field2DeepEqual(src int32) bool {

	if p.Examination != src {
		return false
	}
	return true
}
func (p *ApproveCourseApplyReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Opinion, src) != 0 {
		return false
	}
	return true
}

type ApproveCourseApplyResp struct {
}

func NewApproveCourseApplyResp() *ApproveCourseApplyResp {
	return &ApproveCourseApplyResp{}
}

func (p *ApproveCourseApplyResp) InitDefault() {
}

var fieldIDToName_ApproveCourseApplyResp = map[int16]string{}

func (p *ApproveCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApproveCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ApproveCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApproveCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveCourseApplyResp(%+v)", *p)

}

func (p *ApproveCourseApplyResp) DeepEqual(ano *ApproveCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ResetCourseApplyReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
}

func NewResetCourseApplyReq() *ResetCourseApplyReq {
	return &ResetCourseApplyReq{}
}

func (p *ResetCourseApplyReq) InitDefault() {
}

func (p *ResetCourseApplyReq) GetId() (v int32) {
	return p.Id
}
func (p *ResetCourseApplyReq) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_ResetCourseApplyReq = map[int16]string{
	1: "id",
}

func (p *ResetCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResetCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResetCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *ResetCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResetCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResetCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetCourseApplyReq(%+v)", *p)

}

func (p *ResetCourseApplyReq) DeepEqual(ano *ResetCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *ResetCourseApplyReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type ResetCourseApplyResp struct {
}

func NewResetCourseApplyResp() *ResetCourseApplyResp {
	return &ResetCourseApplyResp{}
}

func (p *ResetCourseApplyResp) InitDefault() {
}

var fieldIDToName_ResetCourseApplyResp = map[int16]string{}

func (p *ResetCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResetCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ResetCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResetCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetCourseApplyResp(%+v)", *p)

}

func (p *ResetCourseApplyResp) DeepEqual(ano *ResetCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type FillCourseApplyReq struct {
	Id                      int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	OnlinePlatformName      string `thrift:"online_platform_name,2" frugal:"2,default,string" json:"online_platform_name" binding:"required"`
	OtherOnlinePlatformName string `thrift:"other_online_platform_name,3" frugal:"3,default,string" json:"other_online_platform_name"`
	TeachingResourceName    string `thrift:"teaching_resource_name,4" frugal:"4,default,string" json:"teaching_resource_name"`
	IsBuildPartner          int32  `thrift:"is_build_partner,5" frugal:"5,default,i32" json:"is_build_partner" binding:"required"`
	IsSelfProperty          int32  `thrift:"is_self_property,6" frugal:"6,default,i32" json:"is_self_property" binding:"required"`
	TotalHours              int32  `thrift:"total_hours,7" frugal:"7,default,i32" json:"total_hours" binding:"required"`
	TeamTeacherName         string `thrift:"team_teacher_name,8" frugal:"8,default,string" json:"team_teacher_name" `
	ResourceBuildPartner    string `thrift:"resource_build_partner,9" frugal:"9,default,string" json:"resource_build_partner"`
	Remark                  string `thrift:"remark,10" frugal:"10,default,string" json:"remark"`
	Url                     string `thrift:"url,11" frugal:"11,default,string" json:"url"`
	IsnotAccount            string `thrift:"isnot_account,12" frugal:"12,default,string" json:"isnot_account"`
	IsnotPassword           string `thrift:"isnot_password,13" frugal:"13,default,string" json:"isnot_password"`
	IsUseOtherResource      int32  `thrift:"is_use_other_resource,14" frugal:"14,default,i32" json:"is_use_other_resource"`
	OtherResourceName       string `thrift:"other_resource_name,15" frugal:"15,default,string" json:"other_resource_name"`
}

func NewFillCourseApplyReq() *FillCourseApplyReq {
	return &FillCourseApplyReq{}
}

func (p *FillCourseApplyReq) InitDefault() {
}

func (p *FillCourseApplyReq) GetId() (v int32) {
	return p.Id
}

func (p *FillCourseApplyReq) GetOnlinePlatformName() (v string) {
	return p.OnlinePlatformName
}

func (p *FillCourseApplyReq) GetOtherOnlinePlatformName() (v string) {
	return p.OtherOnlinePlatformName
}

func (p *FillCourseApplyReq) GetTeachingResourceName() (v string) {
	return p.TeachingResourceName
}

func (p *FillCourseApplyReq) GetIsBuildPartner() (v int32) {
	return p.IsBuildPartner
}

func (p *FillCourseApplyReq) GetIsSelfProperty() (v int32) {
	return p.IsSelfProperty
}

func (p *FillCourseApplyReq) GetTotalHours() (v int32) {
	return p.TotalHours
}

func (p *FillCourseApplyReq) GetTeamTeacherName() (v string) {
	return p.TeamTeacherName
}

func (p *FillCourseApplyReq) GetResourceBuildPartner() (v string) {
	return p.ResourceBuildPartner
}

func (p *FillCourseApplyReq) GetRemark() (v string) {
	return p.Remark
}

func (p *FillCourseApplyReq) GetUrl() (v string) {
	return p.Url
}

func (p *FillCourseApplyReq) GetIsnotAccount() (v string) {
	return p.IsnotAccount
}

func (p *FillCourseApplyReq) GetIsnotPassword() (v string) {
	return p.IsnotPassword
}

func (p *FillCourseApplyReq) GetIsUseOtherResource() (v int32) {
	return p.IsUseOtherResource
}

func (p *FillCourseApplyReq) GetOtherResourceName() (v string) {
	return p.OtherResourceName
}
func (p *FillCourseApplyReq) SetId(val int32) {
	p.Id = val
}
func (p *FillCourseApplyReq) SetOnlinePlatformName(val string) {
	p.OnlinePlatformName = val
}
func (p *FillCourseApplyReq) SetOtherOnlinePlatformName(val string) {
	p.OtherOnlinePlatformName = val
}
func (p *FillCourseApplyReq) SetTeachingResourceName(val string) {
	p.TeachingResourceName = val
}
func (p *FillCourseApplyReq) SetIsBuildPartner(val int32) {
	p.IsBuildPartner = val
}
func (p *FillCourseApplyReq) SetIsSelfProperty(val int32) {
	p.IsSelfProperty = val
}
func (p *FillCourseApplyReq) SetTotalHours(val int32) {
	p.TotalHours = val
}
func (p *FillCourseApplyReq) SetTeamTeacherName(val string) {
	p.TeamTeacherName = val
}
func (p *FillCourseApplyReq) SetResourceBuildPartner(val string) {
	p.ResourceBuildPartner = val
}
func (p *FillCourseApplyReq) SetRemark(val string) {
	p.Remark = val
}
func (p *FillCourseApplyReq) SetUrl(val string) {
	p.Url = val
}
func (p *FillCourseApplyReq) SetIsnotAccount(val string) {
	p.IsnotAccount = val
}
func (p *FillCourseApplyReq) SetIsnotPassword(val string) {
	p.IsnotPassword = val
}
func (p *FillCourseApplyReq) SetIsUseOtherResource(val int32) {
	p.IsUseOtherResource = val
}
func (p *FillCourseApplyReq) SetOtherResourceName(val string) {
	p.OtherResourceName = val
}

var fieldIDToName_FillCourseApplyReq = map[int16]string{
	1:  "id",
	2:  "online_platform_name",
	3:  "other_online_platform_name",
	4:  "teaching_resource_name",
	5:  "is_build_partner",
	6:  "is_self_property",
	7:  "total_hours",
	8:  "team_teacher_name",
	9:  "resource_build_partner",
	10: "remark",
	11: "url",
	12: "isnot_account",
	13: "isnot_password",
	14: "is_use_other_resource",
	15: "other_resource_name",
}

func (p *FillCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FillCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FillCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OnlinePlatformName = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherOnlinePlatformName = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachingResourceName = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsBuildPartner = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSelfProperty = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalHours = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeamTeacherName = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResourceBuildPartner = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotAccount = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotPassword = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField14(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsUseOtherResource = _field
	return nil
}
func (p *FillCourseApplyReq) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherResourceName = _field
	return nil
}

func (p *FillCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("online_platform_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_online_platform_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherOnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teaching_resource_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachingResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_build_partner", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_self_property", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsSelfProperty); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_hours", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalHours); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("team_teacher_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeamTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resource_build_partner", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResourceBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_account", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_password", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotPassword); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_use_other_resource", thrift.I32, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsUseOtherResource); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *FillCourseApplyReq) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_resource_name", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *FillCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillCourseApplyReq(%+v)", *p)

}

func (p *FillCourseApplyReq) DeepEqual(ano *FillCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.OnlinePlatformName) {
		return false
	}
	if !p.Field3DeepEqual(ano.OtherOnlinePlatformName) {
		return false
	}
	if !p.Field4DeepEqual(ano.TeachingResourceName) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsBuildPartner) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsSelfProperty) {
		return false
	}
	if !p.Field7DeepEqual(ano.TotalHours) {
		return false
	}
	if !p.Field8DeepEqual(ano.TeamTeacherName) {
		return false
	}
	if !p.Field9DeepEqual(ano.ResourceBuildPartner) {
		return false
	}
	if !p.Field10DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field11DeepEqual(ano.Url) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsnotAccount) {
		return false
	}
	if !p.Field13DeepEqual(ano.IsnotPassword) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsUseOtherResource) {
		return false
	}
	if !p.Field15DeepEqual(ano.OtherResourceName) {
		return false
	}
	return true
}

func (p *FillCourseApplyReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OtherOnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TeachingResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field5DeepEqual(src int32) bool {

	if p.IsBuildPartner != src {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field6DeepEqual(src int32) bool {

	if p.IsSelfProperty != src {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field7DeepEqual(src int32) bool {

	if p.TotalHours != src {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TeamTeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.ResourceBuildPartner, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.IsnotAccount, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field13DeepEqual(src string) bool {

	if strings.Compare(p.IsnotPassword, src) != 0 {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field14DeepEqual(src int32) bool {

	if p.IsUseOtherResource != src {
		return false
	}
	return true
}
func (p *FillCourseApplyReq) Field15DeepEqual(src string) bool {

	if strings.Compare(p.OtherResourceName, src) != 0 {
		return false
	}
	return true
}

type FillCourseApplyResp struct {
}

func NewFillCourseApplyResp() *FillCourseApplyResp {
	return &FillCourseApplyResp{}
}

func (p *FillCourseApplyResp) InitDefault() {
}

var fieldIDToName_FillCourseApplyResp = map[int16]string{}

func (p *FillCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FillCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("FillCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FillCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillCourseApplyResp(%+v)", *p)

}

func (p *FillCourseApplyResp) DeepEqual(ano *FillCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ExportSelfCheckTableReq struct {
	CourseId int32 `thrift:"course_id,1" frugal:"1,default,i32" json:"course_id" binding:"required"`
}

func NewExportSelfCheckTableReq() *ExportSelfCheckTableReq {
	return &ExportSelfCheckTableReq{}
}

func (p *ExportSelfCheckTableReq) InitDefault() {
}

func (p *ExportSelfCheckTableReq) GetCourseId() (v int32) {
	return p.CourseId
}
func (p *ExportSelfCheckTableReq) SetCourseId(val int32) {
	p.CourseId = val
}

var fieldIDToName_ExportSelfCheckTableReq = map[int16]string{
	1: "course_id",
}

func (p *ExportSelfCheckTableReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportSelfCheckTableReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportSelfCheckTableReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseId = _field
	return nil
}

func (p *ExportSelfCheckTableReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportSelfCheckTableReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportSelfCheckTableReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportSelfCheckTableReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportSelfCheckTableReq(%+v)", *p)

}

func (p *ExportSelfCheckTableReq) DeepEqual(ano *ExportSelfCheckTableReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CourseId) {
		return false
	}
	return true
}

func (p *ExportSelfCheckTableReq) Field1DeepEqual(src int32) bool {

	if p.CourseId != src {
		return false
	}
	return true
}

type ExportSelfCheckTableResp struct {
	Url      string `thrift:"url,1" frugal:"1,default,string" json:"url"`
	FileName string `thrift:"file_name,2" frugal:"2,default,string" json:"file_name"`
}

func NewExportSelfCheckTableResp() *ExportSelfCheckTableResp {
	return &ExportSelfCheckTableResp{}
}

func (p *ExportSelfCheckTableResp) InitDefault() {
}

func (p *ExportSelfCheckTableResp) GetUrl() (v string) {
	return p.Url
}

func (p *ExportSelfCheckTableResp) GetFileName() (v string) {
	return p.FileName
}
func (p *ExportSelfCheckTableResp) SetUrl(val string) {
	p.Url = val
}
func (p *ExportSelfCheckTableResp) SetFileName(val string) {
	p.FileName = val
}

var fieldIDToName_ExportSelfCheckTableResp = map[int16]string{
	1: "url",
	2: "file_name",
}

func (p *ExportSelfCheckTableResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportSelfCheckTableResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportSelfCheckTableResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *ExportSelfCheckTableResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileName = _field
	return nil
}

func (p *ExportSelfCheckTableResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportSelfCheckTableResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportSelfCheckTableResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportSelfCheckTableResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportSelfCheckTableResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportSelfCheckTableResp(%+v)", *p)

}

func (p *ExportSelfCheckTableResp) DeepEqual(ano *ExportSelfCheckTableResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	if !p.Field2DeepEqual(ano.FileName) {
		return false
	}
	return true
}

func (p *ExportSelfCheckTableResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *ExportSelfCheckTableResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FileName, src) != 0 {
		return false
	}
	return true
}

type ExportResponsibilityReq struct {
	TeacherName  string `thrift:"teacher_name,1" frugal:"1,default,string" json:"teacher_name"`
	AcademicYear string `thrift:"academic_year,2" frugal:"2,default,string" json:"academic_year"`
	Semester     string `thrift:"semester,3" frugal:"3,default,string" json:"semester"`
}

func NewExportResponsibilityReq() *ExportResponsibilityReq {
	return &ExportResponsibilityReq{}
}

func (p *ExportResponsibilityReq) InitDefault() {
}

func (p *ExportResponsibilityReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ExportResponsibilityReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ExportResponsibilityReq) GetSemester() (v string) {
	return p.Semester
}
func (p *ExportResponsibilityReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ExportResponsibilityReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ExportResponsibilityReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ExportResponsibilityReq = map[int16]string{
	1: "teacher_name",
	2: "academic_year",
	3: "semester",
}

func (p *ExportResponsibilityReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportResponsibilityReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportResponsibilityReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ExportResponsibilityReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ExportResponsibilityReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ExportResponsibilityReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportResponsibilityReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportResponsibilityReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportResponsibilityReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportResponsibilityReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ExportResponsibilityReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportResponsibilityReq(%+v)", *p)

}

func (p *ExportResponsibilityReq) DeepEqual(ano *ExportResponsibilityReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field2DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field3DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ExportResponsibilityReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ExportResponsibilityReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ExportResponsibilityReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ExportResponsibilityResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportResponsibilityResp() *ExportResponsibilityResp {
	return &ExportResponsibilityResp{}
}

func (p *ExportResponsibilityResp) InitDefault() {
}

func (p *ExportResponsibilityResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportResponsibilityResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportResponsibilityResp = map[int16]string{
	1: "task_key",
}

func (p *ExportResponsibilityResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportResponsibilityResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportResponsibilityResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportResponsibilityResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportResponsibilityResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportResponsibilityResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportResponsibilityResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportResponsibilityResp(%+v)", *p)

}

func (p *ExportResponsibilityResp) DeepEqual(ano *ExportResponsibilityResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportResponsibilityResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type ExportAllSelfCheckTableReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
}

func NewExportAllSelfCheckTableReq() *ExportAllSelfCheckTableReq {
	return &ExportAllSelfCheckTableReq{}
}

func (p *ExportAllSelfCheckTableReq) InitDefault() {
}

func (p *ExportAllSelfCheckTableReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ExportAllSelfCheckTableReq) GetSemester() (v string) {
	return p.Semester
}
func (p *ExportAllSelfCheckTableReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ExportAllSelfCheckTableReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ExportAllSelfCheckTableReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *ExportAllSelfCheckTableReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportAllSelfCheckTableReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportAllSelfCheckTableReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ExportAllSelfCheckTableReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ExportAllSelfCheckTableReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportAllSelfCheckTableReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportAllSelfCheckTableReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportAllSelfCheckTableReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportAllSelfCheckTableReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportAllSelfCheckTableReq(%+v)", *p)

}

func (p *ExportAllSelfCheckTableReq) DeepEqual(ano *ExportAllSelfCheckTableReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ExportAllSelfCheckTableReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ExportAllSelfCheckTableReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ExportAllSelfCheckTableResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportAllSelfCheckTableResp() *ExportAllSelfCheckTableResp {
	return &ExportAllSelfCheckTableResp{}
}

func (p *ExportAllSelfCheckTableResp) InitDefault() {
}

func (p *ExportAllSelfCheckTableResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportAllSelfCheckTableResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportAllSelfCheckTableResp = map[int16]string{
	1: "task_key",
}

func (p *ExportAllSelfCheckTableResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportAllSelfCheckTableResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportAllSelfCheckTableResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportAllSelfCheckTableResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportAllSelfCheckTableResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportAllSelfCheckTableResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportAllSelfCheckTableResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportAllSelfCheckTableResp(%+v)", *p)

}

func (p *ExportAllSelfCheckTableResp) DeepEqual(ano *ExportAllSelfCheckTableResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportAllSelfCheckTableResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type UpdateCourseApplyReq struct {
	Id                      int32   `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	CourseName              string  `thrift:"course_name,2" frugal:"2,default,string" json:"course_name" binding:"required"`
	CourseNature            string  `thrift:"course_nature,3" frugal:"3,default,string" json:"course_nature"`
	OfficeId                int32   `thrift:"office_id,4" frugal:"4,default,i32" json:"office_id"`
	ClassId                 int32   `thrift:"class_id,5" frugal:"5,default,i32" json:"class_id"`
	Department              string  `thrift:"department,6" frugal:"6,default,string" json:"department"`
	TeachClassName          string  `thrift:"teach_class_name,7" frugal:"7,default,string" json:"teach_class_name"`
	TeacherName             string  `thrift:"teacher_name,8" frugal:"8,default,string" json:"teacher_name"`
	TotalHours              int64   `thrift:"total_hours,9" frugal:"9,default,i64" json:"total_hours"`
	TotalStudents           int64   `thrift:"total_students,10" frugal:"10,default,i64" json:"total_students"`
	Credit                  float64 `thrift:"credit,11" frugal:"11,default,double" json:"credit"`
	StartWeek               string  `thrift:"start_week,12" frugal:"12,default,string" json:"start_week"`
	OnlinePlatformName      string  `thrift:"online_platform_name,13" frugal:"13,default,string" json:"online_platform_name"`
	TeacherId               string  `thrift:"teacher_id,14" frugal:"14,default,string" json:"teacher_id" `
	OtherOnlinePlatformName string  `thrift:"other_online_platform_name,15" frugal:"15,default,string" json:"other_online_platform_name" `
	TeachingResourceName    string  `thrift:"teaching_resource_name,16" frugal:"16,default,string" json:"teaching_resource_name" `
	IsBuildPartner          int32   `thrift:"is_build_partner,17" frugal:"17,default,i32" json:"is_build_partner"`
	IsSelfProperty          int32   `thrift:"is_self_property,18" frugal:"18,default,i32" json:"is_self_property" `
	IsUseOtherResource      int32   `thrift:"is_use_other_resource,19" frugal:"19,default,i32" json:"is_use_other_resource" `
	OtherResourceName       string  `thrift:"other_resource_name,20" frugal:"20,default,string" json:"other_resource_name" `
	ResourceBuildPartner    string  `thrift:"resource_build_partner,21" frugal:"21,default,string" json:"resource_build_partner"`
	TeamTeacherName         string  `thrift:"team_teacher_name,22" frugal:"22,default,string" json:"team_teacher_name" `
	Remark                  string  `thrift:"remark,23" frugal:"23,default,string" json:"remark"`
	Url                     string  `thrift:"url,24" frugal:"24,default,string" json:"url" `
	IsnotAccount            string  `thrift:"isnot_account,25" frugal:"25,default,string" json:"isnot_account" `
	IsnotPassword           string  `thrift:"isnot_password,26" frugal:"26,default,string" json:"isnot_password"`
}

func NewUpdateCourseApplyReq() *UpdateCourseApplyReq {
	return &UpdateCourseApplyReq{}
}

func (p *UpdateCourseApplyReq) InitDefault() {
}

func (p *UpdateCourseApplyReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateCourseApplyReq) GetCourseName() (v string) {
	return p.CourseName
}

func (p *UpdateCourseApplyReq) GetCourseNature() (v string) {
	return p.CourseNature
}

func (p *UpdateCourseApplyReq) GetOfficeId() (v int32) {
	return p.OfficeId
}

func (p *UpdateCourseApplyReq) GetClassId() (v int32) {
	return p.ClassId
}

func (p *UpdateCourseApplyReq) GetDepartment() (v string) {
	return p.Department
}

func (p *UpdateCourseApplyReq) GetTeachClassName() (v string) {
	return p.TeachClassName
}

func (p *UpdateCourseApplyReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *UpdateCourseApplyReq) GetTotalHours() (v int64) {
	return p.TotalHours
}

func (p *UpdateCourseApplyReq) GetTotalStudents() (v int64) {
	return p.TotalStudents
}

func (p *UpdateCourseApplyReq) GetCredit() (v float64) {
	return p.Credit
}

func (p *UpdateCourseApplyReq) GetStartWeek() (v string) {
	return p.StartWeek
}

func (p *UpdateCourseApplyReq) GetOnlinePlatformName() (v string) {
	return p.OnlinePlatformName
}

func (p *UpdateCourseApplyReq) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *UpdateCourseApplyReq) GetOtherOnlinePlatformName() (v string) {
	return p.OtherOnlinePlatformName
}

func (p *UpdateCourseApplyReq) GetTeachingResourceName() (v string) {
	return p.TeachingResourceName
}

func (p *UpdateCourseApplyReq) GetIsBuildPartner() (v int32) {
	return p.IsBuildPartner
}

func (p *UpdateCourseApplyReq) GetIsSelfProperty() (v int32) {
	return p.IsSelfProperty
}

func (p *UpdateCourseApplyReq) GetIsUseOtherResource() (v int32) {
	return p.IsUseOtherResource
}

func (p *UpdateCourseApplyReq) GetOtherResourceName() (v string) {
	return p.OtherResourceName
}

func (p *UpdateCourseApplyReq) GetResourceBuildPartner() (v string) {
	return p.ResourceBuildPartner
}

func (p *UpdateCourseApplyReq) GetTeamTeacherName() (v string) {
	return p.TeamTeacherName
}

func (p *UpdateCourseApplyReq) GetRemark() (v string) {
	return p.Remark
}

func (p *UpdateCourseApplyReq) GetUrl() (v string) {
	return p.Url
}

func (p *UpdateCourseApplyReq) GetIsnotAccount() (v string) {
	return p.IsnotAccount
}

func (p *UpdateCourseApplyReq) GetIsnotPassword() (v string) {
	return p.IsnotPassword
}
func (p *UpdateCourseApplyReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateCourseApplyReq) SetCourseName(val string) {
	p.CourseName = val
}
func (p *UpdateCourseApplyReq) SetCourseNature(val string) {
	p.CourseNature = val
}
func (p *UpdateCourseApplyReq) SetOfficeId(val int32) {
	p.OfficeId = val
}
func (p *UpdateCourseApplyReq) SetClassId(val int32) {
	p.ClassId = val
}
func (p *UpdateCourseApplyReq) SetDepartment(val string) {
	p.Department = val
}
func (p *UpdateCourseApplyReq) SetTeachClassName(val string) {
	p.TeachClassName = val
}
func (p *UpdateCourseApplyReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *UpdateCourseApplyReq) SetTotalHours(val int64) {
	p.TotalHours = val
}
func (p *UpdateCourseApplyReq) SetTotalStudents(val int64) {
	p.TotalStudents = val
}
func (p *UpdateCourseApplyReq) SetCredit(val float64) {
	p.Credit = val
}
func (p *UpdateCourseApplyReq) SetStartWeek(val string) {
	p.StartWeek = val
}
func (p *UpdateCourseApplyReq) SetOnlinePlatformName(val string) {
	p.OnlinePlatformName = val
}
func (p *UpdateCourseApplyReq) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *UpdateCourseApplyReq) SetOtherOnlinePlatformName(val string) {
	p.OtherOnlinePlatformName = val
}
func (p *UpdateCourseApplyReq) SetTeachingResourceName(val string) {
	p.TeachingResourceName = val
}
func (p *UpdateCourseApplyReq) SetIsBuildPartner(val int32) {
	p.IsBuildPartner = val
}
func (p *UpdateCourseApplyReq) SetIsSelfProperty(val int32) {
	p.IsSelfProperty = val
}
func (p *UpdateCourseApplyReq) SetIsUseOtherResource(val int32) {
	p.IsUseOtherResource = val
}
func (p *UpdateCourseApplyReq) SetOtherResourceName(val string) {
	p.OtherResourceName = val
}
func (p *UpdateCourseApplyReq) SetResourceBuildPartner(val string) {
	p.ResourceBuildPartner = val
}
func (p *UpdateCourseApplyReq) SetTeamTeacherName(val string) {
	p.TeamTeacherName = val
}
func (p *UpdateCourseApplyReq) SetRemark(val string) {
	p.Remark = val
}
func (p *UpdateCourseApplyReq) SetUrl(val string) {
	p.Url = val
}
func (p *UpdateCourseApplyReq) SetIsnotAccount(val string) {
	p.IsnotAccount = val
}
func (p *UpdateCourseApplyReq) SetIsnotPassword(val string) {
	p.IsnotPassword = val
}

var fieldIDToName_UpdateCourseApplyReq = map[int16]string{
	1:  "id",
	2:  "course_name",
	3:  "course_nature",
	4:  "office_id",
	5:  "class_id",
	6:  "department",
	7:  "teach_class_name",
	8:  "teacher_name",
	9:  "total_hours",
	10: "total_students",
	11: "credit",
	12: "start_week",
	13: "online_platform_name",
	14: "teacher_id",
	15: "other_online_platform_name",
	16: "teaching_resource_name",
	17: "is_build_partner",
	18: "is_self_property",
	19: "is_use_other_resource",
	20: "other_resource_name",
	21: "resource_build_partner",
	22: "team_teacher_name",
	23: "remark",
	24: "url",
	25: "isnot_account",
	26: "isnot_password",
}

func (p *UpdateCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseNature = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OfficeId = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassId = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Department = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClassName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalHours = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalStudents = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField11(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Credit = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OnlinePlatformName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherOnlinePlatformName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachingResourceName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField17(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsBuildPartner = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField18(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSelfProperty = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField19(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsUseOtherResource = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherResourceName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResourceBuildPartner = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeamTeacherName = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotAccount = _field
	return nil
}
func (p *UpdateCourseApplyReq) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotPassword = _field
	return nil
}

func (p *UpdateCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_nature", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseNature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_id", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OfficeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ClassId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Department); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class_name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_hours", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalHours); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_students", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalStudents); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credit", thrift.DOUBLE, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Credit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("online_platform_name", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_online_platform_name", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherOnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teaching_resource_name", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachingResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_build_partner", thrift.I32, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_self_property", thrift.I32, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsSelfProperty); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_use_other_resource", thrift.I32, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsUseOtherResource); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_resource_name", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resource_build_partner", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResourceBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("team_teacher_name", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeamTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_account", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_password", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotPassword); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *UpdateCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCourseApplyReq(%+v)", *p)

}

func (p *UpdateCourseApplyReq) DeepEqual(ano *UpdateCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field3DeepEqual(ano.CourseNature) {
		return false
	}
	if !p.Field4DeepEqual(ano.OfficeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ClassId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Department) {
		return false
	}
	if !p.Field7DeepEqual(ano.TeachClassName) {
		return false
	}
	if !p.Field8DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field9DeepEqual(ano.TotalHours) {
		return false
	}
	if !p.Field10DeepEqual(ano.TotalStudents) {
		return false
	}
	if !p.Field11DeepEqual(ano.Credit) {
		return false
	}
	if !p.Field12DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field13DeepEqual(ano.OnlinePlatformName) {
		return false
	}
	if !p.Field14DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field15DeepEqual(ano.OtherOnlinePlatformName) {
		return false
	}
	if !p.Field16DeepEqual(ano.TeachingResourceName) {
		return false
	}
	if !p.Field17DeepEqual(ano.IsBuildPartner) {
		return false
	}
	if !p.Field18DeepEqual(ano.IsSelfProperty) {
		return false
	}
	if !p.Field19DeepEqual(ano.IsUseOtherResource) {
		return false
	}
	if !p.Field20DeepEqual(ano.OtherResourceName) {
		return false
	}
	if !p.Field21DeepEqual(ano.ResourceBuildPartner) {
		return false
	}
	if !p.Field22DeepEqual(ano.TeamTeacherName) {
		return false
	}
	if !p.Field23DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field24DeepEqual(ano.Url) {
		return false
	}
	if !p.Field25DeepEqual(ano.IsnotAccount) {
		return false
	}
	if !p.Field26DeepEqual(ano.IsnotPassword) {
		return false
	}
	return true
}

func (p *UpdateCourseApplyReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.CourseNature, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field4DeepEqual(src int32) bool {

	if p.OfficeId != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field5DeepEqual(src int32) bool {

	if p.ClassId != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Department, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TeachClassName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field9DeepEqual(src int64) bool {

	if p.TotalHours != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field10DeepEqual(src int64) bool {

	if p.TotalStudents != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field11DeepEqual(src float64) bool {

	if p.Credit != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.StartWeek, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field13DeepEqual(src string) bool {

	if strings.Compare(p.OnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field14DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field15DeepEqual(src string) bool {

	if strings.Compare(p.OtherOnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field16DeepEqual(src string) bool {

	if strings.Compare(p.TeachingResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field17DeepEqual(src int32) bool {

	if p.IsBuildPartner != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field18DeepEqual(src int32) bool {

	if p.IsSelfProperty != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field19DeepEqual(src int32) bool {

	if p.IsUseOtherResource != src {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field20DeepEqual(src string) bool {

	if strings.Compare(p.OtherResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field21DeepEqual(src string) bool {

	if strings.Compare(p.ResourceBuildPartner, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field22DeepEqual(src string) bool {

	if strings.Compare(p.TeamTeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field23DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field24DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field25DeepEqual(src string) bool {

	if strings.Compare(p.IsnotAccount, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateCourseApplyReq) Field26DeepEqual(src string) bool {

	if strings.Compare(p.IsnotPassword, src) != 0 {
		return false
	}
	return true
}

type UpdateCourseApplyResp struct {
}

func NewUpdateCourseApplyResp() *UpdateCourseApplyResp {
	return &UpdateCourseApplyResp{}
}

func (p *UpdateCourseApplyResp) InitDefault() {
}

var fieldIDToName_UpdateCourseApplyResp = map[int16]string{}

func (p *UpdateCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCourseApplyResp(%+v)", *p)

}

func (p *UpdateCourseApplyResp) DeepEqual(ano *UpdateCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ExportCourseApplyReq struct {
	AcademicYear string  `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string  `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
	Fields       []int32 `thrift:"fields,3" frugal:"3,default,list<i32>" json:"fields"`
}

func NewExportCourseApplyReq() *ExportCourseApplyReq {
	return &ExportCourseApplyReq{}
}

func (p *ExportCourseApplyReq) InitDefault() {
}

func (p *ExportCourseApplyReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ExportCourseApplyReq) GetSemester() (v string) {
	return p.Semester
}

func (p *ExportCourseApplyReq) GetFields() (v []int32) {
	return p.Fields
}
func (p *ExportCourseApplyReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ExportCourseApplyReq) SetSemester(val string) {
	p.Semester = val
}
func (p *ExportCourseApplyReq) SetFields(val []int32) {
	p.Fields = val
}

var fieldIDToName_ExportCourseApplyReq = map[int16]string{
	1: "academic_year",
	2: "semester",
	3: "fields",
}

func (p *ExportCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ExportCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ExportCourseApplyReq) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}

func (p *ExportCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportCourseApplyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fields", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Fields)); err != nil {
		return err
	}
	for _, v := range p.Fields {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ExportCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportCourseApplyReq(%+v)", *p)

}

func (p *ExportCourseApplyReq) DeepEqual(ano *ExportCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field3DeepEqual(ano.Fields) {
		return false
	}
	return true
}

func (p *ExportCourseApplyReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ExportCourseApplyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ExportCourseApplyReq) Field3DeepEqual(src []int32) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ExportCourseApplyResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportCourseApplyResp() *ExportCourseApplyResp {
	return &ExportCourseApplyResp{}
}

func (p *ExportCourseApplyResp) InitDefault() {
}

func (p *ExportCourseApplyResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportCourseApplyResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportCourseApplyResp = map[int16]string{
	1: "task_key",
}

func (p *ExportCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportCourseApplyResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportCourseApplyResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportCourseApplyResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportCourseApplyResp(%+v)", *p)

}

func (p *ExportCourseApplyResp) DeepEqual(ano *ExportCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportCourseApplyResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type ExportCourseApplySummaryReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
}

func NewExportCourseApplySummaryReq() *ExportCourseApplySummaryReq {
	return &ExportCourseApplySummaryReq{}
}

func (p *ExportCourseApplySummaryReq) InitDefault() {
}

func (p *ExportCourseApplySummaryReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ExportCourseApplySummaryReq) GetSemester() (v string) {
	return p.Semester
}
func (p *ExportCourseApplySummaryReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ExportCourseApplySummaryReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ExportCourseApplySummaryReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *ExportCourseApplySummaryReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportCourseApplySummaryReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportCourseApplySummaryReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ExportCourseApplySummaryReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ExportCourseApplySummaryReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplySummaryReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportCourseApplySummaryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportCourseApplySummaryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExportCourseApplySummaryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportCourseApplySummaryReq(%+v)", *p)

}

func (p *ExportCourseApplySummaryReq) DeepEqual(ano *ExportCourseApplySummaryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ExportCourseApplySummaryReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ExportCourseApplySummaryReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ExportCourseApplySummaryResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewExportCourseApplySummaryResp() *ExportCourseApplySummaryResp {
	return &ExportCourseApplySummaryResp{}
}

func (p *ExportCourseApplySummaryResp) InitDefault() {
}

func (p *ExportCourseApplySummaryResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *ExportCourseApplySummaryResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_ExportCourseApplySummaryResp = map[int16]string{
	1: "task_key",
}

func (p *ExportCourseApplySummaryResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExportCourseApplySummaryResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExportCourseApplySummaryResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *ExportCourseApplySummaryResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplySummaryResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExportCourseApplySummaryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExportCourseApplySummaryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExportCourseApplySummaryResp(%+v)", *p)

}

func (p *ExportCourseApplySummaryResp) DeepEqual(ano *ExportCourseApplySummaryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *ExportCourseApplySummaryResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type OneKeyApproveCourseApplyReq struct {
	AcademicYear string `thrift:"academic_year,1" frugal:"1,default,string" json:"academic_year" binding:"required"`
	Semester     string `thrift:"semester,2" frugal:"2,default,string" json:"semester" binding:"required"`
}

func NewOneKeyApproveCourseApplyReq() *OneKeyApproveCourseApplyReq {
	return &OneKeyApproveCourseApplyReq{}
}

func (p *OneKeyApproveCourseApplyReq) InitDefault() {
}

func (p *OneKeyApproveCourseApplyReq) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *OneKeyApproveCourseApplyReq) GetSemester() (v string) {
	return p.Semester
}
func (p *OneKeyApproveCourseApplyReq) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *OneKeyApproveCourseApplyReq) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_OneKeyApproveCourseApplyReq = map[int16]string{
	1: "academic_year",
	2: "semester",
}

func (p *OneKeyApproveCourseApplyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OneKeyApproveCourseApplyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *OneKeyApproveCourseApplyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *OneKeyApproveCourseApplyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OneKeyApproveCourseApplyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneKeyApproveCourseApplyReq(%+v)", *p)

}

func (p *OneKeyApproveCourseApplyReq) DeepEqual(ano *OneKeyApproveCourseApplyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field2DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *OneKeyApproveCourseApplyReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *OneKeyApproveCourseApplyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type OneKeyApproveCourseApplyResp struct {
	TaskKey string `thrift:"task_key,1" frugal:"1,default,string" json:"task_key"`
}

func NewOneKeyApproveCourseApplyResp() *OneKeyApproveCourseApplyResp {
	return &OneKeyApproveCourseApplyResp{}
}

func (p *OneKeyApproveCourseApplyResp) InitDefault() {
}

func (p *OneKeyApproveCourseApplyResp) GetTaskKey() (v string) {
	return p.TaskKey
}
func (p *OneKeyApproveCourseApplyResp) SetTaskKey(val string) {
	p.TaskKey = val
}

var fieldIDToName_OneKeyApproveCourseApplyResp = map[int16]string{
	1: "task_key",
}

func (p *OneKeyApproveCourseApplyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OneKeyApproveCourseApplyResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskKey = _field
	return nil
}

func (p *OneKeyApproveCourseApplyResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OneKeyApproveCourseApplyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OneKeyApproveCourseApplyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneKeyApproveCourseApplyResp(%+v)", *p)

}

func (p *OneKeyApproveCourseApplyResp) DeepEqual(ano *OneKeyApproveCourseApplyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskKey) {
		return false
	}
	return true
}

func (p *OneKeyApproveCourseApplyResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TaskKey, src) != 0 {
		return false
	}
	return true
}

type GetClassListReq struct {
	ListOption *base.ListOption `thrift:"list_option,1" frugal:"1,default,base.ListOption" json:"list_option"`
}

func NewGetClassListReq() *GetClassListReq {
	return &GetClassListReq{}
}

func (p *GetClassListReq) InitDefault() {
}

var GetClassListReq_ListOption_DEFAULT *base.ListOption

func (p *GetClassListReq) GetListOption() (v *base.ListOption) {
	if !p.IsSetListOption() {
		return GetClassListReq_ListOption_DEFAULT
	}
	return p.ListOption
}
func (p *GetClassListReq) SetListOption(val *base.ListOption) {
	p.ListOption = val
}

var fieldIDToName_GetClassListReq = map[int16]string{
	1: "list_option",
}

func (p *GetClassListReq) IsSetListOption() bool {
	return p.ListOption != nil
}

func (p *GetClassListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClassListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetClassListReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewListOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ListOption = _field
	return nil
}

func (p *GetClassListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClassListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClassListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list_option", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ListOption.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClassListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClassListReq(%+v)", *p)

}

func (p *GetClassListReq) DeepEqual(ano *GetClassListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ListOption) {
		return false
	}
	return true
}

func (p *GetClassListReq) Field1DeepEqual(src *base.ListOption) bool {

	if !p.ListOption.DeepEqual(src) {
		return false
	}
	return true
}

type GetClassListResp struct {
	List     []*ModelClass  `thrift:"list,1" frugal:"1,default,list<ModelClass>" json:"list"`
	Paginate *base.Paginate `thrift:"paginate,2" frugal:"2,default,base.Paginate" json:"paginate"`
}

func NewGetClassListResp() *GetClassListResp {
	return &GetClassListResp{}
}

func (p *GetClassListResp) InitDefault() {
}

func (p *GetClassListResp) GetList() (v []*ModelClass) {
	return p.List
}

var GetClassListResp_Paginate_DEFAULT *base.Paginate

func (p *GetClassListResp) GetPaginate() (v *base.Paginate) {
	if !p.IsSetPaginate() {
		return GetClassListResp_Paginate_DEFAULT
	}
	return p.Paginate
}
func (p *GetClassListResp) SetList(val []*ModelClass) {
	p.List = val
}
func (p *GetClassListResp) SetPaginate(val *base.Paginate) {
	p.Paginate = val
}

var fieldIDToName_GetClassListResp = map[int16]string{
	1: "list",
	2: "paginate",
}

func (p *GetClassListResp) IsSetPaginate() bool {
	return p.Paginate != nil
}

func (p *GetClassListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClassListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetClassListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelClass, 0, size)
	values := make([]ModelClass, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.List = _field
	return nil
}
func (p *GetClassListResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Paginate = _field
	return nil
}

func (p *GetClassListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClassListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClassListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClassListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paginate", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Paginate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClassListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClassListResp(%+v)", *p)

}

func (p *GetClassListResp) DeepEqual(ano *GetClassListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.List) {
		return false
	}
	if !p.Field2DeepEqual(ano.Paginate) {
		return false
	}
	return true
}

func (p *GetClassListResp) Field1DeepEqual(src []*ModelClass) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetClassListResp) Field2DeepEqual(src *base.Paginate) bool {

	if !p.Paginate.DeepEqual(src) {
		return false
	}
	return true
}

type GetSelectDataReq struct {
}

func NewGetSelectDataReq() *GetSelectDataReq {
	return &GetSelectDataReq{}
}

func (p *GetSelectDataReq) InitDefault() {
}

var fieldIDToName_GetSelectDataReq = map[int16]string{}

func (p *GetSelectDataReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelectDataReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetSelectDataReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelectDataReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelectDataReq(%+v)", *p)

}

func (p *GetSelectDataReq) DeepEqual(ano *GetSelectDataReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetSelectDataResp struct {
	OnlinePlatform      []string         `thrift:"online_platform,1" frugal:"1,default,list<string>" json:"online_platform"`
	OrderOnlinePlatform []string         `thrift:"order_online_platform,2" frugal:"2,default,list<string>" json:"order_online_platform"`
	CourseNature        []string         `thrift:"course_nature,3" frugal:"3,default,list<string>" json:"course_nature"`
	AcademicYear        []string         `thrift:"academic_year,4" frugal:"4,default,list<string>" json:"academic_year"`
	Semester            []string         `thrift:"semester,5" frugal:"5,default,list<string>" json:"semester"`
	FieldType           map[int32]string `thrift:"field_type,6" frugal:"6,default,map<i32:string>" json:"field_type"`
	CurrentAcademicYear string           `thrift:"current_academic_year,7" frugal:"7,default,string" json:"current_academic_year"`
	CurrentSemester     string           `thrift:"current_semester,8" frugal:"8,default,string" json:"current_semester"`
}

func NewGetSelectDataResp() *GetSelectDataResp {
	return &GetSelectDataResp{}
}

func (p *GetSelectDataResp) InitDefault() {
}

func (p *GetSelectDataResp) GetOnlinePlatform() (v []string) {
	return p.OnlinePlatform
}

func (p *GetSelectDataResp) GetOrderOnlinePlatform() (v []string) {
	return p.OrderOnlinePlatform
}

func (p *GetSelectDataResp) GetCourseNature() (v []string) {
	return p.CourseNature
}

func (p *GetSelectDataResp) GetAcademicYear() (v []string) {
	return p.AcademicYear
}

func (p *GetSelectDataResp) GetSemester() (v []string) {
	return p.Semester
}

func (p *GetSelectDataResp) GetFieldType() (v map[int32]string) {
	return p.FieldType
}

func (p *GetSelectDataResp) GetCurrentAcademicYear() (v string) {
	return p.CurrentAcademicYear
}

func (p *GetSelectDataResp) GetCurrentSemester() (v string) {
	return p.CurrentSemester
}
func (p *GetSelectDataResp) SetOnlinePlatform(val []string) {
	p.OnlinePlatform = val
}
func (p *GetSelectDataResp) SetOrderOnlinePlatform(val []string) {
	p.OrderOnlinePlatform = val
}
func (p *GetSelectDataResp) SetCourseNature(val []string) {
	p.CourseNature = val
}
func (p *GetSelectDataResp) SetAcademicYear(val []string) {
	p.AcademicYear = val
}
func (p *GetSelectDataResp) SetSemester(val []string) {
	p.Semester = val
}
func (p *GetSelectDataResp) SetFieldType(val map[int32]string) {
	p.FieldType = val
}
func (p *GetSelectDataResp) SetCurrentAcademicYear(val string) {
	p.CurrentAcademicYear = val
}
func (p *GetSelectDataResp) SetCurrentSemester(val string) {
	p.CurrentSemester = val
}

var fieldIDToName_GetSelectDataResp = map[int16]string{
	1: "online_platform",
	2: "order_online_platform",
	3: "course_nature",
	4: "academic_year",
	5: "semester",
	6: "field_type",
	7: "current_academic_year",
	8: "current_semester",
}

func (p *GetSelectDataResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSelectDataResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSelectDataResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OnlinePlatform = _field
	return nil
}
func (p *GetSelectDataResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderOnlinePlatform = _field
	return nil
}
func (p *GetSelectDataResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CourseNature = _field
	return nil
}
func (p *GetSelectDataResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AcademicYear = _field
	return nil
}
func (p *GetSelectDataResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Semester = _field
	return nil
}
func (p *GetSelectDataResp) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]string, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FieldType = _field
	return nil
}
func (p *GetSelectDataResp) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CurrentAcademicYear = _field
	return nil
}
func (p *GetSelectDataResp) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CurrentSemester = _field
	return nil
}

func (p *GetSelectDataResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelectDataResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSelectDataResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("online_platform", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlinePlatform)); err != nil {
		return err
	}
	for _, v := range p.OnlinePlatform {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_online_platform", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.OrderOnlinePlatform)); err != nil {
		return err
	}
	for _, v := range p.OrderOnlinePlatform {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_nature", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CourseNature)); err != nil {
		return err
	}
	for _, v := range p.CourseNature {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AcademicYear)); err != nil {
		return err
	}
	for _, v := range p.AcademicYear {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Semester)); err != nil {
		return err
	}
	for _, v := range p.Semester {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_type", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FieldType)); err != nil {
		return err
	}
	for k, v := range p.FieldType {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("current_academic_year", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CurrentAcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetSelectDataResp) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("current_semester", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CurrentSemester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetSelectDataResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSelectDataResp(%+v)", *p)

}

func (p *GetSelectDataResp) DeepEqual(ano *GetSelectDataResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OnlinePlatform) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrderOnlinePlatform) {
		return false
	}
	if !p.Field3DeepEqual(ano.CourseNature) {
		return false
	}
	if !p.Field4DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field5DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field6DeepEqual(ano.FieldType) {
		return false
	}
	if !p.Field7DeepEqual(ano.CurrentAcademicYear) {
		return false
	}
	if !p.Field8DeepEqual(ano.CurrentSemester) {
		return false
	}
	return true
}

func (p *GetSelectDataResp) Field1DeepEqual(src []string) bool {

	if len(p.OnlinePlatform) != len(src) {
		return false
	}
	for i, v := range p.OnlinePlatform {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field2DeepEqual(src []string) bool {

	if len(p.OrderOnlinePlatform) != len(src) {
		return false
	}
	for i, v := range p.OrderOnlinePlatform {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field3DeepEqual(src []string) bool {

	if len(p.CourseNature) != len(src) {
		return false
	}
	for i, v := range p.CourseNature {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field4DeepEqual(src []string) bool {

	if len(p.AcademicYear) != len(src) {
		return false
	}
	for i, v := range p.AcademicYear {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field5DeepEqual(src []string) bool {

	if len(p.Semester) != len(src) {
		return false
	}
	for i, v := range p.Semester {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field6DeepEqual(src map[int32]string) bool {

	if len(p.FieldType) != len(src) {
		return false
	}
	for k, v := range p.FieldType {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetSelectDataResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CurrentAcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *GetSelectDataResp) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CurrentSemester, src) != 0 {
		return false
	}
	return true
}

type GetUserInfoReq struct {
}

func NewGetUserInfoReq() *GetUserInfoReq {
	return &GetUserInfoReq{}
}

func (p *GetUserInfoReq) InitDefault() {
}

var fieldIDToName_GetUserInfoReq = map[int16]string{}

func (p *GetUserInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserInfoReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetUserInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoReq(%+v)", *p)

}

func (p *GetUserInfoReq) DeepEqual(ano *GetUserInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetUserInfoResp struct {
	Id       int32    `thrift:"id,1" frugal:"1,default,i32" json:"user_id"`
	UserName string   `thrift:"user_name,2" frugal:"2,default,string" json:"user_name"`
	Email    string   `thrift:"email,3" frugal:"3,default,string" json:"email"`
	Mobile   string   `thrift:"mobile,4" frugal:"4,default,string" json:"mobile"`
	Roles    []string `thrift:"roles,5" frugal:"5,default,list<string>" json:"roles"`
	Nickname string   `thrift:"nickname,6" frugal:"6,default,string" json:"nickname"`
	Avatar   string   `thrift:"avatar,7" frugal:"7,default,string" json:"avatar"`
	AppId    int32    `thrift:"app_id,8" frugal:"8,default,i32" json:"app_id"`
}

func NewGetUserInfoResp() *GetUserInfoResp {
	return &GetUserInfoResp{}
}

func (p *GetUserInfoResp) InitDefault() {
}

func (p *GetUserInfoResp) GetId() (v int32) {
	return p.Id
}

func (p *GetUserInfoResp) GetUserName() (v string) {
	return p.UserName
}

func (p *GetUserInfoResp) GetEmail() (v string) {
	return p.Email
}

func (p *GetUserInfoResp) GetMobile() (v string) {
	return p.Mobile
}

func (p *GetUserInfoResp) GetRoles() (v []string) {
	return p.Roles
}

func (p *GetUserInfoResp) GetNickname() (v string) {
	return p.Nickname
}

func (p *GetUserInfoResp) GetAvatar() (v string) {
	return p.Avatar
}

func (p *GetUserInfoResp) GetAppId() (v int32) {
	return p.AppId
}
func (p *GetUserInfoResp) SetId(val int32) {
	p.Id = val
}
func (p *GetUserInfoResp) SetUserName(val string) {
	p.UserName = val
}
func (p *GetUserInfoResp) SetEmail(val string) {
	p.Email = val
}
func (p *GetUserInfoResp) SetMobile(val string) {
	p.Mobile = val
}
func (p *GetUserInfoResp) SetRoles(val []string) {
	p.Roles = val
}
func (p *GetUserInfoResp) SetNickname(val string) {
	p.Nickname = val
}
func (p *GetUserInfoResp) SetAvatar(val string) {
	p.Avatar = val
}
func (p *GetUserInfoResp) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_GetUserInfoResp = map[int16]string{
	1: "id",
	2: "user_name",
	3: "email",
	4: "mobile",
	5: "roles",
	6: "nickname",
	7: "avatar",
	8: "app_id",
}

func (p *GetUserInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *GetUserInfoResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *GetUserInfoResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *GetUserInfoResp) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *GetUserInfoResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Roles = _field
	return nil
}
func (p *GetUserInfoResp) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Nickname = _field
	return nil
}
func (p *GetUserInfoResp) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *GetUserInfoResp) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *GetUserInfoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roles", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Roles)); err != nil {
		return err
	}
	for _, v := range p.Roles {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nickname", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Nickname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetUserInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResp(%+v)", *p)

}

func (p *GetUserInfoResp) DeepEqual(ano *GetUserInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Email) {
		return false
	}
	if !p.Field4DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field5DeepEqual(ano.Roles) {
		return false
	}
	if !p.Field6DeepEqual(ano.Nickname) {
		return false
	}
	if !p.Field7DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field8DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *GetUserInfoResp) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field5DeepEqual(src []string) bool {

	if len(p.Roles) != len(src) {
		return false
	}
	for i, v := range p.Roles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetUserInfoResp) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Nickname, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field8DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type GetAuthCodeReq struct {
}

func NewGetAuthCodeReq() *GetAuthCodeReq {
	return &GetAuthCodeReq{}
}

func (p *GetAuthCodeReq) InitDefault() {
}

var fieldIDToName_GetAuthCodeReq = map[int16]string{}

func (p *GetAuthCodeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAuthCodeReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetAuthCodeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAuthCodeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAuthCodeReq(%+v)", *p)

}

func (p *GetAuthCodeReq) DeepEqual(ano *GetAuthCodeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetAuthCodeResp struct {
	Code []string `thrift:"code,1" frugal:"1,default,list<string>" json:"code"`
}

func NewGetAuthCodeResp() *GetAuthCodeResp {
	return &GetAuthCodeResp{}
}

func (p *GetAuthCodeResp) InitDefault() {
}

func (p *GetAuthCodeResp) GetCode() (v []string) {
	return p.Code
}
func (p *GetAuthCodeResp) SetCode(val []string) {
	p.Code = val
}

var fieldIDToName_GetAuthCodeResp = map[int16]string{
	1: "code",
}

func (p *GetAuthCodeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAuthCodeResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAuthCodeResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Code = _field
	return nil
}

func (p *GetAuthCodeResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAuthCodeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAuthCodeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Code)); err != nil {
		return err
	}
	for _, v := range p.Code {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAuthCodeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAuthCodeResp(%+v)", *p)

}

func (p *GetAuthCodeResp) DeepEqual(ano *GetAuthCodeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	return true
}

func (p *GetAuthCodeResp) Field1DeepEqual(src []string) bool {

	if len(p.Code) != len(src) {
		return false
	}
	for i, v := range p.Code {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type DeleteMenuReq struct {
	Ids []int32 `thrift:"ids,1" frugal:"1,default,list<i32>" json:"ids" binding:"required"`
}

func NewDeleteMenuReq() *DeleteMenuReq {
	return &DeleteMenuReq{}
}

func (p *DeleteMenuReq) InitDefault() {
}

func (p *DeleteMenuReq) GetIds() (v []int32) {
	return p.Ids
}
func (p *DeleteMenuReq) SetIds(val []int32) {
	p.Ids = val
}

var fieldIDToName_DeleteMenuReq = map[int16]string{
	1: "ids",
}

func (p *DeleteMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteMenuReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *DeleteMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteMenuReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMenuReq(%+v)", *p)

}

func (p *DeleteMenuReq) DeepEqual(ano *DeleteMenuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *DeleteMenuReq) Field1DeepEqual(src []int32) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteMenuResp struct {
}

func NewDeleteMenuResp() *DeleteMenuResp {
	return &DeleteMenuResp{}
}

func (p *DeleteMenuResp) InitDefault() {
}

var fieldIDToName_DeleteMenuResp = map[int16]string{}

func (p *DeleteMenuResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteMenuResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteMenuResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteMenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMenuResp(%+v)", *p)

}

func (p *DeleteMenuResp) DeepEqual(ano *DeleteMenuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UpdateMenuReq struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" json:"id" binding:"required"`
	Name      string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Path      string `thrift:"path,3" frugal:"3,default,string" json:"path"`
	Component string `thrift:"component,4" frugal:"4,default,string" json:"component"`
	Redirect  string `thrift:"redirect,5" frugal:"5,default,string" json:"redirect"`
	ParentId  int32  `thrift:"parent_id,6" frugal:"6,default,i32" json:"parent_id"`
	Meta      *Meta  `thrift:"meta,7" frugal:"7,default,Meta" json:"meta"`
}

func NewUpdateMenuReq() *UpdateMenuReq {
	return &UpdateMenuReq{}
}

func (p *UpdateMenuReq) InitDefault() {
}

func (p *UpdateMenuReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateMenuReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateMenuReq) GetPath() (v string) {
	return p.Path
}

func (p *UpdateMenuReq) GetComponent() (v string) {
	return p.Component
}

func (p *UpdateMenuReq) GetRedirect() (v string) {
	return p.Redirect
}

func (p *UpdateMenuReq) GetParentId() (v int32) {
	return p.ParentId
}

var UpdateMenuReq_Meta_DEFAULT *Meta

func (p *UpdateMenuReq) GetMeta() (v *Meta) {
	if !p.IsSetMeta() {
		return UpdateMenuReq_Meta_DEFAULT
	}
	return p.Meta
}
func (p *UpdateMenuReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateMenuReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateMenuReq) SetPath(val string) {
	p.Path = val
}
func (p *UpdateMenuReq) SetComponent(val string) {
	p.Component = val
}
func (p *UpdateMenuReq) SetRedirect(val string) {
	p.Redirect = val
}
func (p *UpdateMenuReq) SetParentId(val int32) {
	p.ParentId = val
}
func (p *UpdateMenuReq) SetMeta(val *Meta) {
	p.Meta = val
}

var fieldIDToName_UpdateMenuReq = map[int16]string{
	1: "id",
	2: "name",
	3: "path",
	4: "component",
	5: "redirect",
	6: "parent_id",
	7: "meta",
}

func (p *UpdateMenuReq) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *UpdateMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMenuReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateMenuReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateMenuReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *UpdateMenuReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Component = _field
	return nil
}
func (p *UpdateMenuReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Redirect = _field
	return nil
}
func (p *UpdateMenuReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentId = _field
	return nil
}
func (p *UpdateMenuReq) ReadField7(iprot thrift.TProtocol) error {
	_field := NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}

func (p *UpdateMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMenuReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("component", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Component); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("redirect", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Redirect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ParentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMenuReq(%+v)", *p)

}

func (p *UpdateMenuReq) DeepEqual(ano *UpdateMenuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Path) {
		return false
	}
	if !p.Field4DeepEqual(ano.Component) {
		return false
	}
	if !p.Field5DeepEqual(ano.Redirect) {
		return false
	}
	if !p.Field6DeepEqual(ano.ParentId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Meta) {
		return false
	}
	return true
}

func (p *UpdateMenuReq) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Component, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Redirect, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field6DeepEqual(src int32) bool {

	if p.ParentId != src {
		return false
	}
	return true
}
func (p *UpdateMenuReq) Field7DeepEqual(src *Meta) bool {

	if !p.Meta.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateMenuResp struct {
}

func NewUpdateMenuResp() *UpdateMenuResp {
	return &UpdateMenuResp{}
}

func (p *UpdateMenuResp) InitDefault() {
}

var fieldIDToName_UpdateMenuResp = map[int16]string{}

func (p *UpdateMenuResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMenuResp) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateMenuResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMenuResp(%+v)", *p)

}

func (p *UpdateMenuResp) DeepEqual(ano *UpdateMenuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ModelInternship struct {
	Id               int32   `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt        int32   `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt        int32   `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt        int32   `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	AcademicYear     string  `thrift:"academic_year,5" frugal:"5,default,string" gorm:"column:academic_year" json:"academic_year"`
	Semester         string  `thrift:"semester,6" frugal:"6,default,string" gorm:"column:semester" json:"semester"`
	TeacherId        string  `thrift:"teacher_id,7" frugal:"7,default,string" gorm:"column:teacher_id" json:"teacher_id"`
	TeacherName      string  `thrift:"teacher_name,8" frugal:"8,default,string" gorm:"column:teacher_name" json:"teacher_name"`
	TeachClass       string  `thrift:"teach_class,9" frugal:"9,default,string" gorm:"column:teach_class" json:"teach_class"`
	ClassName        string  `thrift:"class_name,10" frugal:"10,default,string" gorm:"column:class_name" json:"class_name"`
	Category         int32   `thrift:"category,11" frugal:"11,default,i32" gorm:"column:category" json:"category"`
	StartWeek        int32   `thrift:"start_week,12" frugal:"12,default,i32" gorm:"column:start_week" json:"start_week"`
	EndWeek          int32   `thrift:"end_week,13" frugal:"13,default,i32" gorm:"column:end_week" json:"end_week"`
	AssessmentMethod string  `thrift:"assessment_method,14" frugal:"14,default,string" gorm:"column:assessment_method" json:"assessment_method"`
	StudentNumber    int32   `thrift:"student_number,15" frugal:"15,default,i32" gorm:"column:student_number" json:"student_number"`
	WeekHour         float64 `thrift:"week_hour,16" frugal:"16,default,double" gorm:"column:week_hour" json:"week_hour"`
	AppId            int32   `thrift:"app_id,17" frugal:"17,default,i32" gorm:"column:app_id" json:"app_id"`
}

func NewModelInternship() *ModelInternship {
	return &ModelInternship{}
}

func (p *ModelInternship) InitDefault() {
}

func (p *ModelInternship) GetId() (v int32) {
	return p.Id
}

func (p *ModelInternship) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelInternship) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelInternship) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelInternship) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelInternship) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelInternship) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *ModelInternship) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ModelInternship) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *ModelInternship) GetClassName() (v string) {
	return p.ClassName
}

func (p *ModelInternship) GetCategory() (v int32) {
	return p.Category
}

func (p *ModelInternship) GetStartWeek() (v int32) {
	return p.StartWeek
}

func (p *ModelInternship) GetEndWeek() (v int32) {
	return p.EndWeek
}

func (p *ModelInternship) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}

func (p *ModelInternship) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *ModelInternship) GetWeekHour() (v float64) {
	return p.WeekHour
}

func (p *ModelInternship) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelInternship) SetId(val int32) {
	p.Id = val
}
func (p *ModelInternship) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelInternship) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelInternship) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelInternship) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelInternship) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelInternship) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *ModelInternship) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ModelInternship) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *ModelInternship) SetClassName(val string) {
	p.ClassName = val
}
func (p *ModelInternship) SetCategory(val int32) {
	p.Category = val
}
func (p *ModelInternship) SetStartWeek(val int32) {
	p.StartWeek = val
}
func (p *ModelInternship) SetEndWeek(val int32) {
	p.EndWeek = val
}
func (p *ModelInternship) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}
func (p *ModelInternship) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *ModelInternship) SetWeekHour(val float64) {
	p.WeekHour = val
}
func (p *ModelInternship) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelInternship = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "academic_year",
	6:  "semester",
	7:  "teacher_id",
	8:  "teacher_name",
	9:  "teach_class",
	10: "class_name",
	11: "category",
	12: "start_week",
	13: "end_week",
	14: "assessment_method",
	15: "student_number",
	16: "week_hour",
	17: "app_id",
}

func (p *ModelInternship) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelInternship[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelInternship) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelInternship) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelInternship) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelInternship) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelInternship) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelInternship) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelInternship) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *ModelInternship) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ModelInternship) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *ModelInternship) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *ModelInternship) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Category = _field
	return nil
}
func (p *ModelInternship) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *ModelInternship) ReadField13(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndWeek = _field
	return nil
}
func (p *ModelInternship) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}
func (p *ModelInternship) ReadField15(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *ModelInternship) ReadField16(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WeekHour = _field
	return nil
}
func (p *ModelInternship) ReadField17(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelInternship) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelInternship"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelInternship) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelInternship) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelInternship) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelInternship) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelInternship) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelInternship) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelInternship) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelInternship) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelInternship) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelInternship) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelInternship) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("category", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelInternship) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelInternship) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_week", thrift.I32, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelInternship) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelInternship) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelInternship) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week_hour", thrift.DOUBLE, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.WeekHour); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelInternship) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelInternship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelInternship(%+v)", *p)

}

func (p *ModelInternship) DeepEqual(ano *ModelInternship) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field6DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field7DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field8DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field9DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field10DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field11DeepEqual(ano.Category) {
		return false
	}
	if !p.Field12DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field13DeepEqual(ano.EndWeek) {
		return false
	}
	if !p.Field14DeepEqual(ano.AssessmentMethod) {
		return false
	}
	if !p.Field15DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field16DeepEqual(ano.WeekHour) {
		return false
	}
	if !p.Field17DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelInternship) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field9DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field10DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field11DeepEqual(src int32) bool {

	if p.Category != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field12DeepEqual(src int32) bool {

	if p.StartWeek != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field13DeepEqual(src int32) bool {

	if p.EndWeek != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field14DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInternship) Field15DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field16DeepEqual(src float64) bool {

	if p.WeekHour != src {
		return false
	}
	return true
}
func (p *ModelInternship) Field17DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelCourseApplication struct {
	Id               int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt        int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt        int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt        int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	AcademicYear     string `thrift:"academic_year,5" frugal:"5,default,string" gorm:"column:academic_year" json:"academic_year"`
	Semester         string `thrift:"semester,6" frugal:"6,default,string" gorm:"column:semester" json:"semester"`
	TeacherId        string `thrift:"teacher_id,7" frugal:"7,default,string" gorm:"column:teacher_id" json:"teacher_id"`
	TeacherName      string `thrift:"teacher_name,8" frugal:"8,default,string" gorm:"column:teacher_name" json:"teacher_name"`
	NewTeacherId_    string `thrift:"new_teacher_id,9" frugal:"9,default,string" gorm:"column:new_teacher_id" json:"new_teacher_id"`
	NewTeacherName_  string `thrift:"new_teacher_name,10" frugal:"10,default,string" gorm:"column:new_teacher_name" json:"new_teacher_name"`
	AppId            int32  `thrift:"app_id,11" frugal:"11,default,i32" gorm:"column:app_id" json:"app_id"`
	ApplicationType  int32  `thrift:"application_type,12" frugal:"12,default,i32" gorm:"column:application_type" json:"application_type"`
	CourseName       string `thrift:"course_name,13" frugal:"13,default,string" gorm:"column:course_name" json:"course_name"`
	TeachClass       string `thrift:"teach_class,14" frugal:"14,default,string" gorm:"column:teach_class" json:"teach_class"`
	CourseId         int32  `thrift:"course_id,15" frugal:"15,default,i32" gorm:"column:course_id" json:"course_id"`
	ScheduleTime     string `thrift:"schedule_time,16" frugal:"16,default,string" gorm:"column:schedule_time" json:"schedule_time"`
	NewScheduleTime_ string `thrift:"new_schedule_time,17" frugal:"17,default,string" gorm:"column:new_schedule_time" json:"new_schedule_time"`
	Location         string `thrift:"location,18" frugal:"18,default,string" gorm:"column:location" json:"location"`
	NewLocation_     string `thrift:"new_location,19" frugal:"19,default,string" gorm:"column:new_location" json:"new_location"`
	Reason           string `thrift:"reason,20" frugal:"20,default,string" gorm:"column:reason" json:"reason"`
	AdjustCourseId   int32  `thrift:"adjust_course_id,21" frugal:"21,default,i32" gorm:"column:adjust_course_id" json:"adjust_course_id"`
	UserId           string `thrift:"user_id,22" frugal:"22,default,string" gorm:"column:user_id" json:"-"`
}

func NewModelCourseApplication() *ModelCourseApplication {
	return &ModelCourseApplication{}
}

func (p *ModelCourseApplication) InitDefault() {
}

func (p *ModelCourseApplication) GetId() (v int32) {
	return p.Id
}

func (p *ModelCourseApplication) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelCourseApplication) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelCourseApplication) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelCourseApplication) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelCourseApplication) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelCourseApplication) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *ModelCourseApplication) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ModelCourseApplication) GetNewTeacherId_() (v string) {
	return p.NewTeacherId_
}

func (p *ModelCourseApplication) GetNewTeacherName_() (v string) {
	return p.NewTeacherName_
}

func (p *ModelCourseApplication) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelCourseApplication) GetApplicationType() (v int32) {
	return p.ApplicationType
}

func (p *ModelCourseApplication) GetCourseName() (v string) {
	return p.CourseName
}

func (p *ModelCourseApplication) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *ModelCourseApplication) GetCourseId() (v int32) {
	return p.CourseId
}

func (p *ModelCourseApplication) GetScheduleTime() (v string) {
	return p.ScheduleTime
}

func (p *ModelCourseApplication) GetNewScheduleTime_() (v string) {
	return p.NewScheduleTime_
}

func (p *ModelCourseApplication) GetLocation() (v string) {
	return p.Location
}

func (p *ModelCourseApplication) GetNewLocation_() (v string) {
	return p.NewLocation_
}

func (p *ModelCourseApplication) GetReason() (v string) {
	return p.Reason
}

func (p *ModelCourseApplication) GetAdjustCourseId() (v int32) {
	return p.AdjustCourseId
}

func (p *ModelCourseApplication) GetUserId() (v string) {
	return p.UserId
}
func (p *ModelCourseApplication) SetId(val int32) {
	p.Id = val
}
func (p *ModelCourseApplication) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelCourseApplication) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelCourseApplication) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelCourseApplication) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelCourseApplication) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelCourseApplication) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *ModelCourseApplication) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ModelCourseApplication) SetNewTeacherId_(val string) {
	p.NewTeacherId_ = val
}
func (p *ModelCourseApplication) SetNewTeacherName_(val string) {
	p.NewTeacherName_ = val
}
func (p *ModelCourseApplication) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelCourseApplication) SetApplicationType(val int32) {
	p.ApplicationType = val
}
func (p *ModelCourseApplication) SetCourseName(val string) {
	p.CourseName = val
}
func (p *ModelCourseApplication) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *ModelCourseApplication) SetCourseId(val int32) {
	p.CourseId = val
}
func (p *ModelCourseApplication) SetScheduleTime(val string) {
	p.ScheduleTime = val
}
func (p *ModelCourseApplication) SetNewScheduleTime_(val string) {
	p.NewScheduleTime_ = val
}
func (p *ModelCourseApplication) SetLocation(val string) {
	p.Location = val
}
func (p *ModelCourseApplication) SetNewLocation_(val string) {
	p.NewLocation_ = val
}
func (p *ModelCourseApplication) SetReason(val string) {
	p.Reason = val
}
func (p *ModelCourseApplication) SetAdjustCourseId(val int32) {
	p.AdjustCourseId = val
}
func (p *ModelCourseApplication) SetUserId(val string) {
	p.UserId = val
}

var fieldIDToName_ModelCourseApplication = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "academic_year",
	6:  "semester",
	7:  "teacher_id",
	8:  "teacher_name",
	9:  "new_teacher_id",
	10: "new_teacher_name",
	11: "app_id",
	12: "application_type",
	13: "course_name",
	14: "teach_class",
	15: "course_id",
	16: "schedule_time",
	17: "new_schedule_time",
	18: "location",
	19: "new_location",
	20: "reason",
	21: "adjust_course_id",
	22: "user_id",
}

func (p *ModelCourseApplication) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelCourseApplication[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelCourseApplication) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelCourseApplication) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelCourseApplication) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelCourseApplication) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelCourseApplication) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelCourseApplication) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelCourseApplication) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *ModelCourseApplication) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ModelCourseApplication) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewTeacherId_ = _field
	return nil
}
func (p *ModelCourseApplication) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewTeacherName_ = _field
	return nil
}
func (p *ModelCourseApplication) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelCourseApplication) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ApplicationType = _field
	return nil
}
func (p *ModelCourseApplication) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *ModelCourseApplication) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *ModelCourseApplication) ReadField15(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseId = _field
	return nil
}
func (p *ModelCourseApplication) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleTime = _field
	return nil
}
func (p *ModelCourseApplication) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewScheduleTime_ = _field
	return nil
}
func (p *ModelCourseApplication) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Location = _field
	return nil
}
func (p *ModelCourseApplication) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewLocation_ = _field
	return nil
}
func (p *ModelCourseApplication) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Reason = _field
	return nil
}
func (p *ModelCourseApplication) ReadField21(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdjustCourseId = _field
	return nil
}
func (p *ModelCourseApplication) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *ModelCourseApplication) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelCourseApplication"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelCourseApplication) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_teacher_id", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewTeacherId_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_teacher_name", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewTeacherName_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("application_type", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ApplicationType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_id", thrift.I32, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schedule_time", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_schedule_time", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewScheduleTime_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Location); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_location", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewLocation_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("reason", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Reason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("adjust_course_id", thrift.I32, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AdjustCourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ModelCourseApplication) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ModelCourseApplication) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelCourseApplication(%+v)", *p)

}

func (p *ModelCourseApplication) DeepEqual(ano *ModelCourseApplication) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field6DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field7DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field8DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field9DeepEqual(ano.NewTeacherId_) {
		return false
	}
	if !p.Field10DeepEqual(ano.NewTeacherName_) {
		return false
	}
	if !p.Field11DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field12DeepEqual(ano.ApplicationType) {
		return false
	}
	if !p.Field13DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field14DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field15DeepEqual(ano.CourseId) {
		return false
	}
	if !p.Field16DeepEqual(ano.ScheduleTime) {
		return false
	}
	if !p.Field17DeepEqual(ano.NewScheduleTime_) {
		return false
	}
	if !p.Field18DeepEqual(ano.Location) {
		return false
	}
	if !p.Field19DeepEqual(ano.NewLocation_) {
		return false
	}
	if !p.Field20DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field21DeepEqual(ano.AdjustCourseId) {
		return false
	}
	if !p.Field22DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *ModelCourseApplication) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field9DeepEqual(src string) bool {

	if strings.Compare(p.NewTeacherId_, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field10DeepEqual(src string) bool {

	if strings.Compare(p.NewTeacherName_, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field11DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field12DeepEqual(src int32) bool {

	if p.ApplicationType != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field14DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field15DeepEqual(src int32) bool {

	if p.CourseId != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleTime, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field17DeepEqual(src string) bool {

	if strings.Compare(p.NewScheduleTime_, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field18DeepEqual(src string) bool {

	if strings.Compare(p.Location, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field19DeepEqual(src string) bool {

	if strings.Compare(p.NewLocation_, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field20DeepEqual(src string) bool {

	if strings.Compare(p.Reason, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field21DeepEqual(src int32) bool {

	if p.AdjustCourseId != src {
		return false
	}
	return true
}
func (p *ModelCourseApplication) Field22DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}

type ModelApp struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	SchoolName  string `thrift:"school_name,5" frugal:"5,default,string" gorm:"column:school_name" json:"school_name"`
	CollegeName string `thrift:"college_name,6" frugal:"6,default,string" gorm:"column:college_name" json:"college_name"`
	AppKey      string `thrift:"app_key,8" frugal:"8,default,string" gorm:"column:app_key" json:"app_key"`
	AppSecret   string `thrift:"app_secret,9" frugal:"9,default,string" gorm:"column:app_secret" json:"app_secret"`
	SchoolCode  int32  `thrift:"school_code,10" frugal:"10,default,i32" gorm:"column:school_code" json:"school_code"`
	Status      bool   `thrift:"status,11" frugal:"11,default,bool" gorm:"column:status;default:1" json:"status"`
}

func NewModelApp() *ModelApp {
	return &ModelApp{}
}

func (p *ModelApp) InitDefault() {
}

func (p *ModelApp) GetId() (v int32) {
	return p.Id
}

func (p *ModelApp) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelApp) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelApp) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelApp) GetSchoolName() (v string) {
	return p.SchoolName
}

func (p *ModelApp) GetCollegeName() (v string) {
	return p.CollegeName
}

func (p *ModelApp) GetAppKey() (v string) {
	return p.AppKey
}

func (p *ModelApp) GetAppSecret() (v string) {
	return p.AppSecret
}

func (p *ModelApp) GetSchoolCode() (v int32) {
	return p.SchoolCode
}

func (p *ModelApp) GetStatus() (v bool) {
	return p.Status
}
func (p *ModelApp) SetId(val int32) {
	p.Id = val
}
func (p *ModelApp) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelApp) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelApp) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelApp) SetSchoolName(val string) {
	p.SchoolName = val
}
func (p *ModelApp) SetCollegeName(val string) {
	p.CollegeName = val
}
func (p *ModelApp) SetAppKey(val string) {
	p.AppKey = val
}
func (p *ModelApp) SetAppSecret(val string) {
	p.AppSecret = val
}
func (p *ModelApp) SetSchoolCode(val int32) {
	p.SchoolCode = val
}
func (p *ModelApp) SetStatus(val bool) {
	p.Status = val
}

var fieldIDToName_ModelApp = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "school_name",
	6:  "college_name",
	8:  "app_key",
	9:  "app_secret",
	10: "school_code",
	11: "status",
}

func (p *ModelApp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelApp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelApp) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelApp) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelApp) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelApp) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelApp) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchoolName = _field
	return nil
}
func (p *ModelApp) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CollegeName = _field
	return nil
}
func (p *ModelApp) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppKey = _field
	return nil
}
func (p *ModelApp) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppSecret = _field
	return nil
}
func (p *ModelApp) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchoolCode = _field
	return nil
}
func (p *ModelApp) ReadField11(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *ModelApp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelApp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelApp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelApp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelApp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelApp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelApp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("school_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SchoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelApp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("college_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CollegeName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelApp) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_key", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelApp) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_secret", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppSecret); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelApp) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("school_code", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchoolCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelApp) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.BOOL, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelApp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelApp(%+v)", *p)

}

func (p *ModelApp) DeepEqual(ano *ModelApp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.SchoolName) {
		return false
	}
	if !p.Field6DeepEqual(ano.CollegeName) {
		return false
	}
	if !p.Field8DeepEqual(ano.AppKey) {
		return false
	}
	if !p.Field9DeepEqual(ano.AppSecret) {
		return false
	}
	if !p.Field10DeepEqual(ano.SchoolCode) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ModelApp) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelApp) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelApp) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelApp) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelApp) Field5DeepEqual(src string) bool {

	if strings.Compare(p.SchoolName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelApp) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CollegeName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelApp) Field8DeepEqual(src string) bool {

	if strings.Compare(p.AppKey, src) != 0 {
		return false
	}
	return true
}
func (p *ModelApp) Field9DeepEqual(src string) bool {

	if strings.Compare(p.AppSecret, src) != 0 {
		return false
	}
	return true
}
func (p *ModelApp) Field10DeepEqual(src int32) bool {

	if p.SchoolCode != src {
		return false
	}
	return true
}
func (p *ModelApp) Field11DeepEqual(src bool) bool {

	if p.Status != src {
		return false
	}
	return true
}

type ModelUser struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	UserName  string `thrift:"user_name,5" frugal:"5,default,string" gorm:"column:user_name" json:"user_name"`
	Password  string `thrift:"password,6" frugal:"6,default,string" gorm:"column:password" json:"-"`
	NickName  string `thrift:"nick_name,7" frugal:"7,default,string" gorm:"column:nick_name" json:"nick_name"`
	Mobile    string `thrift:"mobile,8" frugal:"8,default,string" gorm:"column:mobile" json:"mobile"`
	Email     string `thrift:"email,9" frugal:"9,default,string" gorm:"column:email" json:"email"`
	Avatar    string `thrift:"avatar,10" frugal:"10,default,string" gorm:"column:avatar" json:"avatar"`
	AppId     int32  `thrift:"app_id,11" frugal:"11,default,i32" gorm:"column:app_id" json:"app_id"`
}

func NewModelUser() *ModelUser {
	return &ModelUser{}
}

func (p *ModelUser) InitDefault() {
}

func (p *ModelUser) GetId() (v int32) {
	return p.Id
}

func (p *ModelUser) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelUser) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelUser) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelUser) GetUserName() (v string) {
	return p.UserName
}

func (p *ModelUser) GetPassword() (v string) {
	return p.Password
}

func (p *ModelUser) GetNickName() (v string) {
	return p.NickName
}

func (p *ModelUser) GetMobile() (v string) {
	return p.Mobile
}

func (p *ModelUser) GetEmail() (v string) {
	return p.Email
}

func (p *ModelUser) GetAvatar() (v string) {
	return p.Avatar
}

func (p *ModelUser) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelUser) SetId(val int32) {
	p.Id = val
}
func (p *ModelUser) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelUser) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelUser) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelUser) SetUserName(val string) {
	p.UserName = val
}
func (p *ModelUser) SetPassword(val string) {
	p.Password = val
}
func (p *ModelUser) SetNickName(val string) {
	p.NickName = val
}
func (p *ModelUser) SetMobile(val string) {
	p.Mobile = val
}
func (p *ModelUser) SetEmail(val string) {
	p.Email = val
}
func (p *ModelUser) SetAvatar(val string) {
	p.Avatar = val
}
func (p *ModelUser) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelUser = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "user_name",
	6:  "password",
	7:  "nick_name",
	8:  "mobile",
	9:  "email",
	10: "avatar",
	11: "app_id",
}

func (p *ModelUser) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelUser[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelUser) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelUser) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelUser) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelUser) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelUser) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *ModelUser) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}
func (p *ModelUser) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NickName = _field
	return nil
}
func (p *ModelUser) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ModelUser) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *ModelUser) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *ModelUser) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelUser) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelUser"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelUser) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelUser) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelUser) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelUser) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelUser) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nick_name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelUser) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelUser) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelUser) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelUser) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelUser(%+v)", *p)

}

func (p *ModelUser) DeepEqual(ano *ModelUser) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Password) {
		return false
	}
	if !p.Field7DeepEqual(ano.NickName) {
		return false
	}
	if !p.Field8DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field9DeepEqual(ano.Email) {
		return false
	}
	if !p.Field10DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field11DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelUser) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelUser) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelUser) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelUser) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelUser) Field5DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field7DeepEqual(src string) bool {

	if strings.Compare(p.NickName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *ModelUser) Field11DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelRole struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name        string `thrift:"name,5" frugal:"5,default,string" gorm:"column:name" json:"name"`
	Description string `thrift:"description,6" frugal:"6,default,string" gorm:"column:description" json:"description"`
	Status      bool   `thrift:"status,7" frugal:"7,default,bool" gorm:"column:status;default:true" json:"status"`
	StrRoleId   string `thrift:"str_role_id,8" frugal:"8,default,string" json:"str_role_id" gorm:"column:str_role_id"`
	AppId       int32  `thrift:"app_id,9" frugal:"9,default,i32" json:"app_id" gorm:"column:app_id"`
}

func NewModelRole() *ModelRole {
	return &ModelRole{}
}

func (p *ModelRole) InitDefault() {
}

func (p *ModelRole) GetId() (v int32) {
	return p.Id
}

func (p *ModelRole) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelRole) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelRole) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelRole) GetName() (v string) {
	return p.Name
}

func (p *ModelRole) GetDescription() (v string) {
	return p.Description
}

func (p *ModelRole) GetStatus() (v bool) {
	return p.Status
}

func (p *ModelRole) GetStrRoleId() (v string) {
	return p.StrRoleId
}

func (p *ModelRole) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelRole) SetId(val int32) {
	p.Id = val
}
func (p *ModelRole) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelRole) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelRole) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelRole) SetName(val string) {
	p.Name = val
}
func (p *ModelRole) SetDescription(val string) {
	p.Description = val
}
func (p *ModelRole) SetStatus(val bool) {
	p.Status = val
}
func (p *ModelRole) SetStrRoleId(val string) {
	p.StrRoleId = val
}
func (p *ModelRole) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelRole = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
	6: "description",
	7: "status",
	8: "str_role_id",
	9: "app_id",
}

func (p *ModelRole) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelRole[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelRole) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelRole) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelRole) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelRole) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelRole) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelRole) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelRole) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ModelRole) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StrRoleId = _field
	return nil
}
func (p *ModelRole) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelRole) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelRole"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelRole) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelRole) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelRole) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelRole) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelRole) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelRole) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelRole) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelRole) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str_role_id", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StrRoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelRole) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelRole) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelRole(%+v)", *p)

}

func (p *ModelRole) DeepEqual(ano *ModelRole) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	if !p.Field8DeepEqual(ano.StrRoleId) {
		return false
	}
	if !p.Field9DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelRole) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelRole) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelRole) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelRole) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelRole) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelRole) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelRole) Field7DeepEqual(src bool) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ModelRole) Field8DeepEqual(src string) bool {

	if strings.Compare(p.StrRoleId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelRole) Field9DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelMenu struct {
	Id        int32        `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt int32        `thrift:"created_at,2" frugal:"2,default,i32" json:"created_at"`
	UpdatedAt int32        `thrift:"updated_at,3" frugal:"3,default,i32" json:"updated_at"`
	DeletedAt int32        `thrift:"deleted_at,4" frugal:"4,default,i32" json:"deleted_at"`
	Component string       `thrift:"component,5" frugal:"5,default,string" json:"component" gorm:"column:component;default:BasicLayout"`
	Mete      *Meta        `thrift:"mete,6" frugal:"6,default,Meta" json:"meta" gorm:"column:meta;embedded"`
	Name      string       `thrift:"name,7" frugal:"7,default,string" json:"name" gorm:"column:name"`
	Path      string       `thrift:"path,8" frugal:"8,default,string" json:"path" gorm:"column:path"`
	Redirect  string       `thrift:"redirect,9" frugal:"9,default,string" json:"redirect" gorm:"column:redirect"`
	ParentId  int32        `thrift:"parent_id,10" frugal:"10,default,i32" json:"parent_id" gorm:"column:parent_id"`
	Children  []*ModelMenu `thrift:"children,11" frugal:"11,default,list<ModelMenu>" json:"children" gorm:"-"`
	Status    bool         `thrift:"status,12" frugal:"12,default,bool" json:"status" gorm:"column:status;default:true"`
}

func NewModelMenu() *ModelMenu {
	return &ModelMenu{}
}

func (p *ModelMenu) InitDefault() {
}

func (p *ModelMenu) GetId() (v int32) {
	return p.Id
}

func (p *ModelMenu) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelMenu) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelMenu) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelMenu) GetComponent() (v string) {
	return p.Component
}

var ModelMenu_Mete_DEFAULT *Meta

func (p *ModelMenu) GetMete() (v *Meta) {
	if !p.IsSetMete() {
		return ModelMenu_Mete_DEFAULT
	}
	return p.Mete
}

func (p *ModelMenu) GetName() (v string) {
	return p.Name
}

func (p *ModelMenu) GetPath() (v string) {
	return p.Path
}

func (p *ModelMenu) GetRedirect() (v string) {
	return p.Redirect
}

func (p *ModelMenu) GetParentId() (v int32) {
	return p.ParentId
}

func (p *ModelMenu) GetChildren() (v []*ModelMenu) {
	return p.Children
}

func (p *ModelMenu) GetStatus() (v bool) {
	return p.Status
}
func (p *ModelMenu) SetId(val int32) {
	p.Id = val
}
func (p *ModelMenu) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelMenu) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelMenu) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelMenu) SetComponent(val string) {
	p.Component = val
}
func (p *ModelMenu) SetMete(val *Meta) {
	p.Mete = val
}
func (p *ModelMenu) SetName(val string) {
	p.Name = val
}
func (p *ModelMenu) SetPath(val string) {
	p.Path = val
}
func (p *ModelMenu) SetRedirect(val string) {
	p.Redirect = val
}
func (p *ModelMenu) SetParentId(val int32) {
	p.ParentId = val
}
func (p *ModelMenu) SetChildren(val []*ModelMenu) {
	p.Children = val
}
func (p *ModelMenu) SetStatus(val bool) {
	p.Status = val
}

var fieldIDToName_ModelMenu = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "component",
	6:  "mete",
	7:  "name",
	8:  "path",
	9:  "redirect",
	10: "parent_id",
	11: "children",
	12: "status",
}

func (p *ModelMenu) IsSetMete() bool {
	return p.Mete != nil
}

func (p *ModelMenu) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelMenu[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelMenu) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelMenu) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelMenu) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelMenu) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelMenu) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Component = _field
	return nil
}
func (p *ModelMenu) ReadField6(iprot thrift.TProtocol) error {
	_field := NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Mete = _field
	return nil
}
func (p *ModelMenu) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelMenu) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *ModelMenu) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Redirect = _field
	return nil
}
func (p *ModelMenu) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentId = _field
	return nil
}
func (p *ModelMenu) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ModelMenu, 0, size)
	values := make([]ModelMenu, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Children = _field
	return nil
}
func (p *ModelMenu) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *ModelMenu) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelMenu"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelMenu) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelMenu) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelMenu) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelMenu) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelMenu) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("component", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Component); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelMenu) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mete", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Mete.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelMenu) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelMenu) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelMenu) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("redirect", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Redirect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelMenu) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent_id", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ParentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelMenu) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("children", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
		return err
	}
	for _, v := range p.Children {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelMenu) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.BOOL, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelMenu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelMenu(%+v)", *p)

}

func (p *ModelMenu) DeepEqual(ano *ModelMenu) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Component) {
		return false
	}
	if !p.Field6DeepEqual(ano.Mete) {
		return false
	}
	if !p.Field7DeepEqual(ano.Name) {
		return false
	}
	if !p.Field8DeepEqual(ano.Path) {
		return false
	}
	if !p.Field9DeepEqual(ano.Redirect) {
		return false
	}
	if !p.Field10DeepEqual(ano.ParentId) {
		return false
	}
	if !p.Field11DeepEqual(ano.Children) {
		return false
	}
	if !p.Field12DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ModelMenu) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelMenu) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelMenu) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelMenu) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelMenu) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Component, src) != 0 {
		return false
	}
	return true
}
func (p *ModelMenu) Field6DeepEqual(src *Meta) bool {

	if !p.Mete.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ModelMenu) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelMenu) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *ModelMenu) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Redirect, src) != 0 {
		return false
	}
	return true
}
func (p *ModelMenu) Field10DeepEqual(src int32) bool {

	if p.ParentId != src {
		return false
	}
	return true
}
func (p *ModelMenu) Field11DeepEqual(src []*ModelMenu) bool {

	if len(p.Children) != len(src) {
		return false
	}
	for i, v := range p.Children {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ModelMenu) Field12DeepEqual(src bool) bool {

	if p.Status != src {
		return false
	}
	return true
}

type Meta struct {
	Title              string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Order              int32  `thrift:"order,2" frugal:"2,default,i32" json:"order"`
	Icon               string `thrift:"icon,3" frugal:"3,default,string" json:"icon"`
	Badge              string `thrift:"badge,4" frugal:"4,default,string" json:"badge"`
	ActiveIcon         string `thrift:"active_icon,5" frugal:"5,default,string" json:"active_icon"`
	IframeSrc          string `thrift:"iframe_src,6" frugal:"6,default,string" json:"iframe_src"`
	AffixTab           bool   `thrift:"affixTab,7" frugal:"7,default,bool" json:"affixTab" gorm:"column:affix_tab;default:false"`
	ActivePath         string `thrift:"activePath,8" frugal:"8,default,string" json:"activePath"`
	BadgeVariants      string `thrift:"badgeVariants,9" frugal:"9,default,string" json:"badgeVariants"`
	BadgeType          string `thrift:"badgeType,10" frugal:"10,default,string" json:"hide"`
	BadgeText          string `thrift:"badgeText,11" frugal:"11,default,string" json:"badgeText"`
	HideChildrenInMenu bool   `thrift:"hideChildrenInMenu,12" frugal:"12,default,bool" json:"hideChildrenInMenu" gorm:"column:hide_children_in_menu;default:false"`
	HideInTab          bool   `thrift:"hideInTab,13" frugal:"13,default,bool" json:"hideInTab" gorm:"column:hide_in_tab;default:false"`
	HideInMenu         bool   `thrift:"hideInMenu,14" frugal:"14,default,bool" json:"hideInMenu" gorm:"column:hide_in_menu;default:false"`
	KeepAlive          bool   `thrift:"keepAlive,15" frugal:"15,default,bool" json:"keepAlive" gorm:"column:keep_alive;default:false"`
	ActiveIcon_        string `thrift:"activeIcon,16" frugal:"16,default,string" json:"activeIcon"`
	HideInBreadcrumb   bool   `thrift:"hideInBreadcrumb,17" frugal:"17,default,bool" json:"hideInBreadcrumb" gorm:"column:hide_in_breadcrumb;default:false"`
	IgnoreAccess       bool   `thrift:"ignoreAccess,18" frugal:"18,default,bool" json:"ignoreAccess" gorm:"column:ignore_access;default:false"`
	Link               string `thrift:"link,19" frugal:"19,default,string" json:"link"`
	OpenInNewWindow    bool   `thrift:"openInNewWindow,20" frugal:"20,default,bool" json:"openInNewWindow"  gorm:"column:open_in_new_window;default:false"`
	MaxNumOfOpenTab    int32  `thrift:"maxNumOfOpenTab,21" frugal:"21,default,i32" json:"maxNumOfOpenTab"`
}

func NewMeta() *Meta {
	return &Meta{}
}

func (p *Meta) InitDefault() {
}

func (p *Meta) GetTitle() (v string) {
	return p.Title
}

func (p *Meta) GetOrder() (v int32) {
	return p.Order
}

func (p *Meta) GetIcon() (v string) {
	return p.Icon
}

func (p *Meta) GetBadge() (v string) {
	return p.Badge
}

func (p *Meta) GetActiveIcon() (v string) {
	return p.ActiveIcon
}

func (p *Meta) GetIframeSrc() (v string) {
	return p.IframeSrc
}

func (p *Meta) GetAffixTab() (v bool) {
	return p.AffixTab
}

func (p *Meta) GetActivePath() (v string) {
	return p.ActivePath
}

func (p *Meta) GetBadgeVariants() (v string) {
	return p.BadgeVariants
}

func (p *Meta) GetBadgeType() (v string) {
	return p.BadgeType
}

func (p *Meta) GetBadgeText() (v string) {
	return p.BadgeText
}

func (p *Meta) GetHideChildrenInMenu() (v bool) {
	return p.HideChildrenInMenu
}

func (p *Meta) GetHideInTab() (v bool) {
	return p.HideInTab
}

func (p *Meta) GetHideInMenu() (v bool) {
	return p.HideInMenu
}

func (p *Meta) GetKeepAlive() (v bool) {
	return p.KeepAlive
}

func (p *Meta) GetActiveIcon_() (v string) {
	return p.ActiveIcon_
}

func (p *Meta) GetHideInBreadcrumb() (v bool) {
	return p.HideInBreadcrumb
}

func (p *Meta) GetIgnoreAccess() (v bool) {
	return p.IgnoreAccess
}

func (p *Meta) GetLink() (v string) {
	return p.Link
}

func (p *Meta) GetOpenInNewWindow() (v bool) {
	return p.OpenInNewWindow
}

func (p *Meta) GetMaxNumOfOpenTab() (v int32) {
	return p.MaxNumOfOpenTab
}
func (p *Meta) SetTitle(val string) {
	p.Title = val
}
func (p *Meta) SetOrder(val int32) {
	p.Order = val
}
func (p *Meta) SetIcon(val string) {
	p.Icon = val
}
func (p *Meta) SetBadge(val string) {
	p.Badge = val
}
func (p *Meta) SetActiveIcon(val string) {
	p.ActiveIcon = val
}
func (p *Meta) SetIframeSrc(val string) {
	p.IframeSrc = val
}
func (p *Meta) SetAffixTab(val bool) {
	p.AffixTab = val
}
func (p *Meta) SetActivePath(val string) {
	p.ActivePath = val
}
func (p *Meta) SetBadgeVariants(val string) {
	p.BadgeVariants = val
}
func (p *Meta) SetBadgeType(val string) {
	p.BadgeType = val
}
func (p *Meta) SetBadgeText(val string) {
	p.BadgeText = val
}
func (p *Meta) SetHideChildrenInMenu(val bool) {
	p.HideChildrenInMenu = val
}
func (p *Meta) SetHideInTab(val bool) {
	p.HideInTab = val
}
func (p *Meta) SetHideInMenu(val bool) {
	p.HideInMenu = val
}
func (p *Meta) SetKeepAlive(val bool) {
	p.KeepAlive = val
}
func (p *Meta) SetActiveIcon_(val string) {
	p.ActiveIcon_ = val
}
func (p *Meta) SetHideInBreadcrumb(val bool) {
	p.HideInBreadcrumb = val
}
func (p *Meta) SetIgnoreAccess(val bool) {
	p.IgnoreAccess = val
}
func (p *Meta) SetLink(val string) {
	p.Link = val
}
func (p *Meta) SetOpenInNewWindow(val bool) {
	p.OpenInNewWindow = val
}
func (p *Meta) SetMaxNumOfOpenTab(val int32) {
	p.MaxNumOfOpenTab = val
}

var fieldIDToName_Meta = map[int16]string{
	1:  "title",
	2:  "order",
	3:  "icon",
	4:  "badge",
	5:  "active_icon",
	6:  "iframe_src",
	7:  "affixTab",
	8:  "activePath",
	9:  "badgeVariants",
	10: "badgeType",
	11: "badgeText",
	12: "hideChildrenInMenu",
	13: "hideInTab",
	14: "hideInMenu",
	15: "keepAlive",
	16: "activeIcon",
	17: "hideInBreadcrumb",
	18: "ignoreAccess",
	19: "link",
	20: "openInNewWindow",
	21: "maxNumOfOpenTab",
}

func (p *Meta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Meta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Meta) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Title = _field
	return nil
}
func (p *Meta) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}
func (p *Meta) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Icon = _field
	return nil
}
func (p *Meta) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Badge = _field
	return nil
}
func (p *Meta) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ActiveIcon = _field
	return nil
}
func (p *Meta) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IframeSrc = _field
	return nil
}
func (p *Meta) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AffixTab = _field
	return nil
}
func (p *Meta) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ActivePath = _field
	return nil
}
func (p *Meta) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BadgeVariants = _field
	return nil
}
func (p *Meta) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BadgeType = _field
	return nil
}
func (p *Meta) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BadgeText = _field
	return nil
}
func (p *Meta) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HideChildrenInMenu = _field
	return nil
}
func (p *Meta) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HideInTab = _field
	return nil
}
func (p *Meta) ReadField14(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HideInMenu = _field
	return nil
}
func (p *Meta) ReadField15(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KeepAlive = _field
	return nil
}
func (p *Meta) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ActiveIcon_ = _field
	return nil
}
func (p *Meta) ReadField17(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HideInBreadcrumb = _field
	return nil
}
func (p *Meta) ReadField18(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IgnoreAccess = _field
	return nil
}
func (p *Meta) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Link = _field
	return nil
}
func (p *Meta) ReadField20(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OpenInNewWindow = _field
	return nil
}
func (p *Meta) ReadField21(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxNumOfOpenTab = _field
	return nil
}

func (p *Meta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Meta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Meta) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Meta) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Meta) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("icon", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Icon); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Meta) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("badge", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Badge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Meta) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("active_icon", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ActiveIcon); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Meta) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("iframe_src", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IframeSrc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Meta) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("affixTab", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.AffixTab); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Meta) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("activePath", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ActivePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Meta) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("badgeVariants", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BadgeVariants); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Meta) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("badgeType", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BadgeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Meta) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("badgeText", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BadgeText); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Meta) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hideChildrenInMenu", thrift.BOOL, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HideChildrenInMenu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Meta) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hideInTab", thrift.BOOL, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HideInTab); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Meta) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hideInMenu", thrift.BOOL, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HideInMenu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Meta) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("keepAlive", thrift.BOOL, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.KeepAlive); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Meta) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("activeIcon", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ActiveIcon_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Meta) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hideInBreadcrumb", thrift.BOOL, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HideInBreadcrumb); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Meta) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ignoreAccess", thrift.BOOL, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IgnoreAccess); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *Meta) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Link); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *Meta) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("openInNewWindow", thrift.BOOL, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.OpenInNewWindow); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *Meta) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxNumOfOpenTab", thrift.I32, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxNumOfOpenTab); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *Meta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Meta(%+v)", *p)

}

func (p *Meta) DeepEqual(ano *Meta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Title) {
		return false
	}
	if !p.Field2DeepEqual(ano.Order) {
		return false
	}
	if !p.Field3DeepEqual(ano.Icon) {
		return false
	}
	if !p.Field4DeepEqual(ano.Badge) {
		return false
	}
	if !p.Field5DeepEqual(ano.ActiveIcon) {
		return false
	}
	if !p.Field6DeepEqual(ano.IframeSrc) {
		return false
	}
	if !p.Field7DeepEqual(ano.AffixTab) {
		return false
	}
	if !p.Field8DeepEqual(ano.ActivePath) {
		return false
	}
	if !p.Field9DeepEqual(ano.BadgeVariants) {
		return false
	}
	if !p.Field10DeepEqual(ano.BadgeType) {
		return false
	}
	if !p.Field11DeepEqual(ano.BadgeText) {
		return false
	}
	if !p.Field12DeepEqual(ano.HideChildrenInMenu) {
		return false
	}
	if !p.Field13DeepEqual(ano.HideInTab) {
		return false
	}
	if !p.Field14DeepEqual(ano.HideInMenu) {
		return false
	}
	if !p.Field15DeepEqual(ano.KeepAlive) {
		return false
	}
	if !p.Field16DeepEqual(ano.ActiveIcon_) {
		return false
	}
	if !p.Field17DeepEqual(ano.HideInBreadcrumb) {
		return false
	}
	if !p.Field18DeepEqual(ano.IgnoreAccess) {
		return false
	}
	if !p.Field19DeepEqual(ano.Link) {
		return false
	}
	if !p.Field20DeepEqual(ano.OpenInNewWindow) {
		return false
	}
	if !p.Field21DeepEqual(ano.MaxNumOfOpenTab) {
		return false
	}
	return true
}

func (p *Meta) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field2DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}
func (p *Meta) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Icon, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Badge, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ActiveIcon, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field6DeepEqual(src string) bool {

	if strings.Compare(p.IframeSrc, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field7DeepEqual(src bool) bool {

	if p.AffixTab != src {
		return false
	}
	return true
}
func (p *Meta) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ActivePath, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field9DeepEqual(src string) bool {

	if strings.Compare(p.BadgeVariants, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field10DeepEqual(src string) bool {

	if strings.Compare(p.BadgeType, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field11DeepEqual(src string) bool {

	if strings.Compare(p.BadgeText, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field12DeepEqual(src bool) bool {

	if p.HideChildrenInMenu != src {
		return false
	}
	return true
}
func (p *Meta) Field13DeepEqual(src bool) bool {

	if p.HideInTab != src {
		return false
	}
	return true
}
func (p *Meta) Field14DeepEqual(src bool) bool {

	if p.HideInMenu != src {
		return false
	}
	return true
}
func (p *Meta) Field15DeepEqual(src bool) bool {

	if p.KeepAlive != src {
		return false
	}
	return true
}
func (p *Meta) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ActiveIcon_, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field17DeepEqual(src bool) bool {

	if p.HideInBreadcrumb != src {
		return false
	}
	return true
}
func (p *Meta) Field18DeepEqual(src bool) bool {

	if p.IgnoreAccess != src {
		return false
	}
	return true
}
func (p *Meta) Field19DeepEqual(src string) bool {

	if strings.Compare(p.Link, src) != 0 {
		return false
	}
	return true
}
func (p *Meta) Field20DeepEqual(src bool) bool {

	if p.OpenInNewWindow != src {
		return false
	}
	return true
}
func (p *Meta) Field21DeepEqual(src int32) bool {

	if p.MaxNumOfOpenTab != src {
		return false
	}
	return true
}

type ModelPermission struct {
	Id              int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt       int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt       int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt       int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name            string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	Description     string `thrift:"description,6" frugal:"6,default,string" json:"description" gorm:"column:description"`
	StrPermissionId string `thrift:"str_permission_id,7" frugal:"7,default,string" json:"str_permission_id" gorm:"column:str_permission_id"`
	Status          bool   `thrift:"status,8" frugal:"8,default,bool" json:"status" gorm:"column:status;default:true"`
}

func NewModelPermission() *ModelPermission {
	return &ModelPermission{}
}

func (p *ModelPermission) InitDefault() {
}

func (p *ModelPermission) GetId() (v int32) {
	return p.Id
}

func (p *ModelPermission) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelPermission) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelPermission) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelPermission) GetName() (v string) {
	return p.Name
}

func (p *ModelPermission) GetDescription() (v string) {
	return p.Description
}

func (p *ModelPermission) GetStrPermissionId() (v string) {
	return p.StrPermissionId
}

func (p *ModelPermission) GetStatus() (v bool) {
	return p.Status
}
func (p *ModelPermission) SetId(val int32) {
	p.Id = val
}
func (p *ModelPermission) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelPermission) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelPermission) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelPermission) SetName(val string) {
	p.Name = val
}
func (p *ModelPermission) SetDescription(val string) {
	p.Description = val
}
func (p *ModelPermission) SetStrPermissionId(val string) {
	p.StrPermissionId = val
}
func (p *ModelPermission) SetStatus(val bool) {
	p.Status = val
}

var fieldIDToName_ModelPermission = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
	6: "description",
	7: "str_permission_id",
	8: "status",
}

func (p *ModelPermission) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelPermission[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelPermission) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelPermission) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelPermission) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelPermission) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelPermission) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelPermission) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelPermission) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StrPermissionId = _field
	return nil
}
func (p *ModelPermission) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *ModelPermission) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelPermission"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelPermission) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelPermission) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelPermission) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelPermission) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelPermission) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelPermission) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelPermission) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str_permission_id", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StrPermissionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelPermission) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelPermission) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelPermission(%+v)", *p)

}

func (p *ModelPermission) DeepEqual(ano *ModelPermission) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.StrPermissionId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ModelPermission) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelPermission) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelPermission) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelPermission) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelPermission) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelPermission) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelPermission) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StrPermissionId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelPermission) Field8DeepEqual(src bool) bool {

	if p.Status != src {
		return false
	}
	return true
}

type ModelUserRole struct {
	Id        int32 `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt int32 `thrift:"created_at,2" frugal:"2,default,i32" json:"created_at"`
	UpdatedAt int32 `thrift:"updated_at,3" frugal:"3,default,i32" json:"updated_at"`
	DeletedAt int32 `thrift:"deleted_at,4" frugal:"4,default,i32" json:"deleted_at"`
	UserId    int32 `thrift:"user_id,5" frugal:"5,default,i32" json:"user_id"`
	RoleId    int32 `thrift:"role_id,6" frugal:"6,default,i32" json:"role_id"`
	AppId     int32 `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id"`
}

func NewModelUserRole() *ModelUserRole {
	return &ModelUserRole{}
}

func (p *ModelUserRole) InitDefault() {
}

func (p *ModelUserRole) GetId() (v int32) {
	return p.Id
}

func (p *ModelUserRole) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelUserRole) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelUserRole) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelUserRole) GetUserId() (v int32) {
	return p.UserId
}

func (p *ModelUserRole) GetRoleId() (v int32) {
	return p.RoleId
}

func (p *ModelUserRole) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelUserRole) SetId(val int32) {
	p.Id = val
}
func (p *ModelUserRole) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelUserRole) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelUserRole) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelUserRole) SetUserId(val int32) {
	p.UserId = val
}
func (p *ModelUserRole) SetRoleId(val int32) {
	p.RoleId = val
}
func (p *ModelUserRole) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelUserRole = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "user_id",
	6: "role_id",
	7: "app_id",
}

func (p *ModelUserRole) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelUserRole[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelUserRole) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelUserRole) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelUserRole) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelUserRole) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelUserRole) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *ModelUserRole) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RoleId = _field
	return nil
}
func (p *ModelUserRole) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelUserRole) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelUserRole"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelUserRole) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelUserRole) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelUserRole) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelUserRole) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelUserRole) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelUserRole) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelUserRole) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelUserRole) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelUserRole(%+v)", *p)

}

func (p *ModelUserRole) DeepEqual(ano *ModelUserRole) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field6DeepEqual(ano.RoleId) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelUserRole) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field5DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field6DeepEqual(src int32) bool {

	if p.RoleId != src {
		return false
	}
	return true
}
func (p *ModelUserRole) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelRolePermission struct {
	Id           int32 `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt    int32 `thrift:"created_at,2" frugal:"2,default,i32" json:"created_at"`
	UpdatedAt    int32 `thrift:"updated_at,3" frugal:"3,default,i32" json:"updated_at"`
	DeletedAt    int32 `thrift:"deleted_at,4" frugal:"4,default,i32" json:"deleted_at"`
	RoleId       int32 `thrift:"role_id,5" frugal:"5,default,i32" json:"role_id"`
	PermissionId int32 `thrift:"permission_id,6" frugal:"6,default,i32" json:"permission_id"`
	AppId        int32 `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id"`
}

func NewModelRolePermission() *ModelRolePermission {
	return &ModelRolePermission{}
}

func (p *ModelRolePermission) InitDefault() {
}

func (p *ModelRolePermission) GetId() (v int32) {
	return p.Id
}

func (p *ModelRolePermission) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelRolePermission) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelRolePermission) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelRolePermission) GetRoleId() (v int32) {
	return p.RoleId
}

func (p *ModelRolePermission) GetPermissionId() (v int32) {
	return p.PermissionId
}

func (p *ModelRolePermission) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelRolePermission) SetId(val int32) {
	p.Id = val
}
func (p *ModelRolePermission) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelRolePermission) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelRolePermission) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelRolePermission) SetRoleId(val int32) {
	p.RoleId = val
}
func (p *ModelRolePermission) SetPermissionId(val int32) {
	p.PermissionId = val
}
func (p *ModelRolePermission) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelRolePermission = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "role_id",
	6: "permission_id",
	7: "app_id",
}

func (p *ModelRolePermission) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelRolePermission[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelRolePermission) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelRolePermission) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelRolePermission) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelRolePermission) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelRolePermission) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RoleId = _field
	return nil
}
func (p *ModelRolePermission) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PermissionId = _field
	return nil
}
func (p *ModelRolePermission) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelRolePermission) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelRolePermission"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelRolePermission) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelRolePermission) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelRolePermission) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelRolePermission) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelRolePermission) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelRolePermission) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("permission_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PermissionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelRolePermission) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelRolePermission) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelRolePermission(%+v)", *p)

}

func (p *ModelRolePermission) DeepEqual(ano *ModelRolePermission) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.RoleId) {
		return false
	}
	if !p.Field6DeepEqual(ano.PermissionId) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelRolePermission) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field5DeepEqual(src int32) bool {

	if p.RoleId != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field6DeepEqual(src int32) bool {

	if p.PermissionId != src {
		return false
	}
	return true
}
func (p *ModelRolePermission) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelRoleMenu struct {
	Id        int32 `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt int32 `thrift:"created_at,2" frugal:"2,default,i32" json:"created_at"`
	UpdatedAt int32 `thrift:"updated_at,3" frugal:"3,default,i32" json:"updated_at"`
	DeletedAt int32 `thrift:"deleted_at,4" frugal:"4,default,i32" json:"deleted_at"`
	RoleId    int32 `thrift:"role_id,5" frugal:"5,default,i32" json:"role_id"`
	MenuId    int32 `thrift:"menu_id,6" frugal:"6,default,i32" json:"menu_id"`
	AppId     int32 `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id"`
}

func NewModelRoleMenu() *ModelRoleMenu {
	return &ModelRoleMenu{}
}

func (p *ModelRoleMenu) InitDefault() {
}

func (p *ModelRoleMenu) GetId() (v int32) {
	return p.Id
}

func (p *ModelRoleMenu) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelRoleMenu) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelRoleMenu) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelRoleMenu) GetRoleId() (v int32) {
	return p.RoleId
}

func (p *ModelRoleMenu) GetMenuId() (v int32) {
	return p.MenuId
}

func (p *ModelRoleMenu) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelRoleMenu) SetId(val int32) {
	p.Id = val
}
func (p *ModelRoleMenu) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelRoleMenu) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelRoleMenu) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelRoleMenu) SetRoleId(val int32) {
	p.RoleId = val
}
func (p *ModelRoleMenu) SetMenuId(val int32) {
	p.MenuId = val
}
func (p *ModelRoleMenu) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelRoleMenu = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "role_id",
	6: "menu_id",
	7: "app_id",
}

func (p *ModelRoleMenu) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelRoleMenu[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelRoleMenu) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelRoleMenu) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelRoleMenu) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelRoleMenu) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelRoleMenu) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RoleId = _field
	return nil
}
func (p *ModelRoleMenu) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MenuId = _field
	return nil
}
func (p *ModelRoleMenu) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelRoleMenu) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelRoleMenu"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelRoleMenu) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RoleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("menu_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MenuId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelRoleMenu) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelRoleMenu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelRoleMenu(%+v)", *p)

}

func (p *ModelRoleMenu) DeepEqual(ano *ModelRoleMenu) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.RoleId) {
		return false
	}
	if !p.Field6DeepEqual(ano.MenuId) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelRoleMenu) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field5DeepEqual(src int32) bool {

	if p.RoleId != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field6DeepEqual(src int32) bool {

	if p.MenuId != src {
		return false
	}
	return true
}
func (p *ModelRoleMenu) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelTeacherOffice struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name        string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	Description string `thrift:"description,6" frugal:"6,default,string" json:"description" gorm:"column:description"`
	AppId       int32  `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
	Name2       string `thrift:"name2,8" frugal:"8,default,string" json:"name2" gorm:"column:name2"`
	Order       int32  `thrift:"order,9" frugal:"9,default,i32" json:"order" gorm:"column:order"`
	Category    int32  `thrift:"category,10" frugal:"10,default,i32" json:"category" gorm:"column:category"`
}

func NewModelTeacherOffice() *ModelTeacherOffice {
	return &ModelTeacherOffice{}
}

func (p *ModelTeacherOffice) InitDefault() {
}

func (p *ModelTeacherOffice) GetId() (v int32) {
	return p.Id
}

func (p *ModelTeacherOffice) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelTeacherOffice) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelTeacherOffice) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelTeacherOffice) GetName() (v string) {
	return p.Name
}

func (p *ModelTeacherOffice) GetDescription() (v string) {
	return p.Description
}

func (p *ModelTeacherOffice) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelTeacherOffice) GetName2() (v string) {
	return p.Name2
}

func (p *ModelTeacherOffice) GetOrder() (v int32) {
	return p.Order
}

func (p *ModelTeacherOffice) GetCategory() (v int32) {
	return p.Category
}
func (p *ModelTeacherOffice) SetId(val int32) {
	p.Id = val
}
func (p *ModelTeacherOffice) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelTeacherOffice) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelTeacherOffice) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelTeacherOffice) SetName(val string) {
	p.Name = val
}
func (p *ModelTeacherOffice) SetDescription(val string) {
	p.Description = val
}
func (p *ModelTeacherOffice) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelTeacherOffice) SetName2(val string) {
	p.Name2 = val
}
func (p *ModelTeacherOffice) SetOrder(val int32) {
	p.Order = val
}
func (p *ModelTeacherOffice) SetCategory(val int32) {
	p.Category = val
}

var fieldIDToName_ModelTeacherOffice = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "name",
	6:  "description",
	7:  "app_id",
	8:  "name2",
	9:  "order",
	10: "category",
}

func (p *ModelTeacherOffice) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelTeacherOffice[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelTeacherOffice) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name2 = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}
func (p *ModelTeacherOffice) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Category = _field
	return nil
}

func (p *ModelTeacherOffice) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelTeacherOffice"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name2", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelTeacherOffice) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("category", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelTeacherOffice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelTeacherOffice(%+v)", *p)

}

func (p *ModelTeacherOffice) DeepEqual(ano *ModelTeacherOffice) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Name2) {
		return false
	}
	if !p.Field9DeepEqual(ano.Order) {
		return false
	}
	if !p.Field10DeepEqual(ano.Category) {
		return false
	}
	return true
}

func (p *ModelTeacherOffice) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Name2, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field9DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}
func (p *ModelTeacherOffice) Field10DeepEqual(src int32) bool {

	if p.Category != src {
		return false
	}
	return true
}

type ModelDuties struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name        string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	Description string `thrift:"description,6" frugal:"6,default,string" json:"description" gorm:"column:description"`
	AppId       int32  `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
	Order       string `thrift:"order,8" frugal:"8,default,string" json:"order" gorm:"column:order"`
}

func NewModelDuties() *ModelDuties {
	return &ModelDuties{}
}

func (p *ModelDuties) InitDefault() {
}

func (p *ModelDuties) GetId() (v int32) {
	return p.Id
}

func (p *ModelDuties) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelDuties) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelDuties) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelDuties) GetName() (v string) {
	return p.Name
}

func (p *ModelDuties) GetDescription() (v string) {
	return p.Description
}

func (p *ModelDuties) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelDuties) GetOrder() (v string) {
	return p.Order
}
func (p *ModelDuties) SetId(val int32) {
	p.Id = val
}
func (p *ModelDuties) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelDuties) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelDuties) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelDuties) SetName(val string) {
	p.Name = val
}
func (p *ModelDuties) SetDescription(val string) {
	p.Description = val
}
func (p *ModelDuties) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelDuties) SetOrder(val string) {
	p.Order = val
}

var fieldIDToName_ModelDuties = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
	6: "description",
	7: "app_id",
	8: "order",
}

func (p *ModelDuties) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelDuties[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelDuties) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelDuties) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelDuties) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelDuties) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelDuties) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelDuties) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelDuties) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelDuties) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}

func (p *ModelDuties) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelDuties"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelDuties) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelDuties) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelDuties) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelDuties) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelDuties) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelDuties) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelDuties) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelDuties) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelDuties) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelDuties(%+v)", *p)

}

func (p *ModelDuties) DeepEqual(ano *ModelDuties) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Order) {
		return false
	}
	return true
}

func (p *ModelDuties) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelDuties) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelDuties) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelDuties) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelDuties) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelDuties) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelDuties) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelDuties) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Order, src) != 0 {
		return false
	}
	return true
}

type ModelCategory struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name        string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	Description string `thrift:"description,6" frugal:"6,default,string" json:"description" gorm:"column:description"`
	AppId       int32  `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
}

func NewModelCategory() *ModelCategory {
	return &ModelCategory{}
}

func (p *ModelCategory) InitDefault() {
}

func (p *ModelCategory) GetId() (v int32) {
	return p.Id
}

func (p *ModelCategory) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelCategory) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelCategory) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelCategory) GetName() (v string) {
	return p.Name
}

func (p *ModelCategory) GetDescription() (v string) {
	return p.Description
}

func (p *ModelCategory) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelCategory) SetId(val int32) {
	p.Id = val
}
func (p *ModelCategory) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelCategory) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelCategory) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelCategory) SetName(val string) {
	p.Name = val
}
func (p *ModelCategory) SetDescription(val string) {
	p.Description = val
}
func (p *ModelCategory) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelCategory = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
	6: "description",
	7: "app_id",
}

func (p *ModelCategory) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelCategory[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelCategory) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelCategory) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelCategory) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelCategory) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelCategory) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelCategory) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelCategory) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelCategory) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelCategory"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelCategory) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelCategory) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelCategory) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelCategory) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelCategory) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelCategory) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelCategory) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelCategory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelCategory(%+v)", *p)

}

func (p *ModelCategory) DeepEqual(ano *ModelCategory) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelCategory) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelCategory) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelCategory) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelCategory) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelCategory) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCategory) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCategory) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelCourse struct {
	Id                    int32   `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt             int32   `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt             int32   `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt             int32   `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	AcademicYear          string  `thrift:"academic_year,5" frugal:"5,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester              string  `thrift:"semester,6" frugal:"6,default,string" json:"semester" gorm:"column:semester"`
	AppId                 int32   `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
	TeacherId             string  `thrift:"teacher_id,8" frugal:"8,default,string" json:"teacher_id" gorm:"column:teacher_id"`
	TeacherName           string  `thrift:"teacher_name,9" frugal:"9,default,string" json:"teacher_name" gorm:"column:teacher_name"`
	CourseType            string  `thrift:"course_type,10" frugal:"10,default,string" json:"course_type" gorm:"column:course_type"`
	CourseCode            string  `thrift:"course_code,11" frugal:"11,default,string" json:"course_code" gorm:"column:course_code"`
	CourseName            string  `thrift:"course_name,12" frugal:"12,default,string" json:"course_name" gorm:"column:course_name"`
	College               string  `thrift:"college,13" frugal:"13,default,string" json:"college" gorm:"column:college"`
	IsCoreCourse          int32   `thrift:"is_core_course,14" frugal:"14,default,i32" json:"is_core_course" gorm:"column:is_core_course"`
	Credit                float64 `thrift:"credit,15" frugal:"15,default,double" json:"credit" gorm:"column:credit"`
	TeachClass            string  `thrift:"teach_class,16" frugal:"16,default,string" json:"teach_class" gorm:"column:teach_class"`
	ClassName             string  `thrift:"class_name,17" frugal:"17,default,string" json:"class_name" gorm:"column:class_name"`
	WeekHour              int32   `thrift:"week_hour,18" frugal:"18,default,i32" json:"week_hour" gorm:"column:week_hour"`
	StartWeek             int32   `thrift:"start_week,19" frugal:"19,default,i32" json:"start_week" gorm:"column:start_week"`
	EndWeek               int32   `thrift:"end_week,20" frugal:"20,default,i32" json:"end_week" gorm:"column:end_week"`
	SaeWeek               string  `thrift:"sae_week,21" frugal:"21,default,string" json:"sae_week" gorm:"column:sae_week"`
	ClassHourType         string  `thrift:"class_hour_type,22" frugal:"22,default,string" json:"class_hour_type" gorm:"column:class_hour_type"`
	TaskHours             int32   `thrift:"task_hours,23" frugal:"23,default,i32" json:"task_hours" gorm:"column:task_hours"`
	AtaskHours            int32   `thrift:"atask_hours,24" frugal:"24,default,i32" json:"atask_hours" gorm:"column:atask_hours"`
	CourseCategory        string  `thrift:"course_category,25" frugal:"25,default,string" json:"course_category" gorm:"column:course_category"`
	CourseNature          string  `thrift:"course_nature,26" frugal:"26,default,string" json:"course_nature" gorm:"column:course_nature"`
	GradeEntryTeacher     string  `thrift:"grade_entry_teacher,27" frugal:"27,default,string" json:"grade_entry_teacher" gorm:"column:grade_entry_teacher"`
	ClassTime             string  `thrift:"class_time,28" frugal:"28,default,string" json:"class_time" gorm:"column:class_time"`
	TeachLocation         string  `thrift:"teach_location,29" frugal:"29,default,string" json:"teach_location" gorm:"column:teach_location"`
	Direction             string  `thrift:"direction,30" frugal:"30,default,string" json:"direction" gorm:"column:direction"`
	AssessmentMethod      string  `thrift:"assessment_method,31" frugal:"31,default,string" json:"assessment_method" gorm:"column:assessment_method"`
	Grade                 string  `thrift:"grade,32" frugal:"32,default,string" json:"grade" gorm:"column:grade"`
	Object                string  `thrift:"object,33" frugal:"33,default,string" json:"object" gorm:"column:object"`
	Speciality            string  `thrift:"speciality,34" frugal:"34,default,string" json:"speciality" gorm:"column:speciality"`
	StudentNumber         int32   `thrift:"student_number,35" frugal:"35,default,i32" json:"student_number" gorm:"column:student_number"`
	RebuildNumber         int32   `thrift:"rebuild_number,36" frugal:"36,default,i32" json:"rebuild_number" gorm:"column:rebuild_number"`
	IsAdjust              bool    `thrift:"is_adjust,37" frugal:"37,default,bool" json:"is_adjust" gorm:"column:is_adjust"`
	IsCollaborativeCourse bool    `thrift:"is_collaborative_course,38" frugal:"38,default,bool" json:"is_collaborative_course" gorm:"column:is_collaborative_course"`
	StrCourseId           string  `thrift:"str_course_id,39" frugal:"39,default,string" json:"str_course_id" gorm:"column:str_course_id"`
}

func NewModelCourse() *ModelCourse {
	return &ModelCourse{}
}

func (p *ModelCourse) InitDefault() {
}

func (p *ModelCourse) GetId() (v int32) {
	return p.Id
}

func (p *ModelCourse) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelCourse) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelCourse) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelCourse) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelCourse) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelCourse) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelCourse) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *ModelCourse) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ModelCourse) GetCourseType() (v string) {
	return p.CourseType
}

func (p *ModelCourse) GetCourseCode() (v string) {
	return p.CourseCode
}

func (p *ModelCourse) GetCourseName() (v string) {
	return p.CourseName
}

func (p *ModelCourse) GetCollege() (v string) {
	return p.College
}

func (p *ModelCourse) GetIsCoreCourse() (v int32) {
	return p.IsCoreCourse
}

func (p *ModelCourse) GetCredit() (v float64) {
	return p.Credit
}

func (p *ModelCourse) GetTeachClass() (v string) {
	return p.TeachClass
}

func (p *ModelCourse) GetClassName() (v string) {
	return p.ClassName
}

func (p *ModelCourse) GetWeekHour() (v int32) {
	return p.WeekHour
}

func (p *ModelCourse) GetStartWeek() (v int32) {
	return p.StartWeek
}

func (p *ModelCourse) GetEndWeek() (v int32) {
	return p.EndWeek
}

func (p *ModelCourse) GetSaeWeek() (v string) {
	return p.SaeWeek
}

func (p *ModelCourse) GetClassHourType() (v string) {
	return p.ClassHourType
}

func (p *ModelCourse) GetTaskHours() (v int32) {
	return p.TaskHours
}

func (p *ModelCourse) GetAtaskHours() (v int32) {
	return p.AtaskHours
}

func (p *ModelCourse) GetCourseCategory() (v string) {
	return p.CourseCategory
}

func (p *ModelCourse) GetCourseNature() (v string) {
	return p.CourseNature
}

func (p *ModelCourse) GetGradeEntryTeacher() (v string) {
	return p.GradeEntryTeacher
}

func (p *ModelCourse) GetClassTime() (v string) {
	return p.ClassTime
}

func (p *ModelCourse) GetTeachLocation() (v string) {
	return p.TeachLocation
}

func (p *ModelCourse) GetDirection() (v string) {
	return p.Direction
}

func (p *ModelCourse) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}

func (p *ModelCourse) GetGrade() (v string) {
	return p.Grade
}

func (p *ModelCourse) GetObject() (v string) {
	return p.Object
}

func (p *ModelCourse) GetSpeciality() (v string) {
	return p.Speciality
}

func (p *ModelCourse) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *ModelCourse) GetRebuildNumber() (v int32) {
	return p.RebuildNumber
}

func (p *ModelCourse) GetIsAdjust() (v bool) {
	return p.IsAdjust
}

func (p *ModelCourse) GetIsCollaborativeCourse() (v bool) {
	return p.IsCollaborativeCourse
}

func (p *ModelCourse) GetStrCourseId() (v string) {
	return p.StrCourseId
}
func (p *ModelCourse) SetId(val int32) {
	p.Id = val
}
func (p *ModelCourse) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelCourse) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelCourse) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelCourse) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelCourse) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelCourse) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelCourse) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *ModelCourse) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ModelCourse) SetCourseType(val string) {
	p.CourseType = val
}
func (p *ModelCourse) SetCourseCode(val string) {
	p.CourseCode = val
}
func (p *ModelCourse) SetCourseName(val string) {
	p.CourseName = val
}
func (p *ModelCourse) SetCollege(val string) {
	p.College = val
}
func (p *ModelCourse) SetIsCoreCourse(val int32) {
	p.IsCoreCourse = val
}
func (p *ModelCourse) SetCredit(val float64) {
	p.Credit = val
}
func (p *ModelCourse) SetTeachClass(val string) {
	p.TeachClass = val
}
func (p *ModelCourse) SetClassName(val string) {
	p.ClassName = val
}
func (p *ModelCourse) SetWeekHour(val int32) {
	p.WeekHour = val
}
func (p *ModelCourse) SetStartWeek(val int32) {
	p.StartWeek = val
}
func (p *ModelCourse) SetEndWeek(val int32) {
	p.EndWeek = val
}
func (p *ModelCourse) SetSaeWeek(val string) {
	p.SaeWeek = val
}
func (p *ModelCourse) SetClassHourType(val string) {
	p.ClassHourType = val
}
func (p *ModelCourse) SetTaskHours(val int32) {
	p.TaskHours = val
}
func (p *ModelCourse) SetAtaskHours(val int32) {
	p.AtaskHours = val
}
func (p *ModelCourse) SetCourseCategory(val string) {
	p.CourseCategory = val
}
func (p *ModelCourse) SetCourseNature(val string) {
	p.CourseNature = val
}
func (p *ModelCourse) SetGradeEntryTeacher(val string) {
	p.GradeEntryTeacher = val
}
func (p *ModelCourse) SetClassTime(val string) {
	p.ClassTime = val
}
func (p *ModelCourse) SetTeachLocation(val string) {
	p.TeachLocation = val
}
func (p *ModelCourse) SetDirection(val string) {
	p.Direction = val
}
func (p *ModelCourse) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}
func (p *ModelCourse) SetGrade(val string) {
	p.Grade = val
}
func (p *ModelCourse) SetObject(val string) {
	p.Object = val
}
func (p *ModelCourse) SetSpeciality(val string) {
	p.Speciality = val
}
func (p *ModelCourse) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *ModelCourse) SetRebuildNumber(val int32) {
	p.RebuildNumber = val
}
func (p *ModelCourse) SetIsAdjust(val bool) {
	p.IsAdjust = val
}
func (p *ModelCourse) SetIsCollaborativeCourse(val bool) {
	p.IsCollaborativeCourse = val
}
func (p *ModelCourse) SetStrCourseId(val string) {
	p.StrCourseId = val
}

var fieldIDToName_ModelCourse = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "academic_year",
	6:  "semester",
	7:  "app_id",
	8:  "teacher_id",
	9:  "teacher_name",
	10: "course_type",
	11: "course_code",
	12: "course_name",
	13: "college",
	14: "is_core_course",
	15: "credit",
	16: "teach_class",
	17: "class_name",
	18: "week_hour",
	19: "start_week",
	20: "end_week",
	21: "sae_week",
	22: "class_hour_type",
	23: "task_hours",
	24: "atask_hours",
	25: "course_category",
	26: "course_nature",
	27: "grade_entry_teacher",
	28: "class_time",
	29: "teach_location",
	30: "direction",
	31: "assessment_method",
	32: "grade",
	33: "object",
	34: "speciality",
	35: "student_number",
	36: "rebuild_number",
	37: "is_adjust",
	38: "is_collaborative_course",
	39: "str_course_id",
}

func (p *ModelCourse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 38:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 39:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField39(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelCourse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelCourse) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelCourse) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelCourse) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelCourse) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelCourse) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelCourse) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelCourse) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelCourse) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *ModelCourse) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ModelCourse) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseType = _field
	return nil
}
func (p *ModelCourse) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseCode = _field
	return nil
}
func (p *ModelCourse) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *ModelCourse) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.College = _field
	return nil
}
func (p *ModelCourse) ReadField14(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCoreCourse = _field
	return nil
}
func (p *ModelCourse) ReadField15(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Credit = _field
	return nil
}
func (p *ModelCourse) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClass = _field
	return nil
}
func (p *ModelCourse) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *ModelCourse) ReadField18(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WeekHour = _field
	return nil
}
func (p *ModelCourse) ReadField19(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *ModelCourse) ReadField20(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndWeek = _field
	return nil
}
func (p *ModelCourse) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SaeWeek = _field
	return nil
}
func (p *ModelCourse) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassHourType = _field
	return nil
}
func (p *ModelCourse) ReadField23(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskHours = _field
	return nil
}
func (p *ModelCourse) ReadField24(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AtaskHours = _field
	return nil
}
func (p *ModelCourse) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseCategory = _field
	return nil
}
func (p *ModelCourse) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseNature = _field
	return nil
}
func (p *ModelCourse) ReadField27(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GradeEntryTeacher = _field
	return nil
}
func (p *ModelCourse) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassTime = _field
	return nil
}
func (p *ModelCourse) ReadField29(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachLocation = _field
	return nil
}
func (p *ModelCourse) ReadField30(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Direction = _field
	return nil
}
func (p *ModelCourse) ReadField31(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}
func (p *ModelCourse) ReadField32(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Grade = _field
	return nil
}
func (p *ModelCourse) ReadField33(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Object = _field
	return nil
}
func (p *ModelCourse) ReadField34(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Speciality = _field
	return nil
}
func (p *ModelCourse) ReadField35(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *ModelCourse) ReadField36(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RebuildNumber = _field
	return nil
}
func (p *ModelCourse) ReadField37(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAdjust = _field
	return nil
}
func (p *ModelCourse) ReadField38(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCollaborativeCourse = _field
	return nil
}
func (p *ModelCourse) ReadField39(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StrCourseId = _field
	return nil
}

func (p *ModelCourse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelCourse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
		if err = p.writeField39(oprot); err != nil {
			fieldId = 39
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelCourse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelCourse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelCourse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelCourse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelCourse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelCourse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelCourse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelCourse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelCourse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelCourse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_type", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelCourse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_code", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelCourse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelCourse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("college", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.College); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelCourse) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_core_course", thrift.I32, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsCoreCourse); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelCourse) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credit", thrift.DOUBLE, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Credit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelCourse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClass); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelCourse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelCourse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week_hour", thrift.I32, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.WeekHour); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ModelCourse) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.I32, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ModelCourse) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_week", thrift.I32, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ModelCourse) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sae_week", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SaeWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ModelCourse) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_hour_type", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassHourType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ModelCourse) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_hours", thrift.I32, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TaskHours); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ModelCourse) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("atask_hours", thrift.I32, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AtaskHours); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ModelCourse) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_category", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseCategory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ModelCourse) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_nature", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseNature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ModelCourse) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grade_entry_teacher", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GradeEntryTeacher); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *ModelCourse) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_time", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *ModelCourse) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_location", thrift.STRING, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachLocation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *ModelCourse) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("direction", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Direction); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *ModelCourse) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *ModelCourse) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grade", thrift.STRING, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Grade); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *ModelCourse) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object", thrift.STRING, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Object); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *ModelCourse) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("speciality", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Speciality); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *ModelCourse) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *ModelCourse) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rebuild_number", thrift.I32, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RebuildNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *ModelCourse) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_adjust", thrift.BOOL, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsAdjust); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *ModelCourse) writeField38(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_collaborative_course", thrift.BOOL, 38); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsCollaborativeCourse); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *ModelCourse) writeField39(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str_course_id", thrift.STRING, 39); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StrCourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 end error: ", p), err)
}

func (p *ModelCourse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelCourse(%+v)", *p)

}

func (p *ModelCourse) DeepEqual(ano *ModelCourse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field6DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field8DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field9DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field10DeepEqual(ano.CourseType) {
		return false
	}
	if !p.Field11DeepEqual(ano.CourseCode) {
		return false
	}
	if !p.Field12DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field13DeepEqual(ano.College) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsCoreCourse) {
		return false
	}
	if !p.Field15DeepEqual(ano.Credit) {
		return false
	}
	if !p.Field16DeepEqual(ano.TeachClass) {
		return false
	}
	if !p.Field17DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field18DeepEqual(ano.WeekHour) {
		return false
	}
	if !p.Field19DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field20DeepEqual(ano.EndWeek) {
		return false
	}
	if !p.Field21DeepEqual(ano.SaeWeek) {
		return false
	}
	if !p.Field22DeepEqual(ano.ClassHourType) {
		return false
	}
	if !p.Field23DeepEqual(ano.TaskHours) {
		return false
	}
	if !p.Field24DeepEqual(ano.AtaskHours) {
		return false
	}
	if !p.Field25DeepEqual(ano.CourseCategory) {
		return false
	}
	if !p.Field26DeepEqual(ano.CourseNature) {
		return false
	}
	if !p.Field27DeepEqual(ano.GradeEntryTeacher) {
		return false
	}
	if !p.Field28DeepEqual(ano.ClassTime) {
		return false
	}
	if !p.Field29DeepEqual(ano.TeachLocation) {
		return false
	}
	if !p.Field30DeepEqual(ano.Direction) {
		return false
	}
	if !p.Field31DeepEqual(ano.AssessmentMethod) {
		return false
	}
	if !p.Field32DeepEqual(ano.Grade) {
		return false
	}
	if !p.Field33DeepEqual(ano.Object) {
		return false
	}
	if !p.Field34DeepEqual(ano.Speciality) {
		return false
	}
	if !p.Field35DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field36DeepEqual(ano.RebuildNumber) {
		return false
	}
	if !p.Field37DeepEqual(ano.IsAdjust) {
		return false
	}
	if !p.Field38DeepEqual(ano.IsCollaborativeCourse) {
		return false
	}
	if !p.Field39DeepEqual(ano.StrCourseId) {
		return false
	}
	return true
}

func (p *ModelCourse) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CourseType, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.CourseCode, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field13DeepEqual(src string) bool {

	if strings.Compare(p.College, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field14DeepEqual(src int32) bool {

	if p.IsCoreCourse != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field15DeepEqual(src float64) bool {

	if p.Credit != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field16DeepEqual(src string) bool {

	if strings.Compare(p.TeachClass, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field17DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field18DeepEqual(src int32) bool {

	if p.WeekHour != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field19DeepEqual(src int32) bool {

	if p.StartWeek != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field20DeepEqual(src int32) bool {

	if p.EndWeek != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field21DeepEqual(src string) bool {

	if strings.Compare(p.SaeWeek, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field22DeepEqual(src string) bool {

	if strings.Compare(p.ClassHourType, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field23DeepEqual(src int32) bool {

	if p.TaskHours != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field24DeepEqual(src int32) bool {

	if p.AtaskHours != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field25DeepEqual(src string) bool {

	if strings.Compare(p.CourseCategory, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field26DeepEqual(src string) bool {

	if strings.Compare(p.CourseNature, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field27DeepEqual(src string) bool {

	if strings.Compare(p.GradeEntryTeacher, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field28DeepEqual(src string) bool {

	if strings.Compare(p.ClassTime, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field29DeepEqual(src string) bool {

	if strings.Compare(p.TeachLocation, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field30DeepEqual(src string) bool {

	if strings.Compare(p.Direction, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field31DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field32DeepEqual(src string) bool {

	if strings.Compare(p.Grade, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field33DeepEqual(src string) bool {

	if strings.Compare(p.Object, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field34DeepEqual(src string) bool {

	if strings.Compare(p.Speciality, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourse) Field35DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field36DeepEqual(src int32) bool {

	if p.RebuildNumber != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field37DeepEqual(src bool) bool {

	if p.IsAdjust != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field38DeepEqual(src bool) bool {

	if p.IsCollaborativeCourse != src {
		return false
	}
	return true
}
func (p *ModelCourse) Field39DeepEqual(src string) bool {

	if strings.Compare(p.StrCourseId, src) != 0 {
		return false
	}
	return true
}

type ModelClass struct {
	Id          int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt   int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt   int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt   int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name        string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	Description string `thrift:"description,6" frugal:"6,default,string" json:"description" gorm:"column:description"`
	AppId       int32  `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
}

func NewModelClass() *ModelClass {
	return &ModelClass{}
}

func (p *ModelClass) InitDefault() {
}

func (p *ModelClass) GetId() (v int32) {
	return p.Id
}

func (p *ModelClass) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelClass) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelClass) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelClass) GetName() (v string) {
	return p.Name
}

func (p *ModelClass) GetDescription() (v string) {
	return p.Description
}

func (p *ModelClass) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelClass) SetId(val int32) {
	p.Id = val
}
func (p *ModelClass) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelClass) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelClass) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelClass) SetName(val string) {
	p.Name = val
}
func (p *ModelClass) SetDescription(val string) {
	p.Description = val
}
func (p *ModelClass) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelClass = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
	6: "description",
	7: "app_id",
}

func (p *ModelClass) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelClass[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelClass) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelClass) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelClass) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelClass) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelClass) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelClass) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *ModelClass) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelClass) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelClass"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelClass) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelClass) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelClass) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelClass) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelClass) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelClass) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelClass) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelClass) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelClass(%+v)", *p)

}

func (p *ModelClass) DeepEqual(ano *ModelClass) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelClass) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelClass) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelClass) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelClass) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelClass) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelClass) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ModelClass) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelCourseApply struct {
	Id                      int32   `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt               int32   `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt               int32   `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt               int32   `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Department              string  `thrift:"department,5" frugal:"5,default,string" json:"department" gorm:"column:department"`
	AcademicYear            string  `thrift:"academic_year,6" frugal:"6,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester                string  `thrift:"semester,7" frugal:"7,default,string" json:"semester" gorm:"column:semester"`
	AppId                   int32   `thrift:"app_id,8" frugal:"8,default,i32" json:"app_id" gorm:"column:app_id"`
	OfficeId                int32   `thrift:"office_id,9" frugal:"9,default,i32" json:"office_id" gorm:"column:office_id"`
	CourseName              string  `thrift:"course_name,10" frugal:"10,default,string" json:"course_name" gorm:"column:course_name"`
	ClassId                 int32   `thrift:"class_id,11" frugal:"11,default,i32" json:"class_id" gorm:"column:class_id"`
	TeachClassName          string  `thrift:"teach_class_name,12" frugal:"12,default,string" json:"teach_class_name" gorm:"column:teach_class_name"`
	TeacherName             string  `thrift:"teacher_name,13" frugal:"13,default,string" json:"teacher_name" gorm:"column:teacher_name"`
	TotalHours              int64   `thrift:"total_hours,14" frugal:"14,default,i64" json:"total_hours" gorm:"column:total_hours"`
	TotalStudents           int64   `thrift:"total_students,15" frugal:"15,default,i64" json:"total_students" gorm:"column:total_students"`
	Credit                  float64 `thrift:"credit,16" frugal:"16,default,double" json:"credit" gorm:"column:credit"`
	CourseNature            string  `thrift:"course_nature,17" frugal:"17,default,string" json:"course_nature" gorm:"column:course_nature"`
	StartWeek               string  `thrift:"start_week,18" frugal:"18,default,string" json:"start_week" gorm:"column:start_week"`
	OnlinePlatformName      string  `thrift:"online_platform_name,19" frugal:"19,default,string" json:"online_platform_name" gorm:"column:online_platform_name"`
	TeacherId               string  `thrift:"teacher_id,20" frugal:"20,default,string" json:"teacher_id" gorm:"column:teacher_id"`
	OtherOnlinePlatformName string  `thrift:"other_online_platform_name,21" frugal:"21,default,string" json:"other_online_platform_name" gorm:"column:other_online_platform_name"`
	TeachingResourceName    string  `thrift:"teaching_resource_name,22" frugal:"22,default,string" json:"teaching_resource_name" gorm:"column:teaching_resource_name"`
	IsBuildPartner          int32   `thrift:"is_build_partner,23" frugal:"23,default,i32" json:"is_build_partner" gorm:"column:is_build_partner;default:2"`
	IsSelfProperty          int32   `thrift:"is_self_property,24" frugal:"24,default,i32" json:"is_self_property" gorm:"column:is_self_property;default:2"`
	IsUseOtherResource      int32   `thrift:"is_use_other_resource,25" frugal:"25,default,i32" json:"is_use_other_resource" gorm:"column:is_use_other_resource;default:2"`
	OtherResourceName       string  `thrift:"other_resource_name,26" frugal:"26,default,string" json:"other_resource_name" gorm:"column:other_resource_name;type:text"`
	ResourceBuildPartner    string  `thrift:"resource_build_partner,27" frugal:"27,default,string" json:"resource_build_partner" gorm:"column:resource_build_partner"`
	TeamTeacherName         string  `thrift:"team_teacher_name,28" frugal:"28,default,string" json:"team_teacher_name" gorm:"column:team_teacher_name"`
	Remark                  string  `thrift:"remark,29" frugal:"29,default,string" json:"remark" gorm:"column:remark;type:text"`
	Url                     string  `thrift:"url,30" frugal:"30,default,string" json:"url" gorm:"column:url;type:text"`
	IsnotAccount            string  `thrift:"isnot_account,31" frugal:"31,default,string" json:"isnot_account" gorm:"column:isnot_account"`
	IsnotPassword           string  `thrift:"isnot_password,32" frugal:"32,default,string" json:"isnot_password" gorm:"column:isnot_password"`
	Opinion                 string  `thrift:"opinion,33" frugal:"33,default,string" json:"opinion" gorm:"column:opinion"`
	Examination             int32   `thrift:"examination,34" frugal:"34,default,i32" json:"examination" gorm:"column:examination"`
	IsActive                int32   `thrift:"is_active,35" frugal:"35,default,i32" json:"is_active" gorm:"column:is_active;default:1"`
	IsFill                  bool    `thrift:"is_fill,36" frugal:"36,default,bool" json:"is_fill" gorm:"column:is_fill;default:false"`
}

func NewModelCourseApply() *ModelCourseApply {
	return &ModelCourseApply{}
}

func (p *ModelCourseApply) InitDefault() {
}

func (p *ModelCourseApply) GetId() (v int32) {
	return p.Id
}

func (p *ModelCourseApply) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelCourseApply) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelCourseApply) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelCourseApply) GetDepartment() (v string) {
	return p.Department
}

func (p *ModelCourseApply) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelCourseApply) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelCourseApply) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelCourseApply) GetOfficeId() (v int32) {
	return p.OfficeId
}

func (p *ModelCourseApply) GetCourseName() (v string) {
	return p.CourseName
}

func (p *ModelCourseApply) GetClassId() (v int32) {
	return p.ClassId
}

func (p *ModelCourseApply) GetTeachClassName() (v string) {
	return p.TeachClassName
}

func (p *ModelCourseApply) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ModelCourseApply) GetTotalHours() (v int64) {
	return p.TotalHours
}

func (p *ModelCourseApply) GetTotalStudents() (v int64) {
	return p.TotalStudents
}

func (p *ModelCourseApply) GetCredit() (v float64) {
	return p.Credit
}

func (p *ModelCourseApply) GetCourseNature() (v string) {
	return p.CourseNature
}

func (p *ModelCourseApply) GetStartWeek() (v string) {
	return p.StartWeek
}

func (p *ModelCourseApply) GetOnlinePlatformName() (v string) {
	return p.OnlinePlatformName
}

func (p *ModelCourseApply) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *ModelCourseApply) GetOtherOnlinePlatformName() (v string) {
	return p.OtherOnlinePlatformName
}

func (p *ModelCourseApply) GetTeachingResourceName() (v string) {
	return p.TeachingResourceName
}

func (p *ModelCourseApply) GetIsBuildPartner() (v int32) {
	return p.IsBuildPartner
}

func (p *ModelCourseApply) GetIsSelfProperty() (v int32) {
	return p.IsSelfProperty
}

func (p *ModelCourseApply) GetIsUseOtherResource() (v int32) {
	return p.IsUseOtherResource
}

func (p *ModelCourseApply) GetOtherResourceName() (v string) {
	return p.OtherResourceName
}

func (p *ModelCourseApply) GetResourceBuildPartner() (v string) {
	return p.ResourceBuildPartner
}

func (p *ModelCourseApply) GetTeamTeacherName() (v string) {
	return p.TeamTeacherName
}

func (p *ModelCourseApply) GetRemark() (v string) {
	return p.Remark
}

func (p *ModelCourseApply) GetUrl() (v string) {
	return p.Url
}

func (p *ModelCourseApply) GetIsnotAccount() (v string) {
	return p.IsnotAccount
}

func (p *ModelCourseApply) GetIsnotPassword() (v string) {
	return p.IsnotPassword
}

func (p *ModelCourseApply) GetOpinion() (v string) {
	return p.Opinion
}

func (p *ModelCourseApply) GetExamination() (v int32) {
	return p.Examination
}

func (p *ModelCourseApply) GetIsActive() (v int32) {
	return p.IsActive
}

func (p *ModelCourseApply) GetIsFill() (v bool) {
	return p.IsFill
}
func (p *ModelCourseApply) SetId(val int32) {
	p.Id = val
}
func (p *ModelCourseApply) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelCourseApply) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelCourseApply) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelCourseApply) SetDepartment(val string) {
	p.Department = val
}
func (p *ModelCourseApply) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelCourseApply) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelCourseApply) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelCourseApply) SetOfficeId(val int32) {
	p.OfficeId = val
}
func (p *ModelCourseApply) SetCourseName(val string) {
	p.CourseName = val
}
func (p *ModelCourseApply) SetClassId(val int32) {
	p.ClassId = val
}
func (p *ModelCourseApply) SetTeachClassName(val string) {
	p.TeachClassName = val
}
func (p *ModelCourseApply) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ModelCourseApply) SetTotalHours(val int64) {
	p.TotalHours = val
}
func (p *ModelCourseApply) SetTotalStudents(val int64) {
	p.TotalStudents = val
}
func (p *ModelCourseApply) SetCredit(val float64) {
	p.Credit = val
}
func (p *ModelCourseApply) SetCourseNature(val string) {
	p.CourseNature = val
}
func (p *ModelCourseApply) SetStartWeek(val string) {
	p.StartWeek = val
}
func (p *ModelCourseApply) SetOnlinePlatformName(val string) {
	p.OnlinePlatformName = val
}
func (p *ModelCourseApply) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *ModelCourseApply) SetOtherOnlinePlatformName(val string) {
	p.OtherOnlinePlatformName = val
}
func (p *ModelCourseApply) SetTeachingResourceName(val string) {
	p.TeachingResourceName = val
}
func (p *ModelCourseApply) SetIsBuildPartner(val int32) {
	p.IsBuildPartner = val
}
func (p *ModelCourseApply) SetIsSelfProperty(val int32) {
	p.IsSelfProperty = val
}
func (p *ModelCourseApply) SetIsUseOtherResource(val int32) {
	p.IsUseOtherResource = val
}
func (p *ModelCourseApply) SetOtherResourceName(val string) {
	p.OtherResourceName = val
}
func (p *ModelCourseApply) SetResourceBuildPartner(val string) {
	p.ResourceBuildPartner = val
}
func (p *ModelCourseApply) SetTeamTeacherName(val string) {
	p.TeamTeacherName = val
}
func (p *ModelCourseApply) SetRemark(val string) {
	p.Remark = val
}
func (p *ModelCourseApply) SetUrl(val string) {
	p.Url = val
}
func (p *ModelCourseApply) SetIsnotAccount(val string) {
	p.IsnotAccount = val
}
func (p *ModelCourseApply) SetIsnotPassword(val string) {
	p.IsnotPassword = val
}
func (p *ModelCourseApply) SetOpinion(val string) {
	p.Opinion = val
}
func (p *ModelCourseApply) SetExamination(val int32) {
	p.Examination = val
}
func (p *ModelCourseApply) SetIsActive(val int32) {
	p.IsActive = val
}
func (p *ModelCourseApply) SetIsFill(val bool) {
	p.IsFill = val
}

var fieldIDToName_ModelCourseApply = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "department",
	6:  "academic_year",
	7:  "semester",
	8:  "app_id",
	9:  "office_id",
	10: "course_name",
	11: "class_id",
	12: "teach_class_name",
	13: "teacher_name",
	14: "total_hours",
	15: "total_students",
	16: "credit",
	17: "course_nature",
	18: "start_week",
	19: "online_platform_name",
	20: "teacher_id",
	21: "other_online_platform_name",
	22: "teaching_resource_name",
	23: "is_build_partner",
	24: "is_self_property",
	25: "is_use_other_resource",
	26: "other_resource_name",
	27: "resource_build_partner",
	28: "team_teacher_name",
	29: "remark",
	30: "url",
	31: "isnot_account",
	32: "isnot_password",
	33: "opinion",
	34: "examination",
	35: "is_active",
	36: "is_fill",
}

func (p *ModelCourseApply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelCourseApply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelCourseApply) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelCourseApply) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelCourseApply) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelCourseApply) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelCourseApply) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Department = _field
	return nil
}
func (p *ModelCourseApply) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelCourseApply) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelCourseApply) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelCourseApply) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OfficeId = _field
	return nil
}
func (p *ModelCourseApply) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *ModelCourseApply) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassId = _field
	return nil
}
func (p *ModelCourseApply) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachClassName = _field
	return nil
}
func (p *ModelCourseApply) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ModelCourseApply) ReadField14(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalHours = _field
	return nil
}
func (p *ModelCourseApply) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalStudents = _field
	return nil
}
func (p *ModelCourseApply) ReadField16(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Credit = _field
	return nil
}
func (p *ModelCourseApply) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseNature = _field
	return nil
}
func (p *ModelCourseApply) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartWeek = _field
	return nil
}
func (p *ModelCourseApply) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OnlinePlatformName = _field
	return nil
}
func (p *ModelCourseApply) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *ModelCourseApply) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherOnlinePlatformName = _field
	return nil
}
func (p *ModelCourseApply) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeachingResourceName = _field
	return nil
}
func (p *ModelCourseApply) ReadField23(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsBuildPartner = _field
	return nil
}
func (p *ModelCourseApply) ReadField24(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSelfProperty = _field
	return nil
}
func (p *ModelCourseApply) ReadField25(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsUseOtherResource = _field
	return nil
}
func (p *ModelCourseApply) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OtherResourceName = _field
	return nil
}
func (p *ModelCourseApply) ReadField27(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResourceBuildPartner = _field
	return nil
}
func (p *ModelCourseApply) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeamTeacherName = _field
	return nil
}
func (p *ModelCourseApply) ReadField29(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ModelCourseApply) ReadField30(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *ModelCourseApply) ReadField31(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotAccount = _field
	return nil
}
func (p *ModelCourseApply) ReadField32(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsnotPassword = _field
	return nil
}
func (p *ModelCourseApply) ReadField33(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Opinion = _field
	return nil
}
func (p *ModelCourseApply) ReadField34(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Examination = _field
	return nil
}
func (p *ModelCourseApply) ReadField35(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsActive = _field
	return nil
}
func (p *ModelCourseApply) ReadField36(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsFill = _field
	return nil
}

func (p *ModelCourseApply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelCourseApply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelCourseApply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelCourseApply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelCourseApply) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelCourseApply) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelCourseApply) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Department); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelCourseApply) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelCourseApply) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelCourseApply) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelCourseApply) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_id", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OfficeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelCourseApply) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelCourseApply) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_id", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ClassId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelCourseApply) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teach_class_name", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelCourseApply) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelCourseApply) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_hours", thrift.I64, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalHours); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelCourseApply) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_students", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalStudents); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelCourseApply) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credit", thrift.DOUBLE, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Credit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelCourseApply) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_nature", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseNature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelCourseApply) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_week", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ModelCourseApply) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("online_platform_name", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ModelCourseApply) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ModelCourseApply) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_online_platform_name", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherOnlinePlatformName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ModelCourseApply) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teaching_resource_name", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeachingResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ModelCourseApply) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_build_partner", thrift.I32, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ModelCourseApply) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_self_property", thrift.I32, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsSelfProperty); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ModelCourseApply) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_use_other_resource", thrift.I32, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsUseOtherResource); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ModelCourseApply) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("other_resource_name", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OtherResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ModelCourseApply) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resource_build_partner", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResourceBuildPartner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *ModelCourseApply) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("team_teacher_name", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeamTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *ModelCourseApply) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *ModelCourseApply) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *ModelCourseApply) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_account", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *ModelCourseApply) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isnot_password", thrift.STRING, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IsnotPassword); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *ModelCourseApply) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opinion", thrift.STRING, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Opinion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *ModelCourseApply) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("examination", thrift.I32, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Examination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *ModelCourseApply) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_active", thrift.I32, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsActive); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *ModelCourseApply) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_fill", thrift.BOOL, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFill); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *ModelCourseApply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelCourseApply(%+v)", *p)

}

func (p *ModelCourseApply) DeepEqual(ano *ModelCourseApply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Department) {
		return false
	}
	if !p.Field6DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field7DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field8DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field9DeepEqual(ano.OfficeId) {
		return false
	}
	if !p.Field10DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field11DeepEqual(ano.ClassId) {
		return false
	}
	if !p.Field12DeepEqual(ano.TeachClassName) {
		return false
	}
	if !p.Field13DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field14DeepEqual(ano.TotalHours) {
		return false
	}
	if !p.Field15DeepEqual(ano.TotalStudents) {
		return false
	}
	if !p.Field16DeepEqual(ano.Credit) {
		return false
	}
	if !p.Field17DeepEqual(ano.CourseNature) {
		return false
	}
	if !p.Field18DeepEqual(ano.StartWeek) {
		return false
	}
	if !p.Field19DeepEqual(ano.OnlinePlatformName) {
		return false
	}
	if !p.Field20DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field21DeepEqual(ano.OtherOnlinePlatformName) {
		return false
	}
	if !p.Field22DeepEqual(ano.TeachingResourceName) {
		return false
	}
	if !p.Field23DeepEqual(ano.IsBuildPartner) {
		return false
	}
	if !p.Field24DeepEqual(ano.IsSelfProperty) {
		return false
	}
	if !p.Field25DeepEqual(ano.IsUseOtherResource) {
		return false
	}
	if !p.Field26DeepEqual(ano.OtherResourceName) {
		return false
	}
	if !p.Field27DeepEqual(ano.ResourceBuildPartner) {
		return false
	}
	if !p.Field28DeepEqual(ano.TeamTeacherName) {
		return false
	}
	if !p.Field29DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field30DeepEqual(ano.Url) {
		return false
	}
	if !p.Field31DeepEqual(ano.IsnotAccount) {
		return false
	}
	if !p.Field32DeepEqual(ano.IsnotPassword) {
		return false
	}
	if !p.Field33DeepEqual(ano.Opinion) {
		return false
	}
	if !p.Field34DeepEqual(ano.Examination) {
		return false
	}
	if !p.Field35DeepEqual(ano.IsActive) {
		return false
	}
	if !p.Field36DeepEqual(ano.IsFill) {
		return false
	}
	return true
}

func (p *ModelCourseApply) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Department, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field8DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field9DeepEqual(src int32) bool {

	if p.OfficeId != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field11DeepEqual(src int32) bool {

	if p.ClassId != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field12DeepEqual(src string) bool {

	if strings.Compare(p.TeachClassName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field13DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field14DeepEqual(src int64) bool {

	if p.TotalHours != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field15DeepEqual(src int64) bool {

	if p.TotalStudents != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field16DeepEqual(src float64) bool {

	if p.Credit != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field17DeepEqual(src string) bool {

	if strings.Compare(p.CourseNature, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field18DeepEqual(src string) bool {

	if strings.Compare(p.StartWeek, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field19DeepEqual(src string) bool {

	if strings.Compare(p.OnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field20DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field21DeepEqual(src string) bool {

	if strings.Compare(p.OtherOnlinePlatformName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field22DeepEqual(src string) bool {

	if strings.Compare(p.TeachingResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field23DeepEqual(src int32) bool {

	if p.IsBuildPartner != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field24DeepEqual(src int32) bool {

	if p.IsSelfProperty != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field25DeepEqual(src int32) bool {

	if p.IsUseOtherResource != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field26DeepEqual(src string) bool {

	if strings.Compare(p.OtherResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field27DeepEqual(src string) bool {

	if strings.Compare(p.ResourceBuildPartner, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field28DeepEqual(src string) bool {

	if strings.Compare(p.TeamTeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field29DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field30DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field31DeepEqual(src string) bool {

	if strings.Compare(p.IsnotAccount, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field32DeepEqual(src string) bool {

	if strings.Compare(p.IsnotPassword, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field33DeepEqual(src string) bool {

	if strings.Compare(p.Opinion, src) != 0 {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field34DeepEqual(src int32) bool {

	if p.Examination != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field35DeepEqual(src int32) bool {

	if p.IsActive != src {
		return false
	}
	return true
}
func (p *ModelCourseApply) Field36DeepEqual(src bool) bool {

	if p.IsFill != src {
		return false
	}
	return true
}

type ModelCourseNature struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name      string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
}

func NewModelCourseNature() *ModelCourseNature {
	return &ModelCourseNature{}
}

func (p *ModelCourseNature) InitDefault() {
}

func (p *ModelCourseNature) GetId() (v int32) {
	return p.Id
}

func (p *ModelCourseNature) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelCourseNature) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelCourseNature) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelCourseNature) GetName() (v string) {
	return p.Name
}
func (p *ModelCourseNature) SetId(val int32) {
	p.Id = val
}
func (p *ModelCourseNature) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelCourseNature) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelCourseNature) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelCourseNature) SetName(val string) {
	p.Name = val
}

var fieldIDToName_ModelCourseNature = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "name",
}

func (p *ModelCourseNature) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelCourseNature[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelCourseNature) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelCourseNature) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelCourseNature) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelCourseNature) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelCourseNature) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *ModelCourseNature) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelCourseNature"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelCourseNature) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelCourseNature) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelCourseNature) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelCourseNature) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelCourseNature) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelCourseNature) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelCourseNature(%+v)", *p)

}

func (p *ModelCourseNature) DeepEqual(ano *ModelCourseNature) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *ModelCourseNature) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelCourseNature) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseNature) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseNature) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelCourseNature) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type ModelOperationLogs struct {
	Id         int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt  int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt  int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt  int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	UserName   string `thrift:"user_name,5" frugal:"5,default,string" json:"user_name" gorm:"column:user_name"`
	Operation  string `thrift:"operation,6" frugal:"6,default,string" json:"operation" gorm:"column:operation"`
	ObjectType string `thrift:"object_type,7" frugal:"7,default,string" json:"object_type" gorm:"column:object_type"`
	ObjectId   string `thrift:"object_id,8" frugal:"8,default,string" json:"object_id" gorm:"column:object_id"`
	Details    string `thrift:"details,9" frugal:"9,default,string" json:"details" gorm:"column:details;type:text"`
	IpAddress  string `thrift:"ip_address,10" frugal:"10,default,string" json:"ip_address" gorm:"column:ip_address"`
	Status     int32  `thrift:"status,11" frugal:"11,default,i32" json:"status" gorm:"column:status"`
	AppId      int32  `thrift:"app_id,12" frugal:"12,default,i32" json:"app_id" gorm:"column:app_id"`
}

func NewModelOperationLogs() *ModelOperationLogs {
	return &ModelOperationLogs{}
}

func (p *ModelOperationLogs) InitDefault() {
}

func (p *ModelOperationLogs) GetId() (v int32) {
	return p.Id
}

func (p *ModelOperationLogs) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelOperationLogs) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelOperationLogs) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelOperationLogs) GetUserName() (v string) {
	return p.UserName
}

func (p *ModelOperationLogs) GetOperation() (v string) {
	return p.Operation
}

func (p *ModelOperationLogs) GetObjectType() (v string) {
	return p.ObjectType
}

func (p *ModelOperationLogs) GetObjectId() (v string) {
	return p.ObjectId
}

func (p *ModelOperationLogs) GetDetails() (v string) {
	return p.Details
}

func (p *ModelOperationLogs) GetIpAddress() (v string) {
	return p.IpAddress
}

func (p *ModelOperationLogs) GetStatus() (v int32) {
	return p.Status
}

func (p *ModelOperationLogs) GetAppId() (v int32) {
	return p.AppId
}
func (p *ModelOperationLogs) SetId(val int32) {
	p.Id = val
}
func (p *ModelOperationLogs) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelOperationLogs) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelOperationLogs) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelOperationLogs) SetUserName(val string) {
	p.UserName = val
}
func (p *ModelOperationLogs) SetOperation(val string) {
	p.Operation = val
}
func (p *ModelOperationLogs) SetObjectType(val string) {
	p.ObjectType = val
}
func (p *ModelOperationLogs) SetObjectId(val string) {
	p.ObjectId = val
}
func (p *ModelOperationLogs) SetDetails(val string) {
	p.Details = val
}
func (p *ModelOperationLogs) SetIpAddress(val string) {
	p.IpAddress = val
}
func (p *ModelOperationLogs) SetStatus(val int32) {
	p.Status = val
}
func (p *ModelOperationLogs) SetAppId(val int32) {
	p.AppId = val
}

var fieldIDToName_ModelOperationLogs = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "user_name",
	6:  "operation",
	7:  "object_type",
	8:  "object_id",
	9:  "details",
	10: "ip_address",
	11: "status",
	12: "app_id",
}

func (p *ModelOperationLogs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelOperationLogs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelOperationLogs) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelOperationLogs) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelOperationLogs) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelOperationLogs) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelOperationLogs) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *ModelOperationLogs) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Operation = _field
	return nil
}
func (p *ModelOperationLogs) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ObjectType = _field
	return nil
}
func (p *ModelOperationLogs) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ObjectId = _field
	return nil
}
func (p *ModelOperationLogs) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Details = _field
	return nil
}
func (p *ModelOperationLogs) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IpAddress = _field
	return nil
}
func (p *ModelOperationLogs) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ModelOperationLogs) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}

func (p *ModelOperationLogs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelOperationLogs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelOperationLogs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operation", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Operation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_type", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_id", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("details", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Details); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ip_address", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IpAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelOperationLogs) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelOperationLogs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelOperationLogs(%+v)", *p)

}

func (p *ModelOperationLogs) DeepEqual(ano *ModelOperationLogs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Operation) {
		return false
	}
	if !p.Field7DeepEqual(ano.ObjectType) {
		return false
	}
	if !p.Field8DeepEqual(ano.ObjectId) {
		return false
	}
	if !p.Field9DeepEqual(ano.Details) {
		return false
	}
	if !p.Field10DeepEqual(ano.IpAddress) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	if !p.Field12DeepEqual(ano.AppId) {
		return false
	}
	return true
}

func (p *ModelOperationLogs) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field5DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Operation, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ObjectType, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ObjectId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Details, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field10DeepEqual(src string) bool {

	if strings.Compare(p.IpAddress, src) != 0 {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field11DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ModelOperationLogs) Field12DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}

type ModelTeacherInfo struct {
	Id            int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt     int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt     int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt     int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Department    string `thrift:"department,5" frugal:"5,default,string" json:"department" gorm:"column:department"`
	AppId         int32  `thrift:"app_id,6" frugal:"6,default,i32" json:"app_id" gorm:"column:app_id"`
	Uid           int32  `thrift:"uid,7" frugal:"7,default,i32" json:"uid" gorm:"column:uid"`
	Name          string `thrift:"name,8" frugal:"8,default,string" json:"name" gorm:"column:name"`
	OfficeId      int32  `thrift:"office_id,9" frugal:"9,default,i32" json:"office_id" gorm:"column:office_id"`
	Duties        string `thrift:"duties,10" frugal:"10,default,string" json:"duties" gorm:"column:duties"`
	AppointTime   string `thrift:"appoint_time,11" frugal:"11,default,string" json:"appoint_time" gorm:"column:appoint_time"`
	PositionLevel string `thrift:"position_level,12" frugal:"12,default,string" json:"position_level" gorm:"column:position_level"`
	CpositionTime string `thrift:"cposition_time,13" frugal:"13,default,string" json:"cposition_time" gorm:"column:cposition_time"`
	Remunerate    int64  `thrift:"remunerate,14" frugal:"14,default,i64" json:"remunerate" gorm:"column:remunerate"`
	IdCategory    string `thrift:"id_category,15" frugal:"15,default,string" json:"id_category" gorm:"column:id_category"`
	IsActive      int32  `thrift:"is_active,16" frugal:"16,default,i32" json:"is_active" gorm:"column:is_active;default:1"`
	IsExternal    int32  `thrift:"is_external,17" frugal:"17,default,i32" json:"is_external" gorm:"column:is_external;default:2"`
	Order         int32  `thrift:"order,18" frugal:"18,default,i32" json:"order" gorm:"column:order;default:1"`
	UserName      string `thrift:"user_name,19" frugal:"19,default,string" json:"user_name" gorm:"column:user_name"`
}

func NewModelTeacherInfo() *ModelTeacherInfo {
	return &ModelTeacherInfo{}
}

func (p *ModelTeacherInfo) InitDefault() {
}

func (p *ModelTeacherInfo) GetId() (v int32) {
	return p.Id
}

func (p *ModelTeacherInfo) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelTeacherInfo) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelTeacherInfo) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelTeacherInfo) GetDepartment() (v string) {
	return p.Department
}

func (p *ModelTeacherInfo) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelTeacherInfo) GetUid() (v int32) {
	return p.Uid
}

func (p *ModelTeacherInfo) GetName() (v string) {
	return p.Name
}

func (p *ModelTeacherInfo) GetOfficeId() (v int32) {
	return p.OfficeId
}

func (p *ModelTeacherInfo) GetDuties() (v string) {
	return p.Duties
}

func (p *ModelTeacherInfo) GetAppointTime() (v string) {
	return p.AppointTime
}

func (p *ModelTeacherInfo) GetPositionLevel() (v string) {
	return p.PositionLevel
}

func (p *ModelTeacherInfo) GetCpositionTime() (v string) {
	return p.CpositionTime
}

func (p *ModelTeacherInfo) GetRemunerate() (v int64) {
	return p.Remunerate
}

func (p *ModelTeacherInfo) GetIdCategory() (v string) {
	return p.IdCategory
}

func (p *ModelTeacherInfo) GetIsActive() (v int32) {
	return p.IsActive
}

func (p *ModelTeacherInfo) GetIsExternal() (v int32) {
	return p.IsExternal
}

func (p *ModelTeacherInfo) GetOrder() (v int32) {
	return p.Order
}

func (p *ModelTeacherInfo) GetUserName() (v string) {
	return p.UserName
}
func (p *ModelTeacherInfo) SetId(val int32) {
	p.Id = val
}
func (p *ModelTeacherInfo) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelTeacherInfo) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelTeacherInfo) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelTeacherInfo) SetDepartment(val string) {
	p.Department = val
}
func (p *ModelTeacherInfo) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelTeacherInfo) SetUid(val int32) {
	p.Uid = val
}
func (p *ModelTeacherInfo) SetName(val string) {
	p.Name = val
}
func (p *ModelTeacherInfo) SetOfficeId(val int32) {
	p.OfficeId = val
}
func (p *ModelTeacherInfo) SetDuties(val string) {
	p.Duties = val
}
func (p *ModelTeacherInfo) SetAppointTime(val string) {
	p.AppointTime = val
}
func (p *ModelTeacherInfo) SetPositionLevel(val string) {
	p.PositionLevel = val
}
func (p *ModelTeacherInfo) SetCpositionTime(val string) {
	p.CpositionTime = val
}
func (p *ModelTeacherInfo) SetRemunerate(val int64) {
	p.Remunerate = val
}
func (p *ModelTeacherInfo) SetIdCategory(val string) {
	p.IdCategory = val
}
func (p *ModelTeacherInfo) SetIsActive(val int32) {
	p.IsActive = val
}
func (p *ModelTeacherInfo) SetIsExternal(val int32) {
	p.IsExternal = val
}
func (p *ModelTeacherInfo) SetOrder(val int32) {
	p.Order = val
}
func (p *ModelTeacherInfo) SetUserName(val string) {
	p.UserName = val
}

var fieldIDToName_ModelTeacherInfo = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "department",
	6:  "app_id",
	7:  "uid",
	8:  "name",
	9:  "office_id",
	10: "duties",
	11: "appoint_time",
	12: "position_level",
	13: "cposition_time",
	14: "remunerate",
	15: "id_category",
	16: "is_active",
	17: "is_external",
	18: "order",
	19: "user_name",
}

func (p *ModelTeacherInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelTeacherInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelTeacherInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Department = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OfficeId = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duties = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppointTime = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PositionLevel = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CpositionTime = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remunerate = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCategory = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsActive = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsExternal = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Order = _field
	return nil
}
func (p *ModelTeacherInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}

func (p *ModelTeacherInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelTeacherInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Department); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("office_id", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OfficeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("duties", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Duties); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("appoint_time", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppointTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("position_level", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PositionLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cposition_time", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CpositionTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remunerate", thrift.I64, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Remunerate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_category", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCategory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_active", thrift.I32, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsActive); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_external", thrift.I32, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IsExternal); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.I32, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Order); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ModelTeacherInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ModelTeacherInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelTeacherInfo(%+v)", *p)

}

func (p *ModelTeacherInfo) DeepEqual(ano *ModelTeacherInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Department) {
		return false
	}
	if !p.Field6DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field8DeepEqual(ano.Name) {
		return false
	}
	if !p.Field9DeepEqual(ano.OfficeId) {
		return false
	}
	if !p.Field10DeepEqual(ano.Duties) {
		return false
	}
	if !p.Field11DeepEqual(ano.AppointTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.PositionLevel) {
		return false
	}
	if !p.Field13DeepEqual(ano.CpositionTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.Remunerate) {
		return false
	}
	if !p.Field15DeepEqual(ano.IdCategory) {
		return false
	}
	if !p.Field16DeepEqual(ano.IsActive) {
		return false
	}
	if !p.Field17DeepEqual(ano.IsExternal) {
		return false
	}
	if !p.Field18DeepEqual(ano.Order) {
		return false
	}
	if !p.Field19DeepEqual(ano.UserName) {
		return false
	}
	return true
}

func (p *ModelTeacherInfo) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Department, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field6DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field7DeepEqual(src int32) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field9DeepEqual(src int32) bool {

	if p.OfficeId != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Duties, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.AppointTime, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PositionLevel, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CpositionTime, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field14DeepEqual(src int64) bool {

	if p.Remunerate != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field15DeepEqual(src string) bool {

	if strings.Compare(p.IdCategory, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field16DeepEqual(src int32) bool {

	if p.IsActive != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field17DeepEqual(src int32) bool {

	if p.IsExternal != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field18DeepEqual(src int32) bool {

	if p.Order != src {
		return false
	}
	return true
}
func (p *ModelTeacherInfo) Field19DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}

type ModelHoliday struct {
	Id           int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt    int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt    int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt    int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Name         string `thrift:"name,5" frugal:"5,default,string" json:"name" gorm:"column:name"`
	BeginDate    string `thrift:"begin_date,6" frugal:"6,default,string" json:"begin_date" gorm:"column:begin_date"`
	EndDate      string `thrift:"end_date,7" frugal:"7,default,string" json:"end_date" gorm:"column:end_date"`
	AppId        int32  `thrift:"app_id,8" frugal:"8,default,i32" json:"app_id" gorm:"column:app_id"`
	Remark       string `thrift:"remark,9" frugal:"9,default,string" json:"remark" gorm:"column:remark"`
	AcademicYear string `thrift:"academic_year,10" frugal:"10,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester     string `thrift:"semester,11" frugal:"11,default,string" json:"semester" gorm:"column:semester"`
}

func NewModelHoliday() *ModelHoliday {
	return &ModelHoliday{}
}

func (p *ModelHoliday) InitDefault() {
}

func (p *ModelHoliday) GetId() (v int32) {
	return p.Id
}

func (p *ModelHoliday) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelHoliday) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelHoliday) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelHoliday) GetName() (v string) {
	return p.Name
}

func (p *ModelHoliday) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *ModelHoliday) GetEndDate() (v string) {
	return p.EndDate
}

func (p *ModelHoliday) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelHoliday) GetRemark() (v string) {
	return p.Remark
}

func (p *ModelHoliday) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelHoliday) GetSemester() (v string) {
	return p.Semester
}
func (p *ModelHoliday) SetId(val int32) {
	p.Id = val
}
func (p *ModelHoliday) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelHoliday) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelHoliday) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelHoliday) SetName(val string) {
	p.Name = val
}
func (p *ModelHoliday) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *ModelHoliday) SetEndDate(val string) {
	p.EndDate = val
}
func (p *ModelHoliday) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelHoliday) SetRemark(val string) {
	p.Remark = val
}
func (p *ModelHoliday) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelHoliday) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ModelHoliday = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "name",
	6:  "begin_date",
	7:  "end_date",
	8:  "app_id",
	9:  "remark",
	10: "academic_year",
	11: "semester",
}

func (p *ModelHoliday) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelHoliday[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelHoliday) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelHoliday) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelHoliday) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelHoliday) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelHoliday) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ModelHoliday) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeginDate = _field
	return nil
}
func (p *ModelHoliday) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndDate = _field
	return nil
}
func (p *ModelHoliday) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelHoliday) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ModelHoliday) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelHoliday) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ModelHoliday) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelHoliday"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelHoliday) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelHoliday) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelHoliday) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelHoliday) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelHoliday) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelHoliday) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("begin_date", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelHoliday) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_date", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelHoliday) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelHoliday) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelHoliday) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelHoliday) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelHoliday) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelHoliday(%+v)", *p)

}

func (p *ModelHoliday) DeepEqual(ano *ModelHoliday) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field8DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field9DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field10DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field11DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ModelHoliday) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelHoliday) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelHoliday) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelHoliday) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelHoliday) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ModelHoliday) Field6DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *ModelHoliday) Field7DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *ModelHoliday) Field8DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelHoliday) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *ModelHoliday) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelHoliday) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ModelTrainingCourse struct {
	Id                    int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt             int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt             int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt             int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	Major                 string `thrift:"major,5" frugal:"5,default,string" json:"major" gorm:"column:major"`
	ClassName             string `thrift:"class_name,6" frugal:"6,default,string" json:"class_name" gorm:"column:class_name"`
	StudentNumber         int32  `thrift:"student_number,7" frugal:"7,default,i32" json:"student_number" gorm:"column:student_number"`
	CourseName            string `thrift:"course_name,8" frugal:"8,default,string" json:"course_name" gorm:"column:course_name"`
	Location              string `thrift:"location,9" frugal:"9,default,string" json:"location" gorm:"column:location"`
	CooperationEnterprise string `thrift:"cooperation_enterprise,10" frugal:"10,default,string" json:"cooperation_enterprise" gorm:"column:cooperation_enterprise"`
	TrainingWeek          int32  `thrift:"training_week,11" frugal:"11,default,i32" json:"training_week" gorm:"column:training_week"`
	AppId                 int32  `thrift:"app_id,12" frugal:"12,default,i32" json:"app_id" gorm:"column:app_id"`
	EnterpriseTeacherName string `thrift:"enterprise_teacher_name,13" frugal:"13,default,string" json:"enterprise_teacher_name" gorm:"column:enterprise_teacher_name"`
	AcademicYear          string `thrift:"academic_year,14" frugal:"14,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester              string `thrift:"semester,15" frugal:"15,default,string" json:"semester" gorm:"column:semester"`
}

func NewModelTrainingCourse() *ModelTrainingCourse {
	return &ModelTrainingCourse{}
}

func (p *ModelTrainingCourse) InitDefault() {
}

func (p *ModelTrainingCourse) GetId() (v int32) {
	return p.Id
}

func (p *ModelTrainingCourse) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelTrainingCourse) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelTrainingCourse) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelTrainingCourse) GetMajor() (v string) {
	return p.Major
}

func (p *ModelTrainingCourse) GetClassName() (v string) {
	return p.ClassName
}

func (p *ModelTrainingCourse) GetStudentNumber() (v int32) {
	return p.StudentNumber
}

func (p *ModelTrainingCourse) GetCourseName() (v string) {
	return p.CourseName
}

func (p *ModelTrainingCourse) GetLocation() (v string) {
	return p.Location
}

func (p *ModelTrainingCourse) GetCooperationEnterprise() (v string) {
	return p.CooperationEnterprise
}

func (p *ModelTrainingCourse) GetTrainingWeek() (v int32) {
	return p.TrainingWeek
}

func (p *ModelTrainingCourse) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelTrainingCourse) GetEnterpriseTeacherName() (v string) {
	return p.EnterpriseTeacherName
}

func (p *ModelTrainingCourse) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelTrainingCourse) GetSemester() (v string) {
	return p.Semester
}
func (p *ModelTrainingCourse) SetId(val int32) {
	p.Id = val
}
func (p *ModelTrainingCourse) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelTrainingCourse) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelTrainingCourse) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelTrainingCourse) SetMajor(val string) {
	p.Major = val
}
func (p *ModelTrainingCourse) SetClassName(val string) {
	p.ClassName = val
}
func (p *ModelTrainingCourse) SetStudentNumber(val int32) {
	p.StudentNumber = val
}
func (p *ModelTrainingCourse) SetCourseName(val string) {
	p.CourseName = val
}
func (p *ModelTrainingCourse) SetLocation(val string) {
	p.Location = val
}
func (p *ModelTrainingCourse) SetCooperationEnterprise(val string) {
	p.CooperationEnterprise = val
}
func (p *ModelTrainingCourse) SetTrainingWeek(val int32) {
	p.TrainingWeek = val
}
func (p *ModelTrainingCourse) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelTrainingCourse) SetEnterpriseTeacherName(val string) {
	p.EnterpriseTeacherName = val
}
func (p *ModelTrainingCourse) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelTrainingCourse) SetSemester(val string) {
	p.Semester = val
}

var fieldIDToName_ModelTrainingCourse = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "major",
	6:  "class_name",
	7:  "student_number",
	8:  "course_name",
	9:  "location",
	10: "cooperation_enterprise",
	11: "training_week",
	12: "app_id",
	13: "enterprise_teacher_name",
	14: "academic_year",
	15: "semester",
}

func (p *ModelTrainingCourse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelTrainingCourse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelTrainingCourse) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Major = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StudentNumber = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseName = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Location = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CooperationEnterprise = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrainingWeek = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnterpriseTeacherName = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelTrainingCourse) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}

func (p *ModelTrainingCourse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelTrainingCourse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("major", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Major); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("student_number", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StudentNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CourseName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Location); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cooperation_enterprise", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CooperationEnterprise); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("training_week", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TrainingWeek); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_teacher_name", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EnterpriseTeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelTrainingCourse) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelTrainingCourse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelTrainingCourse(%+v)", *p)

}

func (p *ModelTrainingCourse) DeepEqual(ano *ModelTrainingCourse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.Major) {
		return false
	}
	if !p.Field6DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field7DeepEqual(ano.StudentNumber) {
		return false
	}
	if !p.Field8DeepEqual(ano.CourseName) {
		return false
	}
	if !p.Field9DeepEqual(ano.Location) {
		return false
	}
	if !p.Field10DeepEqual(ano.CooperationEnterprise) {
		return false
	}
	if !p.Field11DeepEqual(ano.TrainingWeek) {
		return false
	}
	if !p.Field12DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field13DeepEqual(ano.EnterpriseTeacherName) {
		return false
	}
	if !p.Field14DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field15DeepEqual(ano.Semester) {
		return false
	}
	return true
}

func (p *ModelTrainingCourse) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Major, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field7DeepEqual(src int32) bool {

	if p.StudentNumber != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CourseName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Location, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CooperationEnterprise, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field11DeepEqual(src int32) bool {

	if p.TrainingWeek != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field12DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field13DeepEqual(src string) bool {

	if strings.Compare(p.EnterpriseTeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field14DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourse) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}

type ModelTrainingCourseTeacher struct {
	Id               int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt        int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt        int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt        int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	TrainingCourseId int32  `thrift:"training_course_id,5" frugal:"5,default,i32" json:"training_course_id" gorm:"column:training_course_id"`
	TeacherId        string `thrift:"teacher_id,6" frugal:"6,default,string" json:"teacher_id" gorm:"column:teacher_id"`
	TeacherName      string `thrift:"teacher_name,7" frugal:"7,default,string" json:"teacher_name" gorm:"column:teacher_name"`
	AppId            int32  `thrift:"app_id,8" frugal:"8,default,i32" json:"app_id" gorm:"column:app_id"`
	Week             string `thrift:"week,9" frugal:"9,default,string" json:"week" gorm:"column:week"`
}

func NewModelTrainingCourseTeacher() *ModelTrainingCourseTeacher {
	return &ModelTrainingCourseTeacher{}
}

func (p *ModelTrainingCourseTeacher) InitDefault() {
}

func (p *ModelTrainingCourseTeacher) GetId() (v int32) {
	return p.Id
}

func (p *ModelTrainingCourseTeacher) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelTrainingCourseTeacher) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelTrainingCourseTeacher) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelTrainingCourseTeacher) GetTrainingCourseId() (v int32) {
	return p.TrainingCourseId
}

func (p *ModelTrainingCourseTeacher) GetTeacherId() (v string) {
	return p.TeacherId
}

func (p *ModelTrainingCourseTeacher) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *ModelTrainingCourseTeacher) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelTrainingCourseTeacher) GetWeek() (v string) {
	return p.Week
}
func (p *ModelTrainingCourseTeacher) SetId(val int32) {
	p.Id = val
}
func (p *ModelTrainingCourseTeacher) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelTrainingCourseTeacher) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelTrainingCourseTeacher) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelTrainingCourseTeacher) SetTrainingCourseId(val int32) {
	p.TrainingCourseId = val
}
func (p *ModelTrainingCourseTeacher) SetTeacherId(val string) {
	p.TeacherId = val
}
func (p *ModelTrainingCourseTeacher) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *ModelTrainingCourseTeacher) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelTrainingCourseTeacher) SetWeek(val string) {
	p.Week = val
}

var fieldIDToName_ModelTrainingCourseTeacher = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "deleted_at",
	5: "training_course_id",
	6: "teacher_id",
	7: "teacher_name",
	8: "app_id",
	9: "week",
}

func (p *ModelTrainingCourseTeacher) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelTrainingCourseTeacher[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrainingCourseId = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherId = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TeacherName = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelTrainingCourseTeacher) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Week = _field
	return nil
}

func (p *ModelTrainingCourseTeacher) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelTrainingCourseTeacher"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("training_course_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TrainingCourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_id", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("teacher_name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TeacherName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("week", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Week); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelTrainingCourseTeacher) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelTrainingCourseTeacher(%+v)", *p)

}

func (p *ModelTrainingCourseTeacher) DeepEqual(ano *ModelTrainingCourseTeacher) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.TrainingCourseId) {
		return false
	}
	if !p.Field6DeepEqual(ano.TeacherId) {
		return false
	}
	if !p.Field7DeepEqual(ano.TeacherName) {
		return false
	}
	if !p.Field8DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field9DeepEqual(ano.Week) {
		return false
	}
	return true
}

func (p *ModelTrainingCourseTeacher) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field5DeepEqual(src int32) bool {

	if p.TrainingCourseId != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field6DeepEqual(src string) bool {

	if strings.Compare(p.TeacherId, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TeacherName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field8DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelTrainingCourseTeacher) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Week, src) != 0 {
		return false
	}
	return true
}

type ModelBeginExam struct {
}

func NewModelBeginExam() *ModelBeginExam {
	return &ModelBeginExam{}
}

func (p *ModelBeginExam) InitDefault() {
}

var fieldIDToName_ModelBeginExam = map[int16]string{}

func (p *ModelBeginExam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelBeginExam) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ModelBeginExam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelBeginExam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelBeginExam(%+v)", *p)

}

func (p *ModelBeginExam) DeepEqual(ano *ModelBeginExam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ModelFinalExam struct {
	Id               int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt        int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt        int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt        int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	AcademicYear     string `thrift:"academic_year,5" frugal:"5,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester         string `thrift:"semester,6" frugal:"6,default,string" json:"semester" gorm:"column:semester"`
	AssessmentMethod string `thrift:"assessment_method,7" frugal:"7,default,string" json:"assessment_method" gorm:"column:assessment_method"`
	ExamSubject      string `thrift:"exam_subject,8" frugal:"8,default,string" json:"exam_subject" gorm:"column:exam_subject"`
	ClassName        string `thrift:"class_name,9" frugal:"9,default,string" json:"class_name" gorm:"column:class_name"`
	AProposer        string `thrift:"a_proposer,10" frugal:"10,default,string" json:"a_proposer" gorm:"column:a_proposer"`
	BProposer        string `thrift:"b_proposer,11" frugal:"11,default,string" json:"b_proposer" gorm:"column:b_proposer"`
	CProposer        string `thrift:"c_proposer,12" frugal:"12,default,string" json:"c_proposer" gorm:"column:c_proposer"`
	AIsShared        bool   `thrift:"a_is_shared,13" frugal:"13,default,bool" json:"a_is_shared" gorm:"column:a_is_shared"`
	BIsShared        bool   `thrift:"b_is_shared,14" frugal:"14,default,bool" json:"b_is_shared" gorm:"column:b_is_shared"`
	CIsShared        bool   `thrift:"c_is_shared,15" frugal:"15,default,bool" json:"c_is_shared" gorm:"column:c_is_shared"`
	IsScoring        bool   `thrift:"is_scoring,16" frugal:"16,default,bool" json:"is_scoring" gorm:"column:is_scoring"`
	ExamWorkload     string `thrift:"exam_workload,17" frugal:"17,default,string" json:"exam_workload" gorm:"column:exam_workload"`
	ScoringWorkload  string `thrift:"scoring_workload,18" frugal:"18,default,string" json:"scoring_workload" gorm:"column:scoring_workload"`
	ScoringTeacher   string `thrift:"scoring_teacher,19" frugal:"19,default,string" json:"scoring_teacher" gorm:"column:scoring_teacher"`
	AppId            int32  `thrift:"app_id,20" frugal:"20,default,i32" json:"app_id" gorm:"column:app_id"`
	CourseId         int32  `thrift:"course_id,21" frugal:"21,default,i32" json:"course_id" gorm:"column:course_id"`
}

func NewModelFinalExam() *ModelFinalExam {
	return &ModelFinalExam{}
}

func (p *ModelFinalExam) InitDefault() {
}

func (p *ModelFinalExam) GetId() (v int32) {
	return p.Id
}

func (p *ModelFinalExam) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelFinalExam) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelFinalExam) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelFinalExam) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelFinalExam) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelFinalExam) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}

func (p *ModelFinalExam) GetExamSubject() (v string) {
	return p.ExamSubject
}

func (p *ModelFinalExam) GetClassName() (v string) {
	return p.ClassName
}

func (p *ModelFinalExam) GetAProposer() (v string) {
	return p.AProposer
}

func (p *ModelFinalExam) GetBProposer() (v string) {
	return p.BProposer
}

func (p *ModelFinalExam) GetCProposer() (v string) {
	return p.CProposer
}

func (p *ModelFinalExam) GetAIsShared() (v bool) {
	return p.AIsShared
}

func (p *ModelFinalExam) GetBIsShared() (v bool) {
	return p.BIsShared
}

func (p *ModelFinalExam) GetCIsShared() (v bool) {
	return p.CIsShared
}

func (p *ModelFinalExam) GetIsScoring() (v bool) {
	return p.IsScoring
}

func (p *ModelFinalExam) GetExamWorkload() (v string) {
	return p.ExamWorkload
}

func (p *ModelFinalExam) GetScoringWorkload() (v string) {
	return p.ScoringWorkload
}

func (p *ModelFinalExam) GetScoringTeacher() (v string) {
	return p.ScoringTeacher
}

func (p *ModelFinalExam) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelFinalExam) GetCourseId() (v int32) {
	return p.CourseId
}
func (p *ModelFinalExam) SetId(val int32) {
	p.Id = val
}
func (p *ModelFinalExam) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelFinalExam) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelFinalExam) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelFinalExam) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelFinalExam) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelFinalExam) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}
func (p *ModelFinalExam) SetExamSubject(val string) {
	p.ExamSubject = val
}
func (p *ModelFinalExam) SetClassName(val string) {
	p.ClassName = val
}
func (p *ModelFinalExam) SetAProposer(val string) {
	p.AProposer = val
}
func (p *ModelFinalExam) SetBProposer(val string) {
	p.BProposer = val
}
func (p *ModelFinalExam) SetCProposer(val string) {
	p.CProposer = val
}
func (p *ModelFinalExam) SetAIsShared(val bool) {
	p.AIsShared = val
}
func (p *ModelFinalExam) SetBIsShared(val bool) {
	p.BIsShared = val
}
func (p *ModelFinalExam) SetCIsShared(val bool) {
	p.CIsShared = val
}
func (p *ModelFinalExam) SetIsScoring(val bool) {
	p.IsScoring = val
}
func (p *ModelFinalExam) SetExamWorkload(val string) {
	p.ExamWorkload = val
}
func (p *ModelFinalExam) SetScoringWorkload(val string) {
	p.ScoringWorkload = val
}
func (p *ModelFinalExam) SetScoringTeacher(val string) {
	p.ScoringTeacher = val
}
func (p *ModelFinalExam) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelFinalExam) SetCourseId(val int32) {
	p.CourseId = val
}

var fieldIDToName_ModelFinalExam = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "academic_year",
	6:  "semester",
	7:  "assessment_method",
	8:  "exam_subject",
	9:  "class_name",
	10: "a_proposer",
	11: "b_proposer",
	12: "c_proposer",
	13: "a_is_shared",
	14: "b_is_shared",
	15: "c_is_shared",
	16: "is_scoring",
	17: "exam_workload",
	18: "scoring_workload",
	19: "scoring_teacher",
	20: "app_id",
	21: "course_id",
}

func (p *ModelFinalExam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelFinalExam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelFinalExam) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelFinalExam) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelFinalExam) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelFinalExam) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelFinalExam) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelFinalExam) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelFinalExam) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}
func (p *ModelFinalExam) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExamSubject = _field
	return nil
}
func (p *ModelFinalExam) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassName = _field
	return nil
}
func (p *ModelFinalExam) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AProposer = _field
	return nil
}
func (p *ModelFinalExam) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BProposer = _field
	return nil
}
func (p *ModelFinalExam) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CProposer = _field
	return nil
}
func (p *ModelFinalExam) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AIsShared = _field
	return nil
}
func (p *ModelFinalExam) ReadField14(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BIsShared = _field
	return nil
}
func (p *ModelFinalExam) ReadField15(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CIsShared = _field
	return nil
}
func (p *ModelFinalExam) ReadField16(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsScoring = _field
	return nil
}
func (p *ModelFinalExam) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExamWorkload = _field
	return nil
}
func (p *ModelFinalExam) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScoringWorkload = _field
	return nil
}
func (p *ModelFinalExam) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScoringTeacher = _field
	return nil
}
func (p *ModelFinalExam) ReadField20(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelFinalExam) ReadField21(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CourseId = _field
	return nil
}

func (p *ModelFinalExam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelFinalExam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelFinalExam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelFinalExam) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelFinalExam) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelFinalExam) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelFinalExam) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelFinalExam) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelFinalExam) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelFinalExam) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exam_subject", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExamSubject); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelFinalExam) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelFinalExam) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_proposer", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelFinalExam) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b_proposer", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelFinalExam) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("c_proposer", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelFinalExam) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_is_shared", thrift.BOOL, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.AIsShared); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelFinalExam) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b_is_shared", thrift.BOOL, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.BIsShared); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelFinalExam) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("c_is_shared", thrift.BOOL, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.CIsShared); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelFinalExam) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_scoring", thrift.BOOL, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsScoring); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ModelFinalExam) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exam_workload", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExamWorkload); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ModelFinalExam) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("scoring_workload", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScoringWorkload); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ModelFinalExam) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("scoring_teacher", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScoringTeacher); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ModelFinalExam) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ModelFinalExam) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("course_id", thrift.I32, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CourseId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ModelFinalExam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelFinalExam(%+v)", *p)

}

func (p *ModelFinalExam) DeepEqual(ano *ModelFinalExam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field6DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field7DeepEqual(ano.AssessmentMethod) {
		return false
	}
	if !p.Field8DeepEqual(ano.ExamSubject) {
		return false
	}
	if !p.Field9DeepEqual(ano.ClassName) {
		return false
	}
	if !p.Field10DeepEqual(ano.AProposer) {
		return false
	}
	if !p.Field11DeepEqual(ano.BProposer) {
		return false
	}
	if !p.Field12DeepEqual(ano.CProposer) {
		return false
	}
	if !p.Field13DeepEqual(ano.AIsShared) {
		return false
	}
	if !p.Field14DeepEqual(ano.BIsShared) {
		return false
	}
	if !p.Field15DeepEqual(ano.CIsShared) {
		return false
	}
	if !p.Field16DeepEqual(ano.IsScoring) {
		return false
	}
	if !p.Field17DeepEqual(ano.ExamWorkload) {
		return false
	}
	if !p.Field18DeepEqual(ano.ScoringWorkload) {
		return false
	}
	if !p.Field19DeepEqual(ano.ScoringTeacher) {
		return false
	}
	if !p.Field20DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field21DeepEqual(ano.CourseId) {
		return false
	}
	return true
}

func (p *ModelFinalExam) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field7DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ExamSubject, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field9DeepEqual(src string) bool {

	if strings.Compare(p.ClassName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field11DeepEqual(src string) bool {

	if strings.Compare(p.BProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field13DeepEqual(src bool) bool {

	if p.AIsShared != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field14DeepEqual(src bool) bool {

	if p.BIsShared != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field15DeepEqual(src bool) bool {

	if p.CIsShared != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field16DeepEqual(src bool) bool {

	if p.IsScoring != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field17DeepEqual(src string) bool {

	if strings.Compare(p.ExamWorkload, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field18DeepEqual(src string) bool {

	if strings.Compare(p.ScoringWorkload, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field19DeepEqual(src string) bool {

	if strings.Compare(p.ScoringTeacher, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field20DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelFinalExam) Field21DeepEqual(src int32) bool {

	if p.CourseId != src {
		return false
	}
	return true
}

type ModelFinalExamRecord struct {
	Id               int32  `thrift:"id,1" frugal:"1,default,i32" gorm:"column:id" json:"id"`
	CreatedAt        int32  `thrift:"created_at,2" frugal:"2,default,i32" gorm:"column:created_at;index" json:"created_at"`
	UpdatedAt        int32  `thrift:"updated_at,3" frugal:"3,default,i32" gorm:"column:updated_at" json:"updated_at"`
	DeletedAt        int32  `thrift:"deleted_at,4" frugal:"4,default,i32" gorm:"column:deleted_at" json:"deleted_at"`
	ExamSubject      string `thrift:"exam_subject,5" frugal:"5,default,string" json:"exam_subject" gorm:"column:exam_subject"`
	ClassNameList    string `thrift:"class_name_list,6" frugal:"6,default,string" json:"class_name_list" gorm:"column:class_name_list"`
	AppId            int32  `thrift:"app_id,7" frugal:"7,default,i32" json:"app_id" gorm:"column:app_id"`
	AcademicYear     string `thrift:"academic_year,8" frugal:"8,default,string" json:"academic_year" gorm:"column:academic_year"`
	Semester         string `thrift:"semester,9" frugal:"9,default,string" json:"semester" gorm:"column:semester"`
	AProposer        string `thrift:"a_proposer,10" frugal:"10,default,string" json:"a_proposer" gorm:"column:a_proposer"`
	BProposer        string `thrift:"b_proposer,11" frugal:"11,default,string" json:"b_proposer" gorm:"column:b_proposer"`
	CProposer        string `thrift:"c_proposer,12" frugal:"12,default,string" json:"c_proposer" gorm:"column:c_proposer"`
	UserName         string `thrift:"user_name,13" frugal:"13,default,string" json:"user_name" gorm:"column:user_name"`
	AssessmentMethod string `thrift:"assessment_method,14" frugal:"14,default,string" json:"assessment_method" gorm:"column:assessment_method"`
}

func NewModelFinalExamRecord() *ModelFinalExamRecord {
	return &ModelFinalExamRecord{}
}

func (p *ModelFinalExamRecord) InitDefault() {
}

func (p *ModelFinalExamRecord) GetId() (v int32) {
	return p.Id
}

func (p *ModelFinalExamRecord) GetCreatedAt() (v int32) {
	return p.CreatedAt
}

func (p *ModelFinalExamRecord) GetUpdatedAt() (v int32) {
	return p.UpdatedAt
}

func (p *ModelFinalExamRecord) GetDeletedAt() (v int32) {
	return p.DeletedAt
}

func (p *ModelFinalExamRecord) GetExamSubject() (v string) {
	return p.ExamSubject
}

func (p *ModelFinalExamRecord) GetClassNameList() (v string) {
	return p.ClassNameList
}

func (p *ModelFinalExamRecord) GetAppId() (v int32) {
	return p.AppId
}

func (p *ModelFinalExamRecord) GetAcademicYear() (v string) {
	return p.AcademicYear
}

func (p *ModelFinalExamRecord) GetSemester() (v string) {
	return p.Semester
}

func (p *ModelFinalExamRecord) GetAProposer() (v string) {
	return p.AProposer
}

func (p *ModelFinalExamRecord) GetBProposer() (v string) {
	return p.BProposer
}

func (p *ModelFinalExamRecord) GetCProposer() (v string) {
	return p.CProposer
}

func (p *ModelFinalExamRecord) GetUserName() (v string) {
	return p.UserName
}

func (p *ModelFinalExamRecord) GetAssessmentMethod() (v string) {
	return p.AssessmentMethod
}
func (p *ModelFinalExamRecord) SetId(val int32) {
	p.Id = val
}
func (p *ModelFinalExamRecord) SetCreatedAt(val int32) {
	p.CreatedAt = val
}
func (p *ModelFinalExamRecord) SetUpdatedAt(val int32) {
	p.UpdatedAt = val
}
func (p *ModelFinalExamRecord) SetDeletedAt(val int32) {
	p.DeletedAt = val
}
func (p *ModelFinalExamRecord) SetExamSubject(val string) {
	p.ExamSubject = val
}
func (p *ModelFinalExamRecord) SetClassNameList(val string) {
	p.ClassNameList = val
}
func (p *ModelFinalExamRecord) SetAppId(val int32) {
	p.AppId = val
}
func (p *ModelFinalExamRecord) SetAcademicYear(val string) {
	p.AcademicYear = val
}
func (p *ModelFinalExamRecord) SetSemester(val string) {
	p.Semester = val
}
func (p *ModelFinalExamRecord) SetAProposer(val string) {
	p.AProposer = val
}
func (p *ModelFinalExamRecord) SetBProposer(val string) {
	p.BProposer = val
}
func (p *ModelFinalExamRecord) SetCProposer(val string) {
	p.CProposer = val
}
func (p *ModelFinalExamRecord) SetUserName(val string) {
	p.UserName = val
}
func (p *ModelFinalExamRecord) SetAssessmentMethod(val string) {
	p.AssessmentMethod = val
}

var fieldIDToName_ModelFinalExamRecord = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "deleted_at",
	5:  "exam_subject",
	6:  "class_name_list",
	7:  "app_id",
	8:  "academic_year",
	9:  "semester",
	10: "a_proposer",
	11: "b_proposer",
	12: "c_proposer",
	13: "user_name",
	14: "assessment_method",
}

func (p *ModelFinalExamRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelFinalExamRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelFinalExamRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeletedAt = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExamSubject = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassNameList = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AppId = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcademicYear = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Semester = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AProposer = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BProposer = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CProposer = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *ModelFinalExamRecord) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AssessmentMethod = _field
	return nil
}

func (p *ModelFinalExamRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelFinalExamRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deleted_at", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DeletedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exam_subject", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExamSubject); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("class_name_list", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClassNameList); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app_id", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AppId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("academic_year", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcademicYear); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("semester", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Semester); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_proposer", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b_proposer", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("c_proposer", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CProposer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelFinalExamRecord) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assessment_method", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AssessmentMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelFinalExamRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelFinalExamRecord(%+v)", *p)

}

func (p *ModelFinalExamRecord) DeepEqual(ano *ModelFinalExamRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.ExamSubject) {
		return false
	}
	if !p.Field6DeepEqual(ano.ClassNameList) {
		return false
	}
	if !p.Field7DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field8DeepEqual(ano.AcademicYear) {
		return false
	}
	if !p.Field9DeepEqual(ano.Semester) {
		return false
	}
	if !p.Field10DeepEqual(ano.AProposer) {
		return false
	}
	if !p.Field11DeepEqual(ano.BProposer) {
		return false
	}
	if !p.Field12DeepEqual(ano.CProposer) {
		return false
	}
	if !p.Field13DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field14DeepEqual(ano.AssessmentMethod) {
		return false
	}
	return true
}

func (p *ModelFinalExamRecord) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field2DeepEqual(src int32) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field3DeepEqual(src int32) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field4DeepEqual(src int32) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ExamSubject, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ClassNameList, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field7DeepEqual(src int32) bool {

	if p.AppId != src {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field8DeepEqual(src string) bool {

	if strings.Compare(p.AcademicYear, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Semester, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field10DeepEqual(src string) bool {

	if strings.Compare(p.AProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field11DeepEqual(src string) bool {

	if strings.Compare(p.BProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CProposer, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field13DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelFinalExamRecord) Field14DeepEqual(src string) bool {

	if strings.Compare(p.AssessmentMethod, src) != 0 {
		return false
	}
	return true
}

type Educationservice interface {
	CreateApp(ctx context.Context, req *CreateAppReq) (r *CreateAppResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	CreateUser(ctx context.Context, req *CreateUserReq) (r *CreateUserResp, err error)

	CreateRole(ctx context.Context, req *CreateRoleReq) (r *CreateRoleResp, err error)

	DeleteUser(ctx context.Context, req *DeleteUserReq) (r *DeleteUserResp, err error)

	GetUserList(ctx context.Context, req *GetUserListReq) (r *GetUserListResp, err error)

	GetRoleList(ctx context.Context, req *GetRoleListReq) (r *GetRoleListResp, err error)

	CreatePermission(ctx context.Context, req *CreatePermissionReq) (r *CreatePermissionResp, err error)

	GetPermissionList(ctx context.Context, req *GetPermissionListReq) (r *GetPermissionListResp, err error)

	GetMenu(ctx context.Context, req *GetMenuReq) (r *GetMenuResp, err error)

	GetMenuList(ctx context.Context, req *GetMenuListReq) (r *GetMenuListResp, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoResp, err error)

	GetAuthCode(ctx context.Context, req *GetAuthCodeReq) (r *GetAuthCodeResp, err error)

	SetUserRole(ctx context.Context, req *SetUserRoleReq) (r *SetUserRoleResp, err error)

	SetRolePermission(ctx context.Context, req *SetRolePermissionReq) (r *SetRolePermissionResp, err error)

	SetRoleMenu(ctx context.Context, req *SetRoleMenuReq) (r *SetRoleMenuResp, err error)

	CreateMenu(ctx context.Context, req *CreateMenuReq) (r *CreateMenuResp, err error)

	CreateOffice(ctx context.Context, req *CreateOfficeReq) (r *CreateOfficeResp, err error)

	GetOfficeList(ctx context.Context, req *GetOfficeListReq) (r *GetOfficeListResp, err error)

	GetClassList(ctx context.Context, req *GetClassListReq) (r *GetClassListResp, err error)

	ImportCourseApply(ctx context.Context, req *ImportCourseApplyReq) (r *ImportCourseApplyResp, err error)

	GetCourseApplyList(ctx context.Context, req *GetCourseApplyListReq) (r *GetCourseApplyListResp, err error)

	GetSelfCourseApplyList(ctx context.Context, req *GetSelfCourseApplyListReq) (r *GetSelfCourseApplyListResp, err error)

	ImportUser(ctx context.Context, req *ImportUserReq) (r *ImportUserResp, err error)

	DeleteCourseApply(ctx context.Context, req *DeleteCourseApplyReq) (r *DeleteCourseApplyResp, err error)

	ApproveCourseApply(ctx context.Context, req *ApproveCourseApplyReq) (r *ApproveCourseApplyResp, err error)

	ResetCourseApply(ctx context.Context, req *ResetCourseApplyReq) (r *ResetCourseApplyResp, err error)

	FillCourseApply(ctx context.Context, req *FillCourseApplyReq) (r *FillCourseApplyResp, err error)

	ExportSelfCheckTable(ctx context.Context, req *ExportSelfCheckTableReq) (r *ExportSelfCheckTableResp, err error)

	ExportResponsibility(ctx context.Context, req *ExportResponsibilityReq) (r *ExportResponsibilityResp, err error)

	ExportAllSelfCheckTable(ctx context.Context, req *ExportAllSelfCheckTableReq) (r *ExportAllSelfCheckTableResp, err error)

	UpdateCourseApply(ctx context.Context, req *UpdateCourseApplyReq) (r *UpdateCourseApplyResp, err error)

	ExportCourseApply(ctx context.Context, req *ExportCourseApplyReq) (r *ExportCourseApplyResp, err error)

	ExportCourseApplySummary(ctx context.Context, req *ExportCourseApplySummaryReq) (r *ExportCourseApplySummaryResp, err error)

	OneKeyApproveCourseApply(ctx context.Context, req *OneKeyApproveCourseApplyReq) (r *OneKeyApproveCourseApplyResp, err error)

	GetSelectData(ctx context.Context, req *GetSelectDataReq) (r *GetSelectDataResp, err error)

	GetTeacherInfoList(ctx context.Context, req *GetTeacherInfoListReq) (r *GetTeacherInfoListResp, err error)

	ImportTeacherInfo(ctx context.Context, req *ImportTeacherInfoReq) (r *ImportTeacherInfoResp, err error)

	UpdateTeacherInfo(ctx context.Context, req *UpdateTeacherInfoReq) (r *UpdateTeacherInfoResp, err error)

	SetTeacherInfoStatus(ctx context.Context, req *SetTeacherInfoStatusReq) (r *SetTeacherInfoStatusResp, err error)

	OderTeacherInfo(ctx context.Context, req *OrderTeacherInfoReq) (r *OrderTeacherInfoResp, err error)

	UpdateMenu(ctx context.Context, req *UpdateMenuReq) (r *UpdateMenuResp, err error)

	DeleteMenu(ctx context.Context, req *DeleteMenuReq) (r *DeleteMenuResp, err error)

	GetToken(ctx context.Context, req *GetTokenReq) (r *GetTokenResp, err error)

	UpdateRole(ctx context.Context, req *UpdateRoleReq) (r *UpdateRoleResp, err error)

	SetRoleStatus(ctx context.Context, req *SetRoleStatusReq) (r *SetRoleStatusResp, err error)

	DeleteRole(ctx context.Context, req *DeleteRoleReq) (r *DeleteRoleResp, err error)

	DeleteOffice(ctx context.Context, req *DeleteOfficeReq) (r *DeleteOfficeResp, err error)

	UpdateOffice(ctx context.Context, req *UpdateOfficeReq) (r *UpdateOfficeResp, err error)

	UpdateUser(ctx context.Context, req *UpdateUserReq) (r *UpdateUserResp, err error)

	ResetPassword(ctx context.Context, req *ResetPasswordReq) (r *ResetPasswordResp, err error)

	DeleteTeacherInfo(ctx context.Context, req *DeleteTeacherInfoReq) (r *DeleteTeacherInfoResp, err error)

	CreateTeacherInfo(ctx context.Context, req *CreateTeacherInfoReq) (r *CreateTeacherInfoResp, err error)

	ExportTeacherInfo(ctx context.Context, req *ExportTeacherInfoReq) (r *ExportTeacherInfoResp, err error)

	GetCourseList(ctx context.Context, req *GetCourseListReq) (r *GetCourseListResp, err error)

	DeleteCourse(ctx context.Context, req *DeleteCourseReq) (r *DeleteCourseResp, err error)

	ImportCourse(ctx context.Context, req *ImportCourseReq) (r *ImportCourseResp, err error)

	UpdateCourse(ctx context.Context, req *UpdateCourseReq) (r *UpdateCourseResp, err error)

	GetSelfCourseList(ctx context.Context, req *GetSelfCourseListReq) (r *GetSelfCourseListResp, err error)

	GetCourseApplicationList(ctx context.Context, req *GetCourseApplicationListReq) (r *GetCourseApplicationListResp, err error)

	DeleteCourseApplication(ctx context.Context, req *DeleteCourseApplicationReq) (r *DeleteCourseApplicationResp, err error)

	GetSelfCourseApplicationList(ctx context.Context, req *GetSelfCourseApplicationListReq) (r *GetSelfCourseApplicationListResp, err error)

	AdjustCourseApplication(ctx context.Context, req *AdjustCourseApplicationReq) (r *AdjustCourseApplicationResp, err error)

	GetHolidayList(ctx context.Context, req *GetHolidayListReq) (r *GetHolidayListResp, err error)

	DeleteHoliday(ctx context.Context, req *DeleteHolidayReq) (r *DeleteHolidayResp, err error)

	CreateHoliday(ctx context.Context, req *CreateHolidayReq) (r *CreateHolidayResp, err error)

	UpdateHoliday(ctx context.Context, req *UpdateHolidayReq) (r *UpdateHolidayResp, err error)

	GetInternshipList(ctx context.Context, req *GetInternshipListReq) (r *GetInternshipListResp, err error)

	DeleteInternship(ctx context.Context, req *DeleteInternshipReq) (r *DeleteInternshipResp, err error)

	UpdateInternship(ctx context.Context, req *UpdateInternshipReq) (r *UpdateInternshipResp, err error)

	CreateInternship(ctx context.Context, req *CreateInternshipReq) (r *CreateInternshipResp, err error)

	ImportInternship(ctx context.Context, req *ImportInternshipReq) (r *ImportInternshipResp, err error)

	GetTrainingCourseList(ctx context.Context, req *GetTrainingCourseListReq) (r *GetTrainingCourseListResp, err error)

	CreateTrainingCourse(ctx context.Context, req *CreateTrainingCourseReq) (r *CreateTrainingCourseResp, err error)

	DeleteTrainingCourse(ctx context.Context, req *DeleteTrainingCourseReq) (r *DeleteTrainingCourseResp, err error)

	UpdateTrainingCourse(ctx context.Context, req *UpdateTrainingCourseReq) (r *UpdateTrainingCourseResp, err error)

	UpdateTrainingCourseTeacher(ctx context.Context, req *UpdateTrainingCourseTeacherReq) (r *UpdateTrainingCourseTeacherResp, err error)

	ImportTrainingCourse(ctx context.Context, req *ImportTrainingCourseReq) (r *ImportTrainingCourseResp, err error)

	GetSelfTrainingCourseList(ctx context.Context, req *GetSelfTrainingCourseListReq) (r *GetSelfTrainingCourseListResp, err error)

	SyncFinalExam(ctx context.Context, req *SyncFinalExamReq) (r *SyncFinalExamResp, err error)

	GetFinalExamList(ctx context.Context, req *GetFinalExamListReq) (r *GetFinalExamListResp, err error)

	GetFinalExamSubjectList(ctx context.Context, req *GetFinalExamSubjectListReq) (r *GetFinalExamSubjectListResp, err error)

	UpdateFinalExam(ctx context.Context, req *UpdateFinalExamReq) (r *UpdateFinalExamResp, err error)

	ExportFinalExam(ctx context.Context, req *ExportFinalExamReq) (r *ExportFinalExamResp, err error)

	CalculateFinalExamWorkload(ctx context.Context, req *CalculateFinalExamWorkloadReq) (r *CalculateFinalExamWorkloadResp, err error)

	DeleteFinalExam(ctx context.Context, req *DeleteFinalExamReq) (r *DeleteFinalExamResp, err error)

	FillFinalExamPaper(ctx context.Context, req *FillFinalExamPaperReq) (r *FillFinalExamPaperResp, err error)

	GetFinalExamFillRecordList(ctx context.Context, req *GetFinalExamRecordListReq) (r *GetFinalExamRecordListResp, err error)

	DeleteFinalExamRecord(ctx context.Context, req *DeleteFinalExamRecordReq) (r *DeleteFinalExamRecordResp, err error)
}

type EducationserviceCreateAppArgs struct {
	Req *CreateAppReq `thrift:"req,1" frugal:"1,default,CreateAppReq" json:"req"`
}

func NewEducationserviceCreateAppArgs() *EducationserviceCreateAppArgs {
	return &EducationserviceCreateAppArgs{}
}

func (p *EducationserviceCreateAppArgs) InitDefault() {
}

var EducationserviceCreateAppArgs_Req_DEFAULT *CreateAppReq

func (p *EducationserviceCreateAppArgs) GetReq() (v *CreateAppReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateAppArgs) SetReq(val *CreateAppReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateAppArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateAppReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateAppArgs(%+v)", *p)

}

func (p *EducationserviceCreateAppArgs) DeepEqual(ano *EducationserviceCreateAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateAppArgs) Field1DeepEqual(src *CreateAppReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateAppResult struct {
	Success *CreateAppResp `thrift:"success,0,optional" frugal:"0,optional,CreateAppResp" json:"success,omitempty"`
}

func NewEducationserviceCreateAppResult() *EducationserviceCreateAppResult {
	return &EducationserviceCreateAppResult{}
}

func (p *EducationserviceCreateAppResult) InitDefault() {
}

var EducationserviceCreateAppResult_Success_DEFAULT *CreateAppResp

func (p *EducationserviceCreateAppResult) GetSuccess() (v *CreateAppResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateAppResp)
}

var fieldIDToName_EducationserviceCreateAppResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateAppResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateAppResult(%+v)", *p)

}

func (p *EducationserviceCreateAppResult) DeepEqual(ano *EducationserviceCreateAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateAppResult) Field0DeepEqual(src *CreateAppResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewEducationserviceLoginArgs() *EducationserviceLoginArgs {
	return &EducationserviceLoginArgs{}
}

func (p *EducationserviceLoginArgs) InitDefault() {
}

var EducationserviceLoginArgs_Req_DEFAULT *LoginReq

func (p *EducationserviceLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return EducationserviceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceLoginArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLoginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Login_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceLoginArgs(%+v)", *p)

}

func (p *EducationserviceLoginArgs) DeepEqual(ano *EducationserviceLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceLoginArgs) Field1DeepEqual(src *LoginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewEducationserviceLoginResult() *EducationserviceLoginResult {
	return &EducationserviceLoginResult{}
}

func (p *EducationserviceLoginResult) InitDefault() {
}

var EducationserviceLoginResult_Success_DEFAULT *LoginResp

func (p *EducationserviceLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return EducationserviceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

var fieldIDToName_EducationserviceLoginResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLoginResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Login_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceLoginResult(%+v)", *p)

}

func (p *EducationserviceLoginResult) DeepEqual(ano *EducationserviceLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceLoginResult) Field0DeepEqual(src *LoginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateUserArgs struct {
	Req *CreateUserReq `thrift:"req,1" frugal:"1,default,CreateUserReq" json:"req"`
}

func NewEducationserviceCreateUserArgs() *EducationserviceCreateUserArgs {
	return &EducationserviceCreateUserArgs{}
}

func (p *EducationserviceCreateUserArgs) InitDefault() {
}

var EducationserviceCreateUserArgs_Req_DEFAULT *CreateUserReq

func (p *EducationserviceCreateUserArgs) GetReq() (v *CreateUserReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateUserArgs) SetReq(val *CreateUserReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateUserArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateUserReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateUserArgs(%+v)", *p)

}

func (p *EducationserviceCreateUserArgs) DeepEqual(ano *EducationserviceCreateUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateUserArgs) Field1DeepEqual(src *CreateUserReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateUserResult struct {
	Success *CreateUserResp `thrift:"success,0,optional" frugal:"0,optional,CreateUserResp" json:"success,omitempty"`
}

func NewEducationserviceCreateUserResult() *EducationserviceCreateUserResult {
	return &EducationserviceCreateUserResult{}
}

func (p *EducationserviceCreateUserResult) InitDefault() {
}

var EducationserviceCreateUserResult_Success_DEFAULT *CreateUserResp

func (p *EducationserviceCreateUserResult) GetSuccess() (v *CreateUserResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserResp)
}

var fieldIDToName_EducationserviceCreateUserResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateUserResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateUserResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateUserResult(%+v)", *p)

}

func (p *EducationserviceCreateUserResult) DeepEqual(ano *EducationserviceCreateUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateUserResult) Field0DeepEqual(src *CreateUserResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateRoleArgs struct {
	Req *CreateRoleReq `thrift:"req,1" frugal:"1,default,CreateRoleReq" json:"req"`
}

func NewEducationserviceCreateRoleArgs() *EducationserviceCreateRoleArgs {
	return &EducationserviceCreateRoleArgs{}
}

func (p *EducationserviceCreateRoleArgs) InitDefault() {
}

var EducationserviceCreateRoleArgs_Req_DEFAULT *CreateRoleReq

func (p *EducationserviceCreateRoleArgs) GetReq() (v *CreateRoleReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateRoleArgs) SetReq(val *CreateRoleReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateRoleArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateRoleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateRoleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateRoleArgs(%+v)", *p)

}

func (p *EducationserviceCreateRoleArgs) DeepEqual(ano *EducationserviceCreateRoleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateRoleArgs) Field1DeepEqual(src *CreateRoleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateRoleResult struct {
	Success *CreateRoleResp `thrift:"success,0,optional" frugal:"0,optional,CreateRoleResp" json:"success,omitempty"`
}

func NewEducationserviceCreateRoleResult() *EducationserviceCreateRoleResult {
	return &EducationserviceCreateRoleResult{}
}

func (p *EducationserviceCreateRoleResult) InitDefault() {
}

var EducationserviceCreateRoleResult_Success_DEFAULT *CreateRoleResp

func (p *EducationserviceCreateRoleResult) GetSuccess() (v *CreateRoleResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateRoleResp)
}

var fieldIDToName_EducationserviceCreateRoleResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateRoleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateRoleResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateRoleResult(%+v)", *p)

}

func (p *EducationserviceCreateRoleResult) DeepEqual(ano *EducationserviceCreateRoleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateRoleResult) Field0DeepEqual(src *CreateRoleResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteUserArgs struct {
	Req *DeleteUserReq `thrift:"req,1" frugal:"1,default,DeleteUserReq" json:"req"`
}

func NewEducationserviceDeleteUserArgs() *EducationserviceDeleteUserArgs {
	return &EducationserviceDeleteUserArgs{}
}

func (p *EducationserviceDeleteUserArgs) InitDefault() {
}

var EducationserviceDeleteUserArgs_Req_DEFAULT *DeleteUserReq

func (p *EducationserviceDeleteUserArgs) GetReq() (v *DeleteUserReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteUserArgs) SetReq(val *DeleteUserReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteUserArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteUserArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteUserReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteUserArgs(%+v)", *p)

}

func (p *EducationserviceDeleteUserArgs) DeepEqual(ano *EducationserviceDeleteUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteUserArgs) Field1DeepEqual(src *DeleteUserReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteUserResult struct {
	Success *DeleteUserResp `thrift:"success,0,optional" frugal:"0,optional,DeleteUserResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteUserResult() *EducationserviceDeleteUserResult {
	return &EducationserviceDeleteUserResult{}
}

func (p *EducationserviceDeleteUserResult) InitDefault() {
}

var EducationserviceDeleteUserResult_Success_DEFAULT *DeleteUserResp

func (p *EducationserviceDeleteUserResult) GetSuccess() (v *DeleteUserResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteUserResp)
}

var fieldIDToName_EducationserviceDeleteUserResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteUserResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteUserResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteUserResult(%+v)", *p)

}

func (p *EducationserviceDeleteUserResult) DeepEqual(ano *EducationserviceDeleteUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteUserResult) Field0DeepEqual(src *DeleteUserResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetUserListArgs struct {
	Req *GetUserListReq `thrift:"req,1" frugal:"1,default,GetUserListReq" json:"req"`
}

func NewEducationserviceGetUserListArgs() *EducationserviceGetUserListArgs {
	return &EducationserviceGetUserListArgs{}
}

func (p *EducationserviceGetUserListArgs) InitDefault() {
}

var EducationserviceGetUserListArgs_Req_DEFAULT *GetUserListReq

func (p *EducationserviceGetUserListArgs) GetReq() (v *GetUserListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetUserListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetUserListArgs) SetReq(val *GetUserListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetUserListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetUserListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetUserListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetUserListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetUserListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetUserListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetUserListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetUserListArgs(%+v)", *p)

}

func (p *EducationserviceGetUserListArgs) DeepEqual(ano *EducationserviceGetUserListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetUserListArgs) Field1DeepEqual(src *GetUserListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetUserListResult struct {
	Success *GetUserListResp `thrift:"success,0,optional" frugal:"0,optional,GetUserListResp" json:"success,omitempty"`
}

func NewEducationserviceGetUserListResult() *EducationserviceGetUserListResult {
	return &EducationserviceGetUserListResult{}
}

func (p *EducationserviceGetUserListResult) InitDefault() {
}

var EducationserviceGetUserListResult_Success_DEFAULT *GetUserListResp

func (p *EducationserviceGetUserListResult) GetSuccess() (v *GetUserListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetUserListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserListResp)
}

var fieldIDToName_EducationserviceGetUserListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetUserListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetUserListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetUserListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetUserListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetUserListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetUserListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetUserListResult(%+v)", *p)

}

func (p *EducationserviceGetUserListResult) DeepEqual(ano *EducationserviceGetUserListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetUserListResult) Field0DeepEqual(src *GetUserListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetRoleListArgs struct {
	Req *GetRoleListReq `thrift:"req,1" frugal:"1,default,GetRoleListReq" json:"req"`
}

func NewEducationserviceGetRoleListArgs() *EducationserviceGetRoleListArgs {
	return &EducationserviceGetRoleListArgs{}
}

func (p *EducationserviceGetRoleListArgs) InitDefault() {
}

var EducationserviceGetRoleListArgs_Req_DEFAULT *GetRoleListReq

func (p *EducationserviceGetRoleListArgs) GetReq() (v *GetRoleListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetRoleListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetRoleListArgs) SetReq(val *GetRoleListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetRoleListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetRoleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetRoleListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetRoleListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetRoleListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetRoleListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetRoleListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoleList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetRoleListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetRoleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetRoleListArgs(%+v)", *p)

}

func (p *EducationserviceGetRoleListArgs) DeepEqual(ano *EducationserviceGetRoleListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetRoleListArgs) Field1DeepEqual(src *GetRoleListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetRoleListResult struct {
	Success *GetRoleListResp `thrift:"success,0,optional" frugal:"0,optional,GetRoleListResp" json:"success,omitempty"`
}

func NewEducationserviceGetRoleListResult() *EducationserviceGetRoleListResult {
	return &EducationserviceGetRoleListResult{}
}

func (p *EducationserviceGetRoleListResult) InitDefault() {
}

var EducationserviceGetRoleListResult_Success_DEFAULT *GetRoleListResp

func (p *EducationserviceGetRoleListResult) GetSuccess() (v *GetRoleListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetRoleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetRoleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetRoleListResp)
}

var fieldIDToName_EducationserviceGetRoleListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetRoleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetRoleListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetRoleListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetRoleListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetRoleListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetRoleListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoleList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetRoleListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetRoleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetRoleListResult(%+v)", *p)

}

func (p *EducationserviceGetRoleListResult) DeepEqual(ano *EducationserviceGetRoleListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetRoleListResult) Field0DeepEqual(src *GetRoleListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreatePermissionArgs struct {
	Req *CreatePermissionReq `thrift:"req,1" frugal:"1,default,CreatePermissionReq" json:"req"`
}

func NewEducationserviceCreatePermissionArgs() *EducationserviceCreatePermissionArgs {
	return &EducationserviceCreatePermissionArgs{}
}

func (p *EducationserviceCreatePermissionArgs) InitDefault() {
}

var EducationserviceCreatePermissionArgs_Req_DEFAULT *CreatePermissionReq

func (p *EducationserviceCreatePermissionArgs) GetReq() (v *CreatePermissionReq) {
	if !p.IsSetReq() {
		return EducationserviceCreatePermissionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreatePermissionArgs) SetReq(val *CreatePermissionReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreatePermissionArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreatePermissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreatePermissionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreatePermissionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreatePermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreatePermissionReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreatePermissionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePermission_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreatePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreatePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreatePermissionArgs(%+v)", *p)

}

func (p *EducationserviceCreatePermissionArgs) DeepEqual(ano *EducationserviceCreatePermissionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreatePermissionArgs) Field1DeepEqual(src *CreatePermissionReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreatePermissionResult struct {
	Success *CreatePermissionResp `thrift:"success,0,optional" frugal:"0,optional,CreatePermissionResp" json:"success,omitempty"`
}

func NewEducationserviceCreatePermissionResult() *EducationserviceCreatePermissionResult {
	return &EducationserviceCreatePermissionResult{}
}

func (p *EducationserviceCreatePermissionResult) InitDefault() {
}

var EducationserviceCreatePermissionResult_Success_DEFAULT *CreatePermissionResp

func (p *EducationserviceCreatePermissionResult) GetSuccess() (v *CreatePermissionResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreatePermissionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreatePermissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePermissionResp)
}

var fieldIDToName_EducationserviceCreatePermissionResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreatePermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreatePermissionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreatePermissionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreatePermissionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreatePermissionResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreatePermissionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePermission_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreatePermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreatePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreatePermissionResult(%+v)", *p)

}

func (p *EducationserviceCreatePermissionResult) DeepEqual(ano *EducationserviceCreatePermissionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreatePermissionResult) Field0DeepEqual(src *CreatePermissionResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetPermissionListArgs struct {
	Req *GetPermissionListReq `thrift:"req,1" frugal:"1,default,GetPermissionListReq" json:"req"`
}

func NewEducationserviceGetPermissionListArgs() *EducationserviceGetPermissionListArgs {
	return &EducationserviceGetPermissionListArgs{}
}

func (p *EducationserviceGetPermissionListArgs) InitDefault() {
}

var EducationserviceGetPermissionListArgs_Req_DEFAULT *GetPermissionListReq

func (p *EducationserviceGetPermissionListArgs) GetReq() (v *GetPermissionListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetPermissionListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetPermissionListArgs) SetReq(val *GetPermissionListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetPermissionListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetPermissionListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetPermissionListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetPermissionListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetPermissionListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetPermissionListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetPermissionListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPermissionList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetPermissionListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetPermissionListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetPermissionListArgs(%+v)", *p)

}

func (p *EducationserviceGetPermissionListArgs) DeepEqual(ano *EducationserviceGetPermissionListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetPermissionListArgs) Field1DeepEqual(src *GetPermissionListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetPermissionListResult struct {
	Success *GetPermissionListResp `thrift:"success,0,optional" frugal:"0,optional,GetPermissionListResp" json:"success,omitempty"`
}

func NewEducationserviceGetPermissionListResult() *EducationserviceGetPermissionListResult {
	return &EducationserviceGetPermissionListResult{}
}

func (p *EducationserviceGetPermissionListResult) InitDefault() {
}

var EducationserviceGetPermissionListResult_Success_DEFAULT *GetPermissionListResp

func (p *EducationserviceGetPermissionListResult) GetSuccess() (v *GetPermissionListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetPermissionListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetPermissionListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPermissionListResp)
}

var fieldIDToName_EducationserviceGetPermissionListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetPermissionListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetPermissionListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetPermissionListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetPermissionListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetPermissionListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetPermissionListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPermissionList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetPermissionListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetPermissionListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetPermissionListResult(%+v)", *p)

}

func (p *EducationserviceGetPermissionListResult) DeepEqual(ano *EducationserviceGetPermissionListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetPermissionListResult) Field0DeepEqual(src *GetPermissionListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetMenuArgs struct {
	Req *GetMenuReq `thrift:"req,1" frugal:"1,default,GetMenuReq" json:"req"`
}

func NewEducationserviceGetMenuArgs() *EducationserviceGetMenuArgs {
	return &EducationserviceGetMenuArgs{}
}

func (p *EducationserviceGetMenuArgs) InitDefault() {
}

var EducationserviceGetMenuArgs_Req_DEFAULT *GetMenuReq

func (p *EducationserviceGetMenuArgs) GetReq() (v *GetMenuReq) {
	if !p.IsSetReq() {
		return EducationserviceGetMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetMenuArgs) SetReq(val *GetMenuReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetMenuArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetMenuArgs(%+v)", *p)

}

func (p *EducationserviceGetMenuArgs) DeepEqual(ano *EducationserviceGetMenuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetMenuArgs) Field1DeepEqual(src *GetMenuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetMenuResult struct {
	Success *GetMenuResp `thrift:"success,0,optional" frugal:"0,optional,GetMenuResp" json:"success,omitempty"`
}

func NewEducationserviceGetMenuResult() *EducationserviceGetMenuResult {
	return &EducationserviceGetMenuResult{}
}

func (p *EducationserviceGetMenuResult) InitDefault() {
}

var EducationserviceGetMenuResult_Success_DEFAULT *GetMenuResp

func (p *EducationserviceGetMenuResult) GetSuccess() (v *GetMenuResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMenuResp)
}

var fieldIDToName_EducationserviceGetMenuResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetMenuResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetMenuResult(%+v)", *p)

}

func (p *EducationserviceGetMenuResult) DeepEqual(ano *EducationserviceGetMenuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetMenuResult) Field0DeepEqual(src *GetMenuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetMenuListArgs struct {
	Req *GetMenuListReq `thrift:"req,1" frugal:"1,default,GetMenuListReq" json:"req"`
}

func NewEducationserviceGetMenuListArgs() *EducationserviceGetMenuListArgs {
	return &EducationserviceGetMenuListArgs{}
}

func (p *EducationserviceGetMenuListArgs) InitDefault() {
}

var EducationserviceGetMenuListArgs_Req_DEFAULT *GetMenuListReq

func (p *EducationserviceGetMenuListArgs) GetReq() (v *GetMenuListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetMenuListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetMenuListArgs) SetReq(val *GetMenuListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetMenuListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetMenuListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetMenuListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetMenuListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetMenuListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetMenuListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetMenuListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenuList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetMenuListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetMenuListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetMenuListArgs(%+v)", *p)

}

func (p *EducationserviceGetMenuListArgs) DeepEqual(ano *EducationserviceGetMenuListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetMenuListArgs) Field1DeepEqual(src *GetMenuListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetMenuListResult struct {
	Success *GetMenuListResp `thrift:"success,0,optional" frugal:"0,optional,GetMenuListResp" json:"success,omitempty"`
}

func NewEducationserviceGetMenuListResult() *EducationserviceGetMenuListResult {
	return &EducationserviceGetMenuListResult{}
}

func (p *EducationserviceGetMenuListResult) InitDefault() {
}

var EducationserviceGetMenuListResult_Success_DEFAULT *GetMenuListResp

func (p *EducationserviceGetMenuListResult) GetSuccess() (v *GetMenuListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetMenuListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetMenuListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMenuListResp)
}

var fieldIDToName_EducationserviceGetMenuListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetMenuListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetMenuListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetMenuListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetMenuListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetMenuListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetMenuListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenuList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetMenuListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetMenuListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetMenuListResult(%+v)", *p)

}

func (p *EducationserviceGetMenuListResult) DeepEqual(ano *EducationserviceGetMenuListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetMenuListResult) Field0DeepEqual(src *GetMenuListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetUserInfoArgs struct {
	Req *GetUserInfoReq `thrift:"req,1" frugal:"1,default,GetUserInfoReq" json:"req"`
}

func NewEducationserviceGetUserInfoArgs() *EducationserviceGetUserInfoArgs {
	return &EducationserviceGetUserInfoArgs{}
}

func (p *EducationserviceGetUserInfoArgs) InitDefault() {
}

var EducationserviceGetUserInfoArgs_Req_DEFAULT *GetUserInfoReq

func (p *EducationserviceGetUserInfoArgs) GetReq() (v *GetUserInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetUserInfoArgs) SetReq(val *GetUserInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetUserInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetUserInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetUserInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetUserInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetUserInfoArgs(%+v)", *p)

}

func (p *EducationserviceGetUserInfoArgs) DeepEqual(ano *EducationserviceGetUserInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetUserInfoArgs) Field1DeepEqual(src *GetUserInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetUserInfoResult struct {
	Success *GetUserInfoResp `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResp" json:"success,omitempty"`
}

func NewEducationserviceGetUserInfoResult() *EducationserviceGetUserInfoResult {
	return &EducationserviceGetUserInfoResult{}
}

func (p *EducationserviceGetUserInfoResult) InitDefault() {
}

var EducationserviceGetUserInfoResult_Success_DEFAULT *GetUserInfoResp

func (p *EducationserviceGetUserInfoResult) GetSuccess() (v *GetUserInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResp)
}

var fieldIDToName_EducationserviceGetUserInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetUserInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetUserInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetUserInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetUserInfoResult(%+v)", *p)

}

func (p *EducationserviceGetUserInfoResult) DeepEqual(ano *EducationserviceGetUserInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetUserInfoResult) Field0DeepEqual(src *GetUserInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetAuthCodeArgs struct {
	Req *GetAuthCodeReq `thrift:"req,1" frugal:"1,default,GetAuthCodeReq" json:"req"`
}

func NewEducationserviceGetAuthCodeArgs() *EducationserviceGetAuthCodeArgs {
	return &EducationserviceGetAuthCodeArgs{}
}

func (p *EducationserviceGetAuthCodeArgs) InitDefault() {
}

var EducationserviceGetAuthCodeArgs_Req_DEFAULT *GetAuthCodeReq

func (p *EducationserviceGetAuthCodeArgs) GetReq() (v *GetAuthCodeReq) {
	if !p.IsSetReq() {
		return EducationserviceGetAuthCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetAuthCodeArgs) SetReq(val *GetAuthCodeReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetAuthCodeArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetAuthCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetAuthCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetAuthCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetAuthCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetAuthCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAuthCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetAuthCodeArgs(%+v)", *p)

}

func (p *EducationserviceGetAuthCodeArgs) DeepEqual(ano *EducationserviceGetAuthCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetAuthCodeArgs) Field1DeepEqual(src *GetAuthCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetAuthCodeResult struct {
	Success *GetAuthCodeResp `thrift:"success,0,optional" frugal:"0,optional,GetAuthCodeResp" json:"success,omitempty"`
}

func NewEducationserviceGetAuthCodeResult() *EducationserviceGetAuthCodeResult {
	return &EducationserviceGetAuthCodeResult{}
}

func (p *EducationserviceGetAuthCodeResult) InitDefault() {
}

var EducationserviceGetAuthCodeResult_Success_DEFAULT *GetAuthCodeResp

func (p *EducationserviceGetAuthCodeResult) GetSuccess() (v *GetAuthCodeResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetAuthCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetAuthCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAuthCodeResp)
}

var fieldIDToName_EducationserviceGetAuthCodeResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetAuthCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetAuthCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetAuthCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetAuthCodeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetAuthCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAuthCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetAuthCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetAuthCodeResult(%+v)", *p)

}

func (p *EducationserviceGetAuthCodeResult) DeepEqual(ano *EducationserviceGetAuthCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetAuthCodeResult) Field0DeepEqual(src *GetAuthCodeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetUserRoleArgs struct {
	Req *SetUserRoleReq `thrift:"req,1" frugal:"1,default,SetUserRoleReq" json:"req"`
}

func NewEducationserviceSetUserRoleArgs() *EducationserviceSetUserRoleArgs {
	return &EducationserviceSetUserRoleArgs{}
}

func (p *EducationserviceSetUserRoleArgs) InitDefault() {
}

var EducationserviceSetUserRoleArgs_Req_DEFAULT *SetUserRoleReq

func (p *EducationserviceSetUserRoleArgs) GetReq() (v *SetUserRoleReq) {
	if !p.IsSetReq() {
		return EducationserviceSetUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSetUserRoleArgs) SetReq(val *SetUserRoleReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSetUserRoleArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSetUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSetUserRoleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetUserRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetUserRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetUserRoleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSetUserRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetUserRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetUserRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSetUserRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetUserRoleArgs(%+v)", *p)

}

func (p *EducationserviceSetUserRoleArgs) DeepEqual(ano *EducationserviceSetUserRoleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSetUserRoleArgs) Field1DeepEqual(src *SetUserRoleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetUserRoleResult struct {
	Success *SetUserRoleResp `thrift:"success,0,optional" frugal:"0,optional,SetUserRoleResp" json:"success,omitempty"`
}

func NewEducationserviceSetUserRoleResult() *EducationserviceSetUserRoleResult {
	return &EducationserviceSetUserRoleResult{}
}

func (p *EducationserviceSetUserRoleResult) InitDefault() {
}

var EducationserviceSetUserRoleResult_Success_DEFAULT *SetUserRoleResp

func (p *EducationserviceSetUserRoleResult) GetSuccess() (v *SetUserRoleResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSetUserRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSetUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetUserRoleResp)
}

var fieldIDToName_EducationserviceSetUserRoleResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSetUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSetUserRoleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetUserRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetUserRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetUserRoleResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSetUserRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetUserRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetUserRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSetUserRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetUserRoleResult(%+v)", *p)

}

func (p *EducationserviceSetUserRoleResult) DeepEqual(ano *EducationserviceSetUserRoleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSetUserRoleResult) Field0DeepEqual(src *SetUserRoleResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRolePermissionArgs struct {
	Req *SetRolePermissionReq `thrift:"req,1" frugal:"1,default,SetRolePermissionReq" json:"req"`
}

func NewEducationserviceSetRolePermissionArgs() *EducationserviceSetRolePermissionArgs {
	return &EducationserviceSetRolePermissionArgs{}
}

func (p *EducationserviceSetRolePermissionArgs) InitDefault() {
}

var EducationserviceSetRolePermissionArgs_Req_DEFAULT *SetRolePermissionReq

func (p *EducationserviceSetRolePermissionArgs) GetReq() (v *SetRolePermissionReq) {
	if !p.IsSetReq() {
		return EducationserviceSetRolePermissionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSetRolePermissionArgs) SetReq(val *SetRolePermissionReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSetRolePermissionArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSetRolePermissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSetRolePermissionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRolePermissionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetRolePermissionReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSetRolePermissionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRolePermission_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRolePermissionArgs(%+v)", *p)

}

func (p *EducationserviceSetRolePermissionArgs) DeepEqual(ano *EducationserviceSetRolePermissionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSetRolePermissionArgs) Field1DeepEqual(src *SetRolePermissionReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRolePermissionResult struct {
	Success *SetRolePermissionResp `thrift:"success,0,optional" frugal:"0,optional,SetRolePermissionResp" json:"success,omitempty"`
}

func NewEducationserviceSetRolePermissionResult() *EducationserviceSetRolePermissionResult {
	return &EducationserviceSetRolePermissionResult{}
}

func (p *EducationserviceSetRolePermissionResult) InitDefault() {
}

var EducationserviceSetRolePermissionResult_Success_DEFAULT *SetRolePermissionResp

func (p *EducationserviceSetRolePermissionResult) GetSuccess() (v *SetRolePermissionResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSetRolePermissionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSetRolePermissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetRolePermissionResp)
}

var fieldIDToName_EducationserviceSetRolePermissionResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSetRolePermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSetRolePermissionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRolePermissionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetRolePermissionResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSetRolePermissionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRolePermission_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSetRolePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRolePermissionResult(%+v)", *p)

}

func (p *EducationserviceSetRolePermissionResult) DeepEqual(ano *EducationserviceSetRolePermissionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSetRolePermissionResult) Field0DeepEqual(src *SetRolePermissionResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRoleMenuArgs struct {
	Req *SetRoleMenuReq `thrift:"req,1" frugal:"1,default,SetRoleMenuReq" json:"req"`
}

func NewEducationserviceSetRoleMenuArgs() *EducationserviceSetRoleMenuArgs {
	return &EducationserviceSetRoleMenuArgs{}
}

func (p *EducationserviceSetRoleMenuArgs) InitDefault() {
}

var EducationserviceSetRoleMenuArgs_Req_DEFAULT *SetRoleMenuReq

func (p *EducationserviceSetRoleMenuArgs) GetReq() (v *SetRoleMenuReq) {
	if !p.IsSetReq() {
		return EducationserviceSetRoleMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSetRoleMenuArgs) SetReq(val *SetRoleMenuReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSetRoleMenuArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSetRoleMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSetRoleMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRoleMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetRoleMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSetRoleMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRoleMenuArgs(%+v)", *p)

}

func (p *EducationserviceSetRoleMenuArgs) DeepEqual(ano *EducationserviceSetRoleMenuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSetRoleMenuArgs) Field1DeepEqual(src *SetRoleMenuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRoleMenuResult struct {
	Success *SetRoleMenuResp `thrift:"success,0,optional" frugal:"0,optional,SetRoleMenuResp" json:"success,omitempty"`
}

func NewEducationserviceSetRoleMenuResult() *EducationserviceSetRoleMenuResult {
	return &EducationserviceSetRoleMenuResult{}
}

func (p *EducationserviceSetRoleMenuResult) InitDefault() {
}

var EducationserviceSetRoleMenuResult_Success_DEFAULT *SetRoleMenuResp

func (p *EducationserviceSetRoleMenuResult) GetSuccess() (v *SetRoleMenuResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSetRoleMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSetRoleMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetRoleMenuResp)
}

var fieldIDToName_EducationserviceSetRoleMenuResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSetRoleMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSetRoleMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRoleMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetRoleMenuResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSetRoleMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSetRoleMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRoleMenuResult(%+v)", *p)

}

func (p *EducationserviceSetRoleMenuResult) DeepEqual(ano *EducationserviceSetRoleMenuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSetRoleMenuResult) Field0DeepEqual(src *SetRoleMenuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateMenuArgs struct {
	Req *CreateMenuReq `thrift:"req,1" frugal:"1,default,CreateMenuReq" json:"req"`
}

func NewEducationserviceCreateMenuArgs() *EducationserviceCreateMenuArgs {
	return &EducationserviceCreateMenuArgs{}
}

func (p *EducationserviceCreateMenuArgs) InitDefault() {
}

var EducationserviceCreateMenuArgs_Req_DEFAULT *CreateMenuReq

func (p *EducationserviceCreateMenuArgs) GetReq() (v *CreateMenuReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateMenuArgs) SetReq(val *CreateMenuReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateMenuArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateMenuArgs(%+v)", *p)

}

func (p *EducationserviceCreateMenuArgs) DeepEqual(ano *EducationserviceCreateMenuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateMenuArgs) Field1DeepEqual(src *CreateMenuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateMenuResult struct {
	Success *CreateMenuResp `thrift:"success,0,optional" frugal:"0,optional,CreateMenuResp" json:"success,omitempty"`
}

func NewEducationserviceCreateMenuResult() *EducationserviceCreateMenuResult {
	return &EducationserviceCreateMenuResult{}
}

func (p *EducationserviceCreateMenuResult) InitDefault() {
}

var EducationserviceCreateMenuResult_Success_DEFAULT *CreateMenuResp

func (p *EducationserviceCreateMenuResult) GetSuccess() (v *CreateMenuResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateMenuResp)
}

var fieldIDToName_EducationserviceCreateMenuResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateMenuResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateMenuResult(%+v)", *p)

}

func (p *EducationserviceCreateMenuResult) DeepEqual(ano *EducationserviceCreateMenuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateMenuResult) Field0DeepEqual(src *CreateMenuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateOfficeArgs struct {
	Req *CreateOfficeReq `thrift:"req,1" frugal:"1,default,CreateOfficeReq" json:"req"`
}

func NewEducationserviceCreateOfficeArgs() *EducationserviceCreateOfficeArgs {
	return &EducationserviceCreateOfficeArgs{}
}

func (p *EducationserviceCreateOfficeArgs) InitDefault() {
}

var EducationserviceCreateOfficeArgs_Req_DEFAULT *CreateOfficeReq

func (p *EducationserviceCreateOfficeArgs) GetReq() (v *CreateOfficeReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateOfficeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateOfficeArgs) SetReq(val *CreateOfficeReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateOfficeArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateOfficeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateOfficeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateOfficeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateOfficeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOfficeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateOfficeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOffice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateOfficeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateOfficeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateOfficeArgs(%+v)", *p)

}

func (p *EducationserviceCreateOfficeArgs) DeepEqual(ano *EducationserviceCreateOfficeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateOfficeArgs) Field1DeepEqual(src *CreateOfficeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateOfficeResult struct {
	Success *CreateOfficeResp `thrift:"success,0,optional" frugal:"0,optional,CreateOfficeResp" json:"success,omitempty"`
}

func NewEducationserviceCreateOfficeResult() *EducationserviceCreateOfficeResult {
	return &EducationserviceCreateOfficeResult{}
}

func (p *EducationserviceCreateOfficeResult) InitDefault() {
}

var EducationserviceCreateOfficeResult_Success_DEFAULT *CreateOfficeResp

func (p *EducationserviceCreateOfficeResult) GetSuccess() (v *CreateOfficeResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateOfficeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateOfficeResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateOfficeResp)
}

var fieldIDToName_EducationserviceCreateOfficeResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateOfficeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateOfficeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateOfficeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateOfficeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateOfficeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateOfficeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOffice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateOfficeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateOfficeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateOfficeResult(%+v)", *p)

}

func (p *EducationserviceCreateOfficeResult) DeepEqual(ano *EducationserviceCreateOfficeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateOfficeResult) Field0DeepEqual(src *CreateOfficeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetOfficeListArgs struct {
	Req *GetOfficeListReq `thrift:"req,1" frugal:"1,default,GetOfficeListReq" json:"req"`
}

func NewEducationserviceGetOfficeListArgs() *EducationserviceGetOfficeListArgs {
	return &EducationserviceGetOfficeListArgs{}
}

func (p *EducationserviceGetOfficeListArgs) InitDefault() {
}

var EducationserviceGetOfficeListArgs_Req_DEFAULT *GetOfficeListReq

func (p *EducationserviceGetOfficeListArgs) GetReq() (v *GetOfficeListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetOfficeListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetOfficeListArgs) SetReq(val *GetOfficeListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetOfficeListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetOfficeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetOfficeListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetOfficeListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetOfficeListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetOfficeListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetOfficeListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOfficeList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetOfficeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetOfficeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetOfficeListArgs(%+v)", *p)

}

func (p *EducationserviceGetOfficeListArgs) DeepEqual(ano *EducationserviceGetOfficeListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetOfficeListArgs) Field1DeepEqual(src *GetOfficeListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetOfficeListResult struct {
	Success *GetOfficeListResp `thrift:"success,0,optional" frugal:"0,optional,GetOfficeListResp" json:"success,omitempty"`
}

func NewEducationserviceGetOfficeListResult() *EducationserviceGetOfficeListResult {
	return &EducationserviceGetOfficeListResult{}
}

func (p *EducationserviceGetOfficeListResult) InitDefault() {
}

var EducationserviceGetOfficeListResult_Success_DEFAULT *GetOfficeListResp

func (p *EducationserviceGetOfficeListResult) GetSuccess() (v *GetOfficeListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetOfficeListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetOfficeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOfficeListResp)
}

var fieldIDToName_EducationserviceGetOfficeListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetOfficeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetOfficeListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetOfficeListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetOfficeListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetOfficeListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetOfficeListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOfficeList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetOfficeListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetOfficeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetOfficeListResult(%+v)", *p)

}

func (p *EducationserviceGetOfficeListResult) DeepEqual(ano *EducationserviceGetOfficeListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetOfficeListResult) Field0DeepEqual(src *GetOfficeListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetClassListArgs struct {
	Req *GetClassListReq `thrift:"req,1" frugal:"1,default,GetClassListReq" json:"req"`
}

func NewEducationserviceGetClassListArgs() *EducationserviceGetClassListArgs {
	return &EducationserviceGetClassListArgs{}
}

func (p *EducationserviceGetClassListArgs) InitDefault() {
}

var EducationserviceGetClassListArgs_Req_DEFAULT *GetClassListReq

func (p *EducationserviceGetClassListArgs) GetReq() (v *GetClassListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetClassListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetClassListArgs) SetReq(val *GetClassListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetClassListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetClassListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetClassListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetClassListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetClassListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetClassListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetClassListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClassList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetClassListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetClassListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetClassListArgs(%+v)", *p)

}

func (p *EducationserviceGetClassListArgs) DeepEqual(ano *EducationserviceGetClassListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetClassListArgs) Field1DeepEqual(src *GetClassListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetClassListResult struct {
	Success *GetClassListResp `thrift:"success,0,optional" frugal:"0,optional,GetClassListResp" json:"success,omitempty"`
}

func NewEducationserviceGetClassListResult() *EducationserviceGetClassListResult {
	return &EducationserviceGetClassListResult{}
}

func (p *EducationserviceGetClassListResult) InitDefault() {
}

var EducationserviceGetClassListResult_Success_DEFAULT *GetClassListResp

func (p *EducationserviceGetClassListResult) GetSuccess() (v *GetClassListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetClassListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetClassListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetClassListResp)
}

var fieldIDToName_EducationserviceGetClassListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetClassListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetClassListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetClassListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetClassListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetClassListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetClassListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClassList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetClassListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetClassListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetClassListResult(%+v)", *p)

}

func (p *EducationserviceGetClassListResult) DeepEqual(ano *EducationserviceGetClassListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetClassListResult) Field0DeepEqual(src *GetClassListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportCourseApplyArgs struct {
	Req *ImportCourseApplyReq `thrift:"req,1" frugal:"1,default,ImportCourseApplyReq" json:"req"`
}

func NewEducationserviceImportCourseApplyArgs() *EducationserviceImportCourseApplyArgs {
	return &EducationserviceImportCourseApplyArgs{}
}

func (p *EducationserviceImportCourseApplyArgs) InitDefault() {
}

var EducationserviceImportCourseApplyArgs_Req_DEFAULT *ImportCourseApplyReq

func (p *EducationserviceImportCourseApplyArgs) GetReq() (v *ImportCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceImportCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportCourseApplyArgs) SetReq(val *ImportCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceImportCourseApplyArgs) DeepEqual(ano *EducationserviceImportCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportCourseApplyArgs) Field1DeepEqual(src *ImportCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportCourseApplyResult struct {
	Success *ImportCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,ImportCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceImportCourseApplyResult() *EducationserviceImportCourseApplyResult {
	return &EducationserviceImportCourseApplyResult{}
}

func (p *EducationserviceImportCourseApplyResult) InitDefault() {
}

var EducationserviceImportCourseApplyResult_Success_DEFAULT *ImportCourseApplyResp

func (p *EducationserviceImportCourseApplyResult) GetSuccess() (v *ImportCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportCourseApplyResp)
}

var fieldIDToName_EducationserviceImportCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceImportCourseApplyResult) DeepEqual(ano *EducationserviceImportCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportCourseApplyResult) Field0DeepEqual(src *ImportCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseApplyListArgs struct {
	Req *GetCourseApplyListReq `thrift:"req,1" frugal:"1,default,GetCourseApplyListReq" json:"req"`
}

func NewEducationserviceGetCourseApplyListArgs() *EducationserviceGetCourseApplyListArgs {
	return &EducationserviceGetCourseApplyListArgs{}
}

func (p *EducationserviceGetCourseApplyListArgs) InitDefault() {
}

var EducationserviceGetCourseApplyListArgs_Req_DEFAULT *GetCourseApplyListReq

func (p *EducationserviceGetCourseApplyListArgs) GetReq() (v *GetCourseApplyListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetCourseApplyListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetCourseApplyListArgs) SetReq(val *GetCourseApplyListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetCourseApplyListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetCourseApplyListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetCourseApplyListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseApplyListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCourseApplyListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetCourseApplyListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplyList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseApplyListArgs(%+v)", *p)

}

func (p *EducationserviceGetCourseApplyListArgs) DeepEqual(ano *EducationserviceGetCourseApplyListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseApplyListArgs) Field1DeepEqual(src *GetCourseApplyListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseApplyListResult struct {
	Success *GetCourseApplyListResp `thrift:"success,0,optional" frugal:"0,optional,GetCourseApplyListResp" json:"success,omitempty"`
}

func NewEducationserviceGetCourseApplyListResult() *EducationserviceGetCourseApplyListResult {
	return &EducationserviceGetCourseApplyListResult{}
}

func (p *EducationserviceGetCourseApplyListResult) InitDefault() {
}

var EducationserviceGetCourseApplyListResult_Success_DEFAULT *GetCourseApplyListResp

func (p *EducationserviceGetCourseApplyListResult) GetSuccess() (v *GetCourseApplyListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetCourseApplyListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetCourseApplyListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCourseApplyListResp)
}

var fieldIDToName_EducationserviceGetCourseApplyListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetCourseApplyListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetCourseApplyListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseApplyListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCourseApplyListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetCourseApplyListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplyList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetCourseApplyListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseApplyListResult(%+v)", *p)

}

func (p *EducationserviceGetCourseApplyListResult) DeepEqual(ano *EducationserviceGetCourseApplyListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseApplyListResult) Field0DeepEqual(src *GetCourseApplyListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseApplyListArgs struct {
	Req *GetSelfCourseApplyListReq `thrift:"req,1" frugal:"1,default,GetSelfCourseApplyListReq" json:"req"`
}

func NewEducationserviceGetSelfCourseApplyListArgs() *EducationserviceGetSelfCourseApplyListArgs {
	return &EducationserviceGetSelfCourseApplyListArgs{}
}

func (p *EducationserviceGetSelfCourseApplyListArgs) InitDefault() {
}

var EducationserviceGetSelfCourseApplyListArgs_Req_DEFAULT *GetSelfCourseApplyListReq

func (p *EducationserviceGetSelfCourseApplyListArgs) GetReq() (v *GetSelfCourseApplyListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetSelfCourseApplyListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetSelfCourseApplyListArgs) SetReq(val *GetSelfCourseApplyListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetSelfCourseApplyListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetSelfCourseApplyListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetSelfCourseApplyListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseApplyListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseApplyListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetSelfCourseApplyListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplyList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseApplyListArgs(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseApplyListArgs) DeepEqual(ano *EducationserviceGetSelfCourseApplyListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseApplyListArgs) Field1DeepEqual(src *GetSelfCourseApplyListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseApplyListResult struct {
	Success *GetSelfCourseApplyListResp `thrift:"success,0,optional" frugal:"0,optional,GetSelfCourseApplyListResp" json:"success,omitempty"`
}

func NewEducationserviceGetSelfCourseApplyListResult() *EducationserviceGetSelfCourseApplyListResult {
	return &EducationserviceGetSelfCourseApplyListResult{}
}

func (p *EducationserviceGetSelfCourseApplyListResult) InitDefault() {
}

var EducationserviceGetSelfCourseApplyListResult_Success_DEFAULT *GetSelfCourseApplyListResp

func (p *EducationserviceGetSelfCourseApplyListResult) GetSuccess() (v *GetSelfCourseApplyListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetSelfCourseApplyListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetSelfCourseApplyListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSelfCourseApplyListResp)
}

var fieldIDToName_EducationserviceGetSelfCourseApplyListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetSelfCourseApplyListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetSelfCourseApplyListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseApplyListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseApplyListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetSelfCourseApplyListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplyList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplyListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseApplyListResult(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseApplyListResult) DeepEqual(ano *EducationserviceGetSelfCourseApplyListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseApplyListResult) Field0DeepEqual(src *GetSelfCourseApplyListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportUserArgs struct {
	Req *ImportUserReq `thrift:"req,1" frugal:"1,default,ImportUserReq" json:"req"`
}

func NewEducationserviceImportUserArgs() *EducationserviceImportUserArgs {
	return &EducationserviceImportUserArgs{}
}

func (p *EducationserviceImportUserArgs) InitDefault() {
}

var EducationserviceImportUserArgs_Req_DEFAULT *ImportUserReq

func (p *EducationserviceImportUserArgs) GetReq() (v *ImportUserReq) {
	if !p.IsSetReq() {
		return EducationserviceImportUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportUserArgs) SetReq(val *ImportUserReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportUserArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportUserArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportUserReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportUserArgs(%+v)", *p)

}

func (p *EducationserviceImportUserArgs) DeepEqual(ano *EducationserviceImportUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportUserArgs) Field1DeepEqual(src *ImportUserReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportUserResult struct {
	Success *ImportUserResp `thrift:"success,0,optional" frugal:"0,optional,ImportUserResp" json:"success,omitempty"`
}

func NewEducationserviceImportUserResult() *EducationserviceImportUserResult {
	return &EducationserviceImportUserResult{}
}

func (p *EducationserviceImportUserResult) InitDefault() {
}

var EducationserviceImportUserResult_Success_DEFAULT *ImportUserResp

func (p *EducationserviceImportUserResult) GetSuccess() (v *ImportUserResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportUserResp)
}

var fieldIDToName_EducationserviceImportUserResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportUserResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportUserResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportUserResult(%+v)", *p)

}

func (p *EducationserviceImportUserResult) DeepEqual(ano *EducationserviceImportUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportUserResult) Field0DeepEqual(src *ImportUserResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseApplyArgs struct {
	Req *DeleteCourseApplyReq `thrift:"req,1" frugal:"1,default,DeleteCourseApplyReq" json:"req"`
}

func NewEducationserviceDeleteCourseApplyArgs() *EducationserviceDeleteCourseApplyArgs {
	return &EducationserviceDeleteCourseApplyArgs{}
}

func (p *EducationserviceDeleteCourseApplyArgs) InitDefault() {
}

var EducationserviceDeleteCourseApplyArgs_Req_DEFAULT *DeleteCourseApplyReq

func (p *EducationserviceDeleteCourseApplyArgs) GetReq() (v *DeleteCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteCourseApplyArgs) SetReq(val *DeleteCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceDeleteCourseApplyArgs) DeepEqual(ano *EducationserviceDeleteCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseApplyArgs) Field1DeepEqual(src *DeleteCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseApplyResult struct {
	Success *DeleteCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteCourseApplyResult() *EducationserviceDeleteCourseApplyResult {
	return &EducationserviceDeleteCourseApplyResult{}
}

func (p *EducationserviceDeleteCourseApplyResult) InitDefault() {
}

var EducationserviceDeleteCourseApplyResult_Success_DEFAULT *DeleteCourseApplyResp

func (p *EducationserviceDeleteCourseApplyResult) GetSuccess() (v *DeleteCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCourseApplyResp)
}

var fieldIDToName_EducationserviceDeleteCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceDeleteCourseApplyResult) DeepEqual(ano *EducationserviceDeleteCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseApplyResult) Field0DeepEqual(src *DeleteCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceApproveCourseApplyArgs struct {
	Req *ApproveCourseApplyReq `thrift:"req,1" frugal:"1,default,ApproveCourseApplyReq" json:"req"`
}

func NewEducationserviceApproveCourseApplyArgs() *EducationserviceApproveCourseApplyArgs {
	return &EducationserviceApproveCourseApplyArgs{}
}

func (p *EducationserviceApproveCourseApplyArgs) InitDefault() {
}

var EducationserviceApproveCourseApplyArgs_Req_DEFAULT *ApproveCourseApplyReq

func (p *EducationserviceApproveCourseApplyArgs) GetReq() (v *ApproveCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceApproveCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceApproveCourseApplyArgs) SetReq(val *ApproveCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceApproveCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceApproveCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceApproveCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceApproveCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewApproveCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceApproveCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApproveCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceApproveCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceApproveCourseApplyArgs) DeepEqual(ano *EducationserviceApproveCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceApproveCourseApplyArgs) Field1DeepEqual(src *ApproveCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceApproveCourseApplyResult struct {
	Success *ApproveCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,ApproveCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceApproveCourseApplyResult() *EducationserviceApproveCourseApplyResult {
	return &EducationserviceApproveCourseApplyResult{}
}

func (p *EducationserviceApproveCourseApplyResult) InitDefault() {
}

var EducationserviceApproveCourseApplyResult_Success_DEFAULT *ApproveCourseApplyResp

func (p *EducationserviceApproveCourseApplyResult) GetSuccess() (v *ApproveCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceApproveCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceApproveCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApproveCourseApplyResp)
}

var fieldIDToName_EducationserviceApproveCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceApproveCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceApproveCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceApproveCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewApproveCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceApproveCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ApproveCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceApproveCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceApproveCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceApproveCourseApplyResult) DeepEqual(ano *EducationserviceApproveCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceApproveCourseApplyResult) Field0DeepEqual(src *ApproveCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceResetCourseApplyArgs struct {
	Req *ResetCourseApplyReq `thrift:"req,1" frugal:"1,default,ResetCourseApplyReq" json:"req"`
}

func NewEducationserviceResetCourseApplyArgs() *EducationserviceResetCourseApplyArgs {
	return &EducationserviceResetCourseApplyArgs{}
}

func (p *EducationserviceResetCourseApplyArgs) InitDefault() {
}

var EducationserviceResetCourseApplyArgs_Req_DEFAULT *ResetCourseApplyReq

func (p *EducationserviceResetCourseApplyArgs) GetReq() (v *ResetCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceResetCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceResetCourseApplyArgs) SetReq(val *ResetCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceResetCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceResetCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceResetCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceResetCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewResetCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceResetCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceResetCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceResetCourseApplyArgs) DeepEqual(ano *EducationserviceResetCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceResetCourseApplyArgs) Field1DeepEqual(src *ResetCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceResetCourseApplyResult struct {
	Success *ResetCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,ResetCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceResetCourseApplyResult() *EducationserviceResetCourseApplyResult {
	return &EducationserviceResetCourseApplyResult{}
}

func (p *EducationserviceResetCourseApplyResult) InitDefault() {
}

var EducationserviceResetCourseApplyResult_Success_DEFAULT *ResetCourseApplyResp

func (p *EducationserviceResetCourseApplyResult) GetSuccess() (v *ResetCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceResetCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceResetCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ResetCourseApplyResp)
}

var fieldIDToName_EducationserviceResetCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceResetCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceResetCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceResetCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewResetCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceResetCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceResetCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceResetCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceResetCourseApplyResult) DeepEqual(ano *EducationserviceResetCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceResetCourseApplyResult) Field0DeepEqual(src *ResetCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceFillCourseApplyArgs struct {
	Req *FillCourseApplyReq `thrift:"req,1" frugal:"1,default,FillCourseApplyReq" json:"req"`
}

func NewEducationserviceFillCourseApplyArgs() *EducationserviceFillCourseApplyArgs {
	return &EducationserviceFillCourseApplyArgs{}
}

func (p *EducationserviceFillCourseApplyArgs) InitDefault() {
}

var EducationserviceFillCourseApplyArgs_Req_DEFAULT *FillCourseApplyReq

func (p *EducationserviceFillCourseApplyArgs) GetReq() (v *FillCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceFillCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceFillCourseApplyArgs) SetReq(val *FillCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceFillCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceFillCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceFillCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceFillCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFillCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceFillCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceFillCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceFillCourseApplyArgs) DeepEqual(ano *EducationserviceFillCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceFillCourseApplyArgs) Field1DeepEqual(src *FillCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceFillCourseApplyResult struct {
	Success *FillCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,FillCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceFillCourseApplyResult() *EducationserviceFillCourseApplyResult {
	return &EducationserviceFillCourseApplyResult{}
}

func (p *EducationserviceFillCourseApplyResult) InitDefault() {
}

var EducationserviceFillCourseApplyResult_Success_DEFAULT *FillCourseApplyResp

func (p *EducationserviceFillCourseApplyResult) GetSuccess() (v *FillCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceFillCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceFillCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*FillCourseApplyResp)
}

var fieldIDToName_EducationserviceFillCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceFillCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceFillCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceFillCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewFillCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceFillCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceFillCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceFillCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceFillCourseApplyResult) DeepEqual(ano *EducationserviceFillCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceFillCourseApplyResult) Field0DeepEqual(src *FillCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportSelfCheckTableArgs struct {
	Req *ExportSelfCheckTableReq `thrift:"req,1" frugal:"1,default,ExportSelfCheckTableReq" json:"req"`
}

func NewEducationserviceExportSelfCheckTableArgs() *EducationserviceExportSelfCheckTableArgs {
	return &EducationserviceExportSelfCheckTableArgs{}
}

func (p *EducationserviceExportSelfCheckTableArgs) InitDefault() {
}

var EducationserviceExportSelfCheckTableArgs_Req_DEFAULT *ExportSelfCheckTableReq

func (p *EducationserviceExportSelfCheckTableArgs) GetReq() (v *ExportSelfCheckTableReq) {
	if !p.IsSetReq() {
		return EducationserviceExportSelfCheckTableArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportSelfCheckTableArgs) SetReq(val *ExportSelfCheckTableReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportSelfCheckTableArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportSelfCheckTableArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportSelfCheckTableArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportSelfCheckTableArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportSelfCheckTableReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportSelfCheckTableArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportSelfCheckTable_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportSelfCheckTableArgs(%+v)", *p)

}

func (p *EducationserviceExportSelfCheckTableArgs) DeepEqual(ano *EducationserviceExportSelfCheckTableArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportSelfCheckTableArgs) Field1DeepEqual(src *ExportSelfCheckTableReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportSelfCheckTableResult struct {
	Success *ExportSelfCheckTableResp `thrift:"success,0,optional" frugal:"0,optional,ExportSelfCheckTableResp" json:"success,omitempty"`
}

func NewEducationserviceExportSelfCheckTableResult() *EducationserviceExportSelfCheckTableResult {
	return &EducationserviceExportSelfCheckTableResult{}
}

func (p *EducationserviceExportSelfCheckTableResult) InitDefault() {
}

var EducationserviceExportSelfCheckTableResult_Success_DEFAULT *ExportSelfCheckTableResp

func (p *EducationserviceExportSelfCheckTableResult) GetSuccess() (v *ExportSelfCheckTableResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportSelfCheckTableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportSelfCheckTableResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportSelfCheckTableResp)
}

var fieldIDToName_EducationserviceExportSelfCheckTableResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportSelfCheckTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportSelfCheckTableResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportSelfCheckTableResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportSelfCheckTableResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportSelfCheckTableResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportSelfCheckTable_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportSelfCheckTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportSelfCheckTableResult(%+v)", *p)

}

func (p *EducationserviceExportSelfCheckTableResult) DeepEqual(ano *EducationserviceExportSelfCheckTableResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportSelfCheckTableResult) Field0DeepEqual(src *ExportSelfCheckTableResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportResponsibilityArgs struct {
	Req *ExportResponsibilityReq `thrift:"req,1" frugal:"1,default,ExportResponsibilityReq" json:"req"`
}

func NewEducationserviceExportResponsibilityArgs() *EducationserviceExportResponsibilityArgs {
	return &EducationserviceExportResponsibilityArgs{}
}

func (p *EducationserviceExportResponsibilityArgs) InitDefault() {
}

var EducationserviceExportResponsibilityArgs_Req_DEFAULT *ExportResponsibilityReq

func (p *EducationserviceExportResponsibilityArgs) GetReq() (v *ExportResponsibilityReq) {
	if !p.IsSetReq() {
		return EducationserviceExportResponsibilityArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportResponsibilityArgs) SetReq(val *ExportResponsibilityReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportResponsibilityArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportResponsibilityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportResponsibilityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportResponsibilityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportResponsibilityReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportResponsibilityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportResponsibility_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportResponsibilityArgs(%+v)", *p)

}

func (p *EducationserviceExportResponsibilityArgs) DeepEqual(ano *EducationserviceExportResponsibilityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportResponsibilityArgs) Field1DeepEqual(src *ExportResponsibilityReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportResponsibilityResult struct {
	Success *ExportResponsibilityResp `thrift:"success,0,optional" frugal:"0,optional,ExportResponsibilityResp" json:"success,omitempty"`
}

func NewEducationserviceExportResponsibilityResult() *EducationserviceExportResponsibilityResult {
	return &EducationserviceExportResponsibilityResult{}
}

func (p *EducationserviceExportResponsibilityResult) InitDefault() {
}

var EducationserviceExportResponsibilityResult_Success_DEFAULT *ExportResponsibilityResp

func (p *EducationserviceExportResponsibilityResult) GetSuccess() (v *ExportResponsibilityResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportResponsibilityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportResponsibilityResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportResponsibilityResp)
}

var fieldIDToName_EducationserviceExportResponsibilityResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportResponsibilityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportResponsibilityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportResponsibilityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportResponsibilityResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportResponsibilityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportResponsibility_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportResponsibilityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportResponsibilityResult(%+v)", *p)

}

func (p *EducationserviceExportResponsibilityResult) DeepEqual(ano *EducationserviceExportResponsibilityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportResponsibilityResult) Field0DeepEqual(src *ExportResponsibilityResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportAllSelfCheckTableArgs struct {
	Req *ExportAllSelfCheckTableReq `thrift:"req,1" frugal:"1,default,ExportAllSelfCheckTableReq" json:"req"`
}

func NewEducationserviceExportAllSelfCheckTableArgs() *EducationserviceExportAllSelfCheckTableArgs {
	return &EducationserviceExportAllSelfCheckTableArgs{}
}

func (p *EducationserviceExportAllSelfCheckTableArgs) InitDefault() {
}

var EducationserviceExportAllSelfCheckTableArgs_Req_DEFAULT *ExportAllSelfCheckTableReq

func (p *EducationserviceExportAllSelfCheckTableArgs) GetReq() (v *ExportAllSelfCheckTableReq) {
	if !p.IsSetReq() {
		return EducationserviceExportAllSelfCheckTableArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportAllSelfCheckTableArgs) SetReq(val *ExportAllSelfCheckTableReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportAllSelfCheckTableArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportAllSelfCheckTableArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportAllSelfCheckTableArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportAllSelfCheckTableArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportAllSelfCheckTableReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportAllSelfCheckTableArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportAllSelfCheckTable_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportAllSelfCheckTableArgs(%+v)", *p)

}

func (p *EducationserviceExportAllSelfCheckTableArgs) DeepEqual(ano *EducationserviceExportAllSelfCheckTableArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportAllSelfCheckTableArgs) Field1DeepEqual(src *ExportAllSelfCheckTableReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportAllSelfCheckTableResult struct {
	Success *ExportAllSelfCheckTableResp `thrift:"success,0,optional" frugal:"0,optional,ExportAllSelfCheckTableResp" json:"success,omitempty"`
}

func NewEducationserviceExportAllSelfCheckTableResult() *EducationserviceExportAllSelfCheckTableResult {
	return &EducationserviceExportAllSelfCheckTableResult{}
}

func (p *EducationserviceExportAllSelfCheckTableResult) InitDefault() {
}

var EducationserviceExportAllSelfCheckTableResult_Success_DEFAULT *ExportAllSelfCheckTableResp

func (p *EducationserviceExportAllSelfCheckTableResult) GetSuccess() (v *ExportAllSelfCheckTableResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportAllSelfCheckTableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportAllSelfCheckTableResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportAllSelfCheckTableResp)
}

var fieldIDToName_EducationserviceExportAllSelfCheckTableResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportAllSelfCheckTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportAllSelfCheckTableResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportAllSelfCheckTableResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportAllSelfCheckTableResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportAllSelfCheckTableResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportAllSelfCheckTable_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportAllSelfCheckTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportAllSelfCheckTableResult(%+v)", *p)

}

func (p *EducationserviceExportAllSelfCheckTableResult) DeepEqual(ano *EducationserviceExportAllSelfCheckTableResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportAllSelfCheckTableResult) Field0DeepEqual(src *ExportAllSelfCheckTableResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateCourseApplyArgs struct {
	Req *UpdateCourseApplyReq `thrift:"req,1" frugal:"1,default,UpdateCourseApplyReq" json:"req"`
}

func NewEducationserviceUpdateCourseApplyArgs() *EducationserviceUpdateCourseApplyArgs {
	return &EducationserviceUpdateCourseApplyArgs{}
}

func (p *EducationserviceUpdateCourseApplyArgs) InitDefault() {
}

var EducationserviceUpdateCourseApplyArgs_Req_DEFAULT *UpdateCourseApplyReq

func (p *EducationserviceUpdateCourseApplyArgs) GetReq() (v *UpdateCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateCourseApplyArgs) SetReq(val *UpdateCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceUpdateCourseApplyArgs) DeepEqual(ano *EducationserviceUpdateCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateCourseApplyArgs) Field1DeepEqual(src *UpdateCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateCourseApplyResult struct {
	Success *UpdateCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,UpdateCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateCourseApplyResult() *EducationserviceUpdateCourseApplyResult {
	return &EducationserviceUpdateCourseApplyResult{}
}

func (p *EducationserviceUpdateCourseApplyResult) InitDefault() {
}

var EducationserviceUpdateCourseApplyResult_Success_DEFAULT *UpdateCourseApplyResp

func (p *EducationserviceUpdateCourseApplyResult) GetSuccess() (v *UpdateCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCourseApplyResp)
}

var fieldIDToName_EducationserviceUpdateCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceUpdateCourseApplyResult) DeepEqual(ano *EducationserviceUpdateCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateCourseApplyResult) Field0DeepEqual(src *UpdateCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportCourseApplyArgs struct {
	Req *ExportCourseApplyReq `thrift:"req,1" frugal:"1,default,ExportCourseApplyReq" json:"req"`
}

func NewEducationserviceExportCourseApplyArgs() *EducationserviceExportCourseApplyArgs {
	return &EducationserviceExportCourseApplyArgs{}
}

func (p *EducationserviceExportCourseApplyArgs) InitDefault() {
}

var EducationserviceExportCourseApplyArgs_Req_DEFAULT *ExportCourseApplyReq

func (p *EducationserviceExportCourseApplyArgs) GetReq() (v *ExportCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceExportCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportCourseApplyArgs) SetReq(val *ExportCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceExportCourseApplyArgs) DeepEqual(ano *EducationserviceExportCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportCourseApplyArgs) Field1DeepEqual(src *ExportCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportCourseApplyResult struct {
	Success *ExportCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,ExportCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceExportCourseApplyResult() *EducationserviceExportCourseApplyResult {
	return &EducationserviceExportCourseApplyResult{}
}

func (p *EducationserviceExportCourseApplyResult) InitDefault() {
}

var EducationserviceExportCourseApplyResult_Success_DEFAULT *ExportCourseApplyResp

func (p *EducationserviceExportCourseApplyResult) GetSuccess() (v *ExportCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportCourseApplyResp)
}

var fieldIDToName_EducationserviceExportCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceExportCourseApplyResult) DeepEqual(ano *EducationserviceExportCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportCourseApplyResult) Field0DeepEqual(src *ExportCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportCourseApplySummaryArgs struct {
	Req *ExportCourseApplySummaryReq `thrift:"req,1" frugal:"1,default,ExportCourseApplySummaryReq" json:"req"`
}

func NewEducationserviceExportCourseApplySummaryArgs() *EducationserviceExportCourseApplySummaryArgs {
	return &EducationserviceExportCourseApplySummaryArgs{}
}

func (p *EducationserviceExportCourseApplySummaryArgs) InitDefault() {
}

var EducationserviceExportCourseApplySummaryArgs_Req_DEFAULT *ExportCourseApplySummaryReq

func (p *EducationserviceExportCourseApplySummaryArgs) GetReq() (v *ExportCourseApplySummaryReq) {
	if !p.IsSetReq() {
		return EducationserviceExportCourseApplySummaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportCourseApplySummaryArgs) SetReq(val *ExportCourseApplySummaryReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportCourseApplySummaryArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportCourseApplySummaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportCourseApplySummaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportCourseApplySummaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportCourseApplySummaryReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportCourseApplySummaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplySummary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportCourseApplySummaryArgs(%+v)", *p)

}

func (p *EducationserviceExportCourseApplySummaryArgs) DeepEqual(ano *EducationserviceExportCourseApplySummaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportCourseApplySummaryArgs) Field1DeepEqual(src *ExportCourseApplySummaryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportCourseApplySummaryResult struct {
	Success *ExportCourseApplySummaryResp `thrift:"success,0,optional" frugal:"0,optional,ExportCourseApplySummaryResp" json:"success,omitempty"`
}

func NewEducationserviceExportCourseApplySummaryResult() *EducationserviceExportCourseApplySummaryResult {
	return &EducationserviceExportCourseApplySummaryResult{}
}

func (p *EducationserviceExportCourseApplySummaryResult) InitDefault() {
}

var EducationserviceExportCourseApplySummaryResult_Success_DEFAULT *ExportCourseApplySummaryResp

func (p *EducationserviceExportCourseApplySummaryResult) GetSuccess() (v *ExportCourseApplySummaryResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportCourseApplySummaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportCourseApplySummaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportCourseApplySummaryResp)
}

var fieldIDToName_EducationserviceExportCourseApplySummaryResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportCourseApplySummaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportCourseApplySummaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportCourseApplySummaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportCourseApplySummaryResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportCourseApplySummaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportCourseApplySummary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportCourseApplySummaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportCourseApplySummaryResult(%+v)", *p)

}

func (p *EducationserviceExportCourseApplySummaryResult) DeepEqual(ano *EducationserviceExportCourseApplySummaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportCourseApplySummaryResult) Field0DeepEqual(src *ExportCourseApplySummaryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceOneKeyApproveCourseApplyArgs struct {
	Req *OneKeyApproveCourseApplyReq `thrift:"req,1" frugal:"1,default,OneKeyApproveCourseApplyReq" json:"req"`
}

func NewEducationserviceOneKeyApproveCourseApplyArgs() *EducationserviceOneKeyApproveCourseApplyArgs {
	return &EducationserviceOneKeyApproveCourseApplyArgs{}
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) InitDefault() {
}

var EducationserviceOneKeyApproveCourseApplyArgs_Req_DEFAULT *OneKeyApproveCourseApplyReq

func (p *EducationserviceOneKeyApproveCourseApplyArgs) GetReq() (v *OneKeyApproveCourseApplyReq) {
	if !p.IsSetReq() {
		return EducationserviceOneKeyApproveCourseApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceOneKeyApproveCourseApplyArgs) SetReq(val *OneKeyApproveCourseApplyReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceOneKeyApproveCourseApplyArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceOneKeyApproveCourseApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewOneKeyApproveCourseApplyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OneKeyApproveCourseApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceOneKeyApproveCourseApplyArgs(%+v)", *p)

}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) DeepEqual(ano *EducationserviceOneKeyApproveCourseApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceOneKeyApproveCourseApplyArgs) Field1DeepEqual(src *OneKeyApproveCourseApplyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceOneKeyApproveCourseApplyResult struct {
	Success *OneKeyApproveCourseApplyResp `thrift:"success,0,optional" frugal:"0,optional,OneKeyApproveCourseApplyResp" json:"success,omitempty"`
}

func NewEducationserviceOneKeyApproveCourseApplyResult() *EducationserviceOneKeyApproveCourseApplyResult {
	return &EducationserviceOneKeyApproveCourseApplyResult{}
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) InitDefault() {
}

var EducationserviceOneKeyApproveCourseApplyResult_Success_DEFAULT *OneKeyApproveCourseApplyResp

func (p *EducationserviceOneKeyApproveCourseApplyResult) GetSuccess() (v *OneKeyApproveCourseApplyResp) {
	if !p.IsSetSuccess() {
		return EducationserviceOneKeyApproveCourseApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceOneKeyApproveCourseApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*OneKeyApproveCourseApplyResp)
}

var fieldIDToName_EducationserviceOneKeyApproveCourseApplyResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceOneKeyApproveCourseApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewOneKeyApproveCourseApplyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OneKeyApproveCourseApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceOneKeyApproveCourseApplyResult(%+v)", *p)

}

func (p *EducationserviceOneKeyApproveCourseApplyResult) DeepEqual(ano *EducationserviceOneKeyApproveCourseApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceOneKeyApproveCourseApplyResult) Field0DeepEqual(src *OneKeyApproveCourseApplyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelectDataArgs struct {
	Req *GetSelectDataReq `thrift:"req,1" frugal:"1,default,GetSelectDataReq" json:"req"`
}

func NewEducationserviceGetSelectDataArgs() *EducationserviceGetSelectDataArgs {
	return &EducationserviceGetSelectDataArgs{}
}

func (p *EducationserviceGetSelectDataArgs) InitDefault() {
}

var EducationserviceGetSelectDataArgs_Req_DEFAULT *GetSelectDataReq

func (p *EducationserviceGetSelectDataArgs) GetReq() (v *GetSelectDataReq) {
	if !p.IsSetReq() {
		return EducationserviceGetSelectDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetSelectDataArgs) SetReq(val *GetSelectDataReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetSelectDataArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetSelectDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetSelectDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelectDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelectDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSelectDataReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetSelectDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelectData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelectDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetSelectDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelectDataArgs(%+v)", *p)

}

func (p *EducationserviceGetSelectDataArgs) DeepEqual(ano *EducationserviceGetSelectDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelectDataArgs) Field1DeepEqual(src *GetSelectDataReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelectDataResult struct {
	Success *GetSelectDataResp `thrift:"success,0,optional" frugal:"0,optional,GetSelectDataResp" json:"success,omitempty"`
}

func NewEducationserviceGetSelectDataResult() *EducationserviceGetSelectDataResult {
	return &EducationserviceGetSelectDataResult{}
}

func (p *EducationserviceGetSelectDataResult) InitDefault() {
}

var EducationserviceGetSelectDataResult_Success_DEFAULT *GetSelectDataResp

func (p *EducationserviceGetSelectDataResult) GetSuccess() (v *GetSelectDataResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetSelectDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetSelectDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSelectDataResp)
}

var fieldIDToName_EducationserviceGetSelectDataResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetSelectDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetSelectDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelectDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelectDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSelectDataResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetSelectDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelectData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelectDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetSelectDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelectDataResult(%+v)", *p)

}

func (p *EducationserviceGetSelectDataResult) DeepEqual(ano *EducationserviceGetSelectDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelectDataResult) Field0DeepEqual(src *GetSelectDataResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTeacherInfoListArgs struct {
	Req *GetTeacherInfoListReq `thrift:"req,1" frugal:"1,default,GetTeacherInfoListReq" json:"req"`
}

func NewEducationserviceGetTeacherInfoListArgs() *EducationserviceGetTeacherInfoListArgs {
	return &EducationserviceGetTeacherInfoListArgs{}
}

func (p *EducationserviceGetTeacherInfoListArgs) InitDefault() {
}

var EducationserviceGetTeacherInfoListArgs_Req_DEFAULT *GetTeacherInfoListReq

func (p *EducationserviceGetTeacherInfoListArgs) GetReq() (v *GetTeacherInfoListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetTeacherInfoListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetTeacherInfoListArgs) SetReq(val *GetTeacherInfoListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetTeacherInfoListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetTeacherInfoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetTeacherInfoListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTeacherInfoListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTeacherInfoListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetTeacherInfoListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTeacherInfoList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTeacherInfoListArgs(%+v)", *p)

}

func (p *EducationserviceGetTeacherInfoListArgs) DeepEqual(ano *EducationserviceGetTeacherInfoListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetTeacherInfoListArgs) Field1DeepEqual(src *GetTeacherInfoListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTeacherInfoListResult struct {
	Success *GetTeacherInfoListResp `thrift:"success,0,optional" frugal:"0,optional,GetTeacherInfoListResp" json:"success,omitempty"`
}

func NewEducationserviceGetTeacherInfoListResult() *EducationserviceGetTeacherInfoListResult {
	return &EducationserviceGetTeacherInfoListResult{}
}

func (p *EducationserviceGetTeacherInfoListResult) InitDefault() {
}

var EducationserviceGetTeacherInfoListResult_Success_DEFAULT *GetTeacherInfoListResp

func (p *EducationserviceGetTeacherInfoListResult) GetSuccess() (v *GetTeacherInfoListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetTeacherInfoListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetTeacherInfoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTeacherInfoListResp)
}

var fieldIDToName_EducationserviceGetTeacherInfoListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetTeacherInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetTeacherInfoListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTeacherInfoListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTeacherInfoListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetTeacherInfoListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTeacherInfoList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetTeacherInfoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTeacherInfoListResult(%+v)", *p)

}

func (p *EducationserviceGetTeacherInfoListResult) DeepEqual(ano *EducationserviceGetTeacherInfoListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetTeacherInfoListResult) Field0DeepEqual(src *GetTeacherInfoListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportTeacherInfoArgs struct {
	Req *ImportTeacherInfoReq `thrift:"req,1" frugal:"1,default,ImportTeacherInfoReq" json:"req"`
}

func NewEducationserviceImportTeacherInfoArgs() *EducationserviceImportTeacherInfoArgs {
	return &EducationserviceImportTeacherInfoArgs{}
}

func (p *EducationserviceImportTeacherInfoArgs) InitDefault() {
}

var EducationserviceImportTeacherInfoArgs_Req_DEFAULT *ImportTeacherInfoReq

func (p *EducationserviceImportTeacherInfoArgs) GetReq() (v *ImportTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceImportTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportTeacherInfoArgs) SetReq(val *ImportTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceImportTeacherInfoArgs) DeepEqual(ano *EducationserviceImportTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportTeacherInfoArgs) Field1DeepEqual(src *ImportTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportTeacherInfoResult struct {
	Success *ImportTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,ImportTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceImportTeacherInfoResult() *EducationserviceImportTeacherInfoResult {
	return &EducationserviceImportTeacherInfoResult{}
}

func (p *EducationserviceImportTeacherInfoResult) InitDefault() {
}

var EducationserviceImportTeacherInfoResult_Success_DEFAULT *ImportTeacherInfoResp

func (p *EducationserviceImportTeacherInfoResult) GetSuccess() (v *ImportTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportTeacherInfoResp)
}

var fieldIDToName_EducationserviceImportTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceImportTeacherInfoResult) DeepEqual(ano *EducationserviceImportTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportTeacherInfoResult) Field0DeepEqual(src *ImportTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTeacherInfoArgs struct {
	Req *UpdateTeacherInfoReq `thrift:"req,1" frugal:"1,default,UpdateTeacherInfoReq" json:"req"`
}

func NewEducationserviceUpdateTeacherInfoArgs() *EducationserviceUpdateTeacherInfoArgs {
	return &EducationserviceUpdateTeacherInfoArgs{}
}

func (p *EducationserviceUpdateTeacherInfoArgs) InitDefault() {
}

var EducationserviceUpdateTeacherInfoArgs_Req_DEFAULT *UpdateTeacherInfoReq

func (p *EducationserviceUpdateTeacherInfoArgs) GetReq() (v *UpdateTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateTeacherInfoArgs) SetReq(val *UpdateTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceUpdateTeacherInfoArgs) DeepEqual(ano *EducationserviceUpdateTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTeacherInfoArgs) Field1DeepEqual(src *UpdateTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTeacherInfoResult struct {
	Success *UpdateTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,UpdateTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateTeacherInfoResult() *EducationserviceUpdateTeacherInfoResult {
	return &EducationserviceUpdateTeacherInfoResult{}
}

func (p *EducationserviceUpdateTeacherInfoResult) InitDefault() {
}

var EducationserviceUpdateTeacherInfoResult_Success_DEFAULT *UpdateTeacherInfoResp

func (p *EducationserviceUpdateTeacherInfoResult) GetSuccess() (v *UpdateTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateTeacherInfoResp)
}

var fieldIDToName_EducationserviceUpdateTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceUpdateTeacherInfoResult) DeepEqual(ano *EducationserviceUpdateTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTeacherInfoResult) Field0DeepEqual(src *UpdateTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetTeacherInfoStatusArgs struct {
	Req *SetTeacherInfoStatusReq `thrift:"req,1" frugal:"1,default,SetTeacherInfoStatusReq" json:"req"`
}

func NewEducationserviceSetTeacherInfoStatusArgs() *EducationserviceSetTeacherInfoStatusArgs {
	return &EducationserviceSetTeacherInfoStatusArgs{}
}

func (p *EducationserviceSetTeacherInfoStatusArgs) InitDefault() {
}

var EducationserviceSetTeacherInfoStatusArgs_Req_DEFAULT *SetTeacherInfoStatusReq

func (p *EducationserviceSetTeacherInfoStatusArgs) GetReq() (v *SetTeacherInfoStatusReq) {
	if !p.IsSetReq() {
		return EducationserviceSetTeacherInfoStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSetTeacherInfoStatusArgs) SetReq(val *SetTeacherInfoStatusReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSetTeacherInfoStatusArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSetTeacherInfoStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSetTeacherInfoStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetTeacherInfoStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetTeacherInfoStatusReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSetTeacherInfoStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetTeacherInfoStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetTeacherInfoStatusArgs(%+v)", *p)

}

func (p *EducationserviceSetTeacherInfoStatusArgs) DeepEqual(ano *EducationserviceSetTeacherInfoStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSetTeacherInfoStatusArgs) Field1DeepEqual(src *SetTeacherInfoStatusReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetTeacherInfoStatusResult struct {
	Success *SetTeacherInfoStatusResp `thrift:"success,0,optional" frugal:"0,optional,SetTeacherInfoStatusResp" json:"success,omitempty"`
}

func NewEducationserviceSetTeacherInfoStatusResult() *EducationserviceSetTeacherInfoStatusResult {
	return &EducationserviceSetTeacherInfoStatusResult{}
}

func (p *EducationserviceSetTeacherInfoStatusResult) InitDefault() {
}

var EducationserviceSetTeacherInfoStatusResult_Success_DEFAULT *SetTeacherInfoStatusResp

func (p *EducationserviceSetTeacherInfoStatusResult) GetSuccess() (v *SetTeacherInfoStatusResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSetTeacherInfoStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSetTeacherInfoStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetTeacherInfoStatusResp)
}

var fieldIDToName_EducationserviceSetTeacherInfoStatusResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSetTeacherInfoStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSetTeacherInfoStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetTeacherInfoStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetTeacherInfoStatusResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSetTeacherInfoStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetTeacherInfoStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSetTeacherInfoStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetTeacherInfoStatusResult(%+v)", *p)

}

func (p *EducationserviceSetTeacherInfoStatusResult) DeepEqual(ano *EducationserviceSetTeacherInfoStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSetTeacherInfoStatusResult) Field0DeepEqual(src *SetTeacherInfoStatusResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceOderTeacherInfoArgs struct {
	Req *OrderTeacherInfoReq `thrift:"req,1" frugal:"1,default,OrderTeacherInfoReq" json:"req"`
}

func NewEducationserviceOderTeacherInfoArgs() *EducationserviceOderTeacherInfoArgs {
	return &EducationserviceOderTeacherInfoArgs{}
}

func (p *EducationserviceOderTeacherInfoArgs) InitDefault() {
}

var EducationserviceOderTeacherInfoArgs_Req_DEFAULT *OrderTeacherInfoReq

func (p *EducationserviceOderTeacherInfoArgs) GetReq() (v *OrderTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceOderTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceOderTeacherInfoArgs) SetReq(val *OrderTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceOderTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceOderTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceOderTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceOderTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewOrderTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceOderTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OderTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceOderTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceOderTeacherInfoArgs) DeepEqual(ano *EducationserviceOderTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceOderTeacherInfoArgs) Field1DeepEqual(src *OrderTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceOderTeacherInfoResult struct {
	Success *OrderTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,OrderTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceOderTeacherInfoResult() *EducationserviceOderTeacherInfoResult {
	return &EducationserviceOderTeacherInfoResult{}
}

func (p *EducationserviceOderTeacherInfoResult) InitDefault() {
}

var EducationserviceOderTeacherInfoResult_Success_DEFAULT *OrderTeacherInfoResp

func (p *EducationserviceOderTeacherInfoResult) GetSuccess() (v *OrderTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceOderTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceOderTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrderTeacherInfoResp)
}

var fieldIDToName_EducationserviceOderTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceOderTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceOderTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceOderTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewOrderTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceOderTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OderTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceOderTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceOderTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceOderTeacherInfoResult) DeepEqual(ano *EducationserviceOderTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceOderTeacherInfoResult) Field0DeepEqual(src *OrderTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateMenuArgs struct {
	Req *UpdateMenuReq `thrift:"req,1" frugal:"1,default,UpdateMenuReq" json:"req"`
}

func NewEducationserviceUpdateMenuArgs() *EducationserviceUpdateMenuArgs {
	return &EducationserviceUpdateMenuArgs{}
}

func (p *EducationserviceUpdateMenuArgs) InitDefault() {
}

var EducationserviceUpdateMenuArgs_Req_DEFAULT *UpdateMenuReq

func (p *EducationserviceUpdateMenuArgs) GetReq() (v *UpdateMenuReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateMenuArgs) SetReq(val *UpdateMenuReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateMenuArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateMenuArgs(%+v)", *p)

}

func (p *EducationserviceUpdateMenuArgs) DeepEqual(ano *EducationserviceUpdateMenuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateMenuArgs) Field1DeepEqual(src *UpdateMenuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateMenuResult struct {
	Success *UpdateMenuResp `thrift:"success,0,optional" frugal:"0,optional,UpdateMenuResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateMenuResult() *EducationserviceUpdateMenuResult {
	return &EducationserviceUpdateMenuResult{}
}

func (p *EducationserviceUpdateMenuResult) InitDefault() {
}

var EducationserviceUpdateMenuResult_Success_DEFAULT *UpdateMenuResp

func (p *EducationserviceUpdateMenuResult) GetSuccess() (v *UpdateMenuResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateMenuResp)
}

var fieldIDToName_EducationserviceUpdateMenuResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateMenuResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateMenuResult(%+v)", *p)

}

func (p *EducationserviceUpdateMenuResult) DeepEqual(ano *EducationserviceUpdateMenuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateMenuResult) Field0DeepEqual(src *UpdateMenuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteMenuArgs struct {
	Req *DeleteMenuReq `thrift:"req,1" frugal:"1,default,DeleteMenuReq" json:"req"`
}

func NewEducationserviceDeleteMenuArgs() *EducationserviceDeleteMenuArgs {
	return &EducationserviceDeleteMenuArgs{}
}

func (p *EducationserviceDeleteMenuArgs) InitDefault() {
}

var EducationserviceDeleteMenuArgs_Req_DEFAULT *DeleteMenuReq

func (p *EducationserviceDeleteMenuArgs) GetReq() (v *DeleteMenuReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteMenuArgs) SetReq(val *DeleteMenuReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteMenuArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteMenuArgs(%+v)", *p)

}

func (p *EducationserviceDeleteMenuArgs) DeepEqual(ano *EducationserviceDeleteMenuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteMenuArgs) Field1DeepEqual(src *DeleteMenuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteMenuResult struct {
	Success *DeleteMenuResp `thrift:"success,0,optional" frugal:"0,optional,DeleteMenuResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteMenuResult() *EducationserviceDeleteMenuResult {
	return &EducationserviceDeleteMenuResult{}
}

func (p *EducationserviceDeleteMenuResult) InitDefault() {
}

var EducationserviceDeleteMenuResult_Success_DEFAULT *DeleteMenuResp

func (p *EducationserviceDeleteMenuResult) GetSuccess() (v *DeleteMenuResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteMenuResp)
}

var fieldIDToName_EducationserviceDeleteMenuResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteMenuResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteMenuResult(%+v)", *p)

}

func (p *EducationserviceDeleteMenuResult) DeepEqual(ano *EducationserviceDeleteMenuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteMenuResult) Field0DeepEqual(src *DeleteMenuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTokenArgs struct {
	Req *GetTokenReq `thrift:"req,1" frugal:"1,default,GetTokenReq" json:"req"`
}

func NewEducationserviceGetTokenArgs() *EducationserviceGetTokenArgs {
	return &EducationserviceGetTokenArgs{}
}

func (p *EducationserviceGetTokenArgs) InitDefault() {
}

var EducationserviceGetTokenArgs_Req_DEFAULT *GetTokenReq

func (p *EducationserviceGetTokenArgs) GetReq() (v *GetTokenReq) {
	if !p.IsSetReq() {
		return EducationserviceGetTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetTokenArgs) SetReq(val *GetTokenReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetTokenArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetTokenArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTokenReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTokenArgs(%+v)", *p)

}

func (p *EducationserviceGetTokenArgs) DeepEqual(ano *EducationserviceGetTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetTokenArgs) Field1DeepEqual(src *GetTokenReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTokenResult struct {
	Success *GetTokenResp `thrift:"success,0,optional" frugal:"0,optional,GetTokenResp" json:"success,omitempty"`
}

func NewEducationserviceGetTokenResult() *EducationserviceGetTokenResult {
	return &EducationserviceGetTokenResult{}
}

func (p *EducationserviceGetTokenResult) InitDefault() {
}

var EducationserviceGetTokenResult_Success_DEFAULT *GetTokenResp

func (p *EducationserviceGetTokenResult) GetSuccess() (v *GetTokenResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTokenResp)
}

var fieldIDToName_EducationserviceGetTokenResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetTokenResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTokenResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTokenResult(%+v)", *p)

}

func (p *EducationserviceGetTokenResult) DeepEqual(ano *EducationserviceGetTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetTokenResult) Field0DeepEqual(src *GetTokenResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateRoleArgs struct {
	Req *UpdateRoleReq `thrift:"req,1" frugal:"1,default,UpdateRoleReq" json:"req"`
}

func NewEducationserviceUpdateRoleArgs() *EducationserviceUpdateRoleArgs {
	return &EducationserviceUpdateRoleArgs{}
}

func (p *EducationserviceUpdateRoleArgs) InitDefault() {
}

var EducationserviceUpdateRoleArgs_Req_DEFAULT *UpdateRoleReq

func (p *EducationserviceUpdateRoleArgs) GetReq() (v *UpdateRoleReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateRoleArgs) SetReq(val *UpdateRoleReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateRoleArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateRoleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateRoleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateRoleArgs(%+v)", *p)

}

func (p *EducationserviceUpdateRoleArgs) DeepEqual(ano *EducationserviceUpdateRoleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateRoleArgs) Field1DeepEqual(src *UpdateRoleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateRoleResult struct {
	Success *UpdateRoleResp `thrift:"success,0,optional" frugal:"0,optional,UpdateRoleResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateRoleResult() *EducationserviceUpdateRoleResult {
	return &EducationserviceUpdateRoleResult{}
}

func (p *EducationserviceUpdateRoleResult) InitDefault() {
}

var EducationserviceUpdateRoleResult_Success_DEFAULT *UpdateRoleResp

func (p *EducationserviceUpdateRoleResult) GetSuccess() (v *UpdateRoleResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateRoleResp)
}

var fieldIDToName_EducationserviceUpdateRoleResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateRoleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateRoleResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateRoleResult(%+v)", *p)

}

func (p *EducationserviceUpdateRoleResult) DeepEqual(ano *EducationserviceUpdateRoleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateRoleResult) Field0DeepEqual(src *UpdateRoleResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRoleStatusArgs struct {
	Req *SetRoleStatusReq `thrift:"req,1" frugal:"1,default,SetRoleStatusReq" json:"req"`
}

func NewEducationserviceSetRoleStatusArgs() *EducationserviceSetRoleStatusArgs {
	return &EducationserviceSetRoleStatusArgs{}
}

func (p *EducationserviceSetRoleStatusArgs) InitDefault() {
}

var EducationserviceSetRoleStatusArgs_Req_DEFAULT *SetRoleStatusReq

func (p *EducationserviceSetRoleStatusArgs) GetReq() (v *SetRoleStatusReq) {
	if !p.IsSetReq() {
		return EducationserviceSetRoleStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSetRoleStatusArgs) SetReq(val *SetRoleStatusReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSetRoleStatusArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSetRoleStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSetRoleStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRoleStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetRoleStatusReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSetRoleStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRoleStatusArgs(%+v)", *p)

}

func (p *EducationserviceSetRoleStatusArgs) DeepEqual(ano *EducationserviceSetRoleStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSetRoleStatusArgs) Field1DeepEqual(src *SetRoleStatusReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSetRoleStatusResult struct {
	Success *SetRoleStatusResp `thrift:"success,0,optional" frugal:"0,optional,SetRoleStatusResp" json:"success,omitempty"`
}

func NewEducationserviceSetRoleStatusResult() *EducationserviceSetRoleStatusResult {
	return &EducationserviceSetRoleStatusResult{}
}

func (p *EducationserviceSetRoleStatusResult) InitDefault() {
}

var EducationserviceSetRoleStatusResult_Success_DEFAULT *SetRoleStatusResp

func (p *EducationserviceSetRoleStatusResult) GetSuccess() (v *SetRoleStatusResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSetRoleStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSetRoleStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetRoleStatusResp)
}

var fieldIDToName_EducationserviceSetRoleStatusResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSetRoleStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSetRoleStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSetRoleStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetRoleStatusResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSetRoleStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetRoleStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSetRoleStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSetRoleStatusResult(%+v)", *p)

}

func (p *EducationserviceSetRoleStatusResult) DeepEqual(ano *EducationserviceSetRoleStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSetRoleStatusResult) Field0DeepEqual(src *SetRoleStatusResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteRoleArgs struct {
	Req *DeleteRoleReq `thrift:"req,1" frugal:"1,default,DeleteRoleReq" json:"req"`
}

func NewEducationserviceDeleteRoleArgs() *EducationserviceDeleteRoleArgs {
	return &EducationserviceDeleteRoleArgs{}
}

func (p *EducationserviceDeleteRoleArgs) InitDefault() {
}

var EducationserviceDeleteRoleArgs_Req_DEFAULT *DeleteRoleReq

func (p *EducationserviceDeleteRoleArgs) GetReq() (v *DeleteRoleReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteRoleArgs) SetReq(val *DeleteRoleReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteRoleArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteRoleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteRoleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteRoleArgs(%+v)", *p)

}

func (p *EducationserviceDeleteRoleArgs) DeepEqual(ano *EducationserviceDeleteRoleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteRoleArgs) Field1DeepEqual(src *DeleteRoleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteRoleResult struct {
	Success *DeleteRoleResp `thrift:"success,0,optional" frugal:"0,optional,DeleteRoleResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteRoleResult() *EducationserviceDeleteRoleResult {
	return &EducationserviceDeleteRoleResult{}
}

func (p *EducationserviceDeleteRoleResult) InitDefault() {
}

var EducationserviceDeleteRoleResult_Success_DEFAULT *DeleteRoleResp

func (p *EducationserviceDeleteRoleResult) GetSuccess() (v *DeleteRoleResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteRoleResp)
}

var fieldIDToName_EducationserviceDeleteRoleResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteRoleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteRoleResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteRoleResult(%+v)", *p)

}

func (p *EducationserviceDeleteRoleResult) DeepEqual(ano *EducationserviceDeleteRoleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteRoleResult) Field0DeepEqual(src *DeleteRoleResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteOfficeArgs struct {
	Req *DeleteOfficeReq `thrift:"req,1" frugal:"1,default,DeleteOfficeReq" json:"req"`
}

func NewEducationserviceDeleteOfficeArgs() *EducationserviceDeleteOfficeArgs {
	return &EducationserviceDeleteOfficeArgs{}
}

func (p *EducationserviceDeleteOfficeArgs) InitDefault() {
}

var EducationserviceDeleteOfficeArgs_Req_DEFAULT *DeleteOfficeReq

func (p *EducationserviceDeleteOfficeArgs) GetReq() (v *DeleteOfficeReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteOfficeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteOfficeArgs) SetReq(val *DeleteOfficeReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteOfficeArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteOfficeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteOfficeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteOfficeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteOfficeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteOfficeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteOffice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteOfficeArgs(%+v)", *p)

}

func (p *EducationserviceDeleteOfficeArgs) DeepEqual(ano *EducationserviceDeleteOfficeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteOfficeArgs) Field1DeepEqual(src *DeleteOfficeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteOfficeResult struct {
	Success *DeleteOfficeResp `thrift:"success,0,optional" frugal:"0,optional,DeleteOfficeResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteOfficeResult() *EducationserviceDeleteOfficeResult {
	return &EducationserviceDeleteOfficeResult{}
}

func (p *EducationserviceDeleteOfficeResult) InitDefault() {
}

var EducationserviceDeleteOfficeResult_Success_DEFAULT *DeleteOfficeResp

func (p *EducationserviceDeleteOfficeResult) GetSuccess() (v *DeleteOfficeResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteOfficeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteOfficeResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteOfficeResp)
}

var fieldIDToName_EducationserviceDeleteOfficeResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteOfficeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteOfficeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteOfficeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteOfficeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteOfficeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteOffice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteOfficeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteOfficeResult(%+v)", *p)

}

func (p *EducationserviceDeleteOfficeResult) DeepEqual(ano *EducationserviceDeleteOfficeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteOfficeResult) Field0DeepEqual(src *DeleteOfficeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateOfficeArgs struct {
	Req *UpdateOfficeReq `thrift:"req,1" frugal:"1,default,UpdateOfficeReq" json:"req"`
}

func NewEducationserviceUpdateOfficeArgs() *EducationserviceUpdateOfficeArgs {
	return &EducationserviceUpdateOfficeArgs{}
}

func (p *EducationserviceUpdateOfficeArgs) InitDefault() {
}

var EducationserviceUpdateOfficeArgs_Req_DEFAULT *UpdateOfficeReq

func (p *EducationserviceUpdateOfficeArgs) GetReq() (v *UpdateOfficeReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateOfficeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateOfficeArgs) SetReq(val *UpdateOfficeReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateOfficeArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateOfficeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateOfficeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateOfficeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateOfficeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateOfficeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateOffice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateOfficeArgs(%+v)", *p)

}

func (p *EducationserviceUpdateOfficeArgs) DeepEqual(ano *EducationserviceUpdateOfficeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateOfficeArgs) Field1DeepEqual(src *UpdateOfficeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateOfficeResult struct {
	Success *UpdateOfficeResp `thrift:"success,0,optional" frugal:"0,optional,UpdateOfficeResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateOfficeResult() *EducationserviceUpdateOfficeResult {
	return &EducationserviceUpdateOfficeResult{}
}

func (p *EducationserviceUpdateOfficeResult) InitDefault() {
}

var EducationserviceUpdateOfficeResult_Success_DEFAULT *UpdateOfficeResp

func (p *EducationserviceUpdateOfficeResult) GetSuccess() (v *UpdateOfficeResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateOfficeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateOfficeResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOfficeResp)
}

var fieldIDToName_EducationserviceUpdateOfficeResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateOfficeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateOfficeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateOfficeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateOfficeResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateOfficeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateOffice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateOfficeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateOfficeResult(%+v)", *p)

}

func (p *EducationserviceUpdateOfficeResult) DeepEqual(ano *EducationserviceUpdateOfficeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateOfficeResult) Field0DeepEqual(src *UpdateOfficeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateUserArgs struct {
	Req *UpdateUserReq `thrift:"req,1" frugal:"1,default,UpdateUserReq" json:"req"`
}

func NewEducationserviceUpdateUserArgs() *EducationserviceUpdateUserArgs {
	return &EducationserviceUpdateUserArgs{}
}

func (p *EducationserviceUpdateUserArgs) InitDefault() {
}

var EducationserviceUpdateUserArgs_Req_DEFAULT *UpdateUserReq

func (p *EducationserviceUpdateUserArgs) GetReq() (v *UpdateUserReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateUserArgs) SetReq(val *UpdateUserReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateUserArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateUserReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateUserArgs(%+v)", *p)

}

func (p *EducationserviceUpdateUserArgs) DeepEqual(ano *EducationserviceUpdateUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateUserArgs) Field1DeepEqual(src *UpdateUserReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateUserResult struct {
	Success *UpdateUserResp `thrift:"success,0,optional" frugal:"0,optional,UpdateUserResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateUserResult() *EducationserviceUpdateUserResult {
	return &EducationserviceUpdateUserResult{}
}

func (p *EducationserviceUpdateUserResult) InitDefault() {
}

var EducationserviceUpdateUserResult_Success_DEFAULT *UpdateUserResp

func (p *EducationserviceUpdateUserResult) GetSuccess() (v *UpdateUserResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserResp)
}

var fieldIDToName_EducationserviceUpdateUserResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateUserResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateUserResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateUserResult(%+v)", *p)

}

func (p *EducationserviceUpdateUserResult) DeepEqual(ano *EducationserviceUpdateUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateUserResult) Field0DeepEqual(src *UpdateUserResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceResetPasswordArgs struct {
	Req *ResetPasswordReq `thrift:"req,1" frugal:"1,default,ResetPasswordReq" json:"req"`
}

func NewEducationserviceResetPasswordArgs() *EducationserviceResetPasswordArgs {
	return &EducationserviceResetPasswordArgs{}
}

func (p *EducationserviceResetPasswordArgs) InitDefault() {
}

var EducationserviceResetPasswordArgs_Req_DEFAULT *ResetPasswordReq

func (p *EducationserviceResetPasswordArgs) GetReq() (v *ResetPasswordReq) {
	if !p.IsSetReq() {
		return EducationserviceResetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceResetPasswordArgs) SetReq(val *ResetPasswordReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceResetPasswordArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceResetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceResetPasswordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceResetPasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceResetPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewResetPasswordReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceResetPasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetPassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceResetPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceResetPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceResetPasswordArgs(%+v)", *p)

}

func (p *EducationserviceResetPasswordArgs) DeepEqual(ano *EducationserviceResetPasswordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceResetPasswordArgs) Field1DeepEqual(src *ResetPasswordReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceResetPasswordResult struct {
	Success *ResetPasswordResp `thrift:"success,0,optional" frugal:"0,optional,ResetPasswordResp" json:"success,omitempty"`
}

func NewEducationserviceResetPasswordResult() *EducationserviceResetPasswordResult {
	return &EducationserviceResetPasswordResult{}
}

func (p *EducationserviceResetPasswordResult) InitDefault() {
}

var EducationserviceResetPasswordResult_Success_DEFAULT *ResetPasswordResp

func (p *EducationserviceResetPasswordResult) GetSuccess() (v *ResetPasswordResp) {
	if !p.IsSetSuccess() {
		return EducationserviceResetPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceResetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*ResetPasswordResp)
}

var fieldIDToName_EducationserviceResetPasswordResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceResetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceResetPasswordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceResetPasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceResetPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewResetPasswordResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceResetPasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetPassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceResetPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceResetPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceResetPasswordResult(%+v)", *p)

}

func (p *EducationserviceResetPasswordResult) DeepEqual(ano *EducationserviceResetPasswordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceResetPasswordResult) Field0DeepEqual(src *ResetPasswordResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteTeacherInfoArgs struct {
	Req *DeleteTeacherInfoReq `thrift:"req,1" frugal:"1,default,DeleteTeacherInfoReq" json:"req"`
}

func NewEducationserviceDeleteTeacherInfoArgs() *EducationserviceDeleteTeacherInfoArgs {
	return &EducationserviceDeleteTeacherInfoArgs{}
}

func (p *EducationserviceDeleteTeacherInfoArgs) InitDefault() {
}

var EducationserviceDeleteTeacherInfoArgs_Req_DEFAULT *DeleteTeacherInfoReq

func (p *EducationserviceDeleteTeacherInfoArgs) GetReq() (v *DeleteTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteTeacherInfoArgs) SetReq(val *DeleteTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceDeleteTeacherInfoArgs) DeepEqual(ano *EducationserviceDeleteTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteTeacherInfoArgs) Field1DeepEqual(src *DeleteTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteTeacherInfoResult struct {
	Success *DeleteTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,DeleteTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteTeacherInfoResult() *EducationserviceDeleteTeacherInfoResult {
	return &EducationserviceDeleteTeacherInfoResult{}
}

func (p *EducationserviceDeleteTeacherInfoResult) InitDefault() {
}

var EducationserviceDeleteTeacherInfoResult_Success_DEFAULT *DeleteTeacherInfoResp

func (p *EducationserviceDeleteTeacherInfoResult) GetSuccess() (v *DeleteTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteTeacherInfoResp)
}

var fieldIDToName_EducationserviceDeleteTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceDeleteTeacherInfoResult) DeepEqual(ano *EducationserviceDeleteTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteTeacherInfoResult) Field0DeepEqual(src *DeleteTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateTeacherInfoArgs struct {
	Req *CreateTeacherInfoReq `thrift:"req,1" frugal:"1,default,CreateTeacherInfoReq" json:"req"`
}

func NewEducationserviceCreateTeacherInfoArgs() *EducationserviceCreateTeacherInfoArgs {
	return &EducationserviceCreateTeacherInfoArgs{}
}

func (p *EducationserviceCreateTeacherInfoArgs) InitDefault() {
}

var EducationserviceCreateTeacherInfoArgs_Req_DEFAULT *CreateTeacherInfoReq

func (p *EducationserviceCreateTeacherInfoArgs) GetReq() (v *CreateTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateTeacherInfoArgs) SetReq(val *CreateTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceCreateTeacherInfoArgs) DeepEqual(ano *EducationserviceCreateTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateTeacherInfoArgs) Field1DeepEqual(src *CreateTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateTeacherInfoResult struct {
	Success *CreateTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,CreateTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceCreateTeacherInfoResult() *EducationserviceCreateTeacherInfoResult {
	return &EducationserviceCreateTeacherInfoResult{}
}

func (p *EducationserviceCreateTeacherInfoResult) InitDefault() {
}

var EducationserviceCreateTeacherInfoResult_Success_DEFAULT *CreateTeacherInfoResp

func (p *EducationserviceCreateTeacherInfoResult) GetSuccess() (v *CreateTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTeacherInfoResp)
}

var fieldIDToName_EducationserviceCreateTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceCreateTeacherInfoResult) DeepEqual(ano *EducationserviceCreateTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateTeacherInfoResult) Field0DeepEqual(src *CreateTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportTeacherInfoArgs struct {
	Req *ExportTeacherInfoReq `thrift:"req,1" frugal:"1,default,ExportTeacherInfoReq" json:"req"`
}

func NewEducationserviceExportTeacherInfoArgs() *EducationserviceExportTeacherInfoArgs {
	return &EducationserviceExportTeacherInfoArgs{}
}

func (p *EducationserviceExportTeacherInfoArgs) InitDefault() {
}

var EducationserviceExportTeacherInfoArgs_Req_DEFAULT *ExportTeacherInfoReq

func (p *EducationserviceExportTeacherInfoArgs) GetReq() (v *ExportTeacherInfoReq) {
	if !p.IsSetReq() {
		return EducationserviceExportTeacherInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportTeacherInfoArgs) SetReq(val *ExportTeacherInfoReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportTeacherInfoArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportTeacherInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportTeacherInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportTeacherInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportTeacherInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportTeacherInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportTeacherInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportTeacherInfoArgs(%+v)", *p)

}

func (p *EducationserviceExportTeacherInfoArgs) DeepEqual(ano *EducationserviceExportTeacherInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportTeacherInfoArgs) Field1DeepEqual(src *ExportTeacherInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportTeacherInfoResult struct {
	Success *ExportTeacherInfoResp `thrift:"success,0,optional" frugal:"0,optional,ExportTeacherInfoResp" json:"success,omitempty"`
}

func NewEducationserviceExportTeacherInfoResult() *EducationserviceExportTeacherInfoResult {
	return &EducationserviceExportTeacherInfoResult{}
}

func (p *EducationserviceExportTeacherInfoResult) InitDefault() {
}

var EducationserviceExportTeacherInfoResult_Success_DEFAULT *ExportTeacherInfoResp

func (p *EducationserviceExportTeacherInfoResult) GetSuccess() (v *ExportTeacherInfoResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportTeacherInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportTeacherInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportTeacherInfoResp)
}

var fieldIDToName_EducationserviceExportTeacherInfoResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportTeacherInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportTeacherInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportTeacherInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportTeacherInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportTeacherInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportTeacherInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportTeacherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportTeacherInfoResult(%+v)", *p)

}

func (p *EducationserviceExportTeacherInfoResult) DeepEqual(ano *EducationserviceExportTeacherInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportTeacherInfoResult) Field0DeepEqual(src *ExportTeacherInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseListArgs struct {
	Req *GetCourseListReq `thrift:"req,1" frugal:"1,default,GetCourseListReq" json:"req"`
}

func NewEducationserviceGetCourseListArgs() *EducationserviceGetCourseListArgs {
	return &EducationserviceGetCourseListArgs{}
}

func (p *EducationserviceGetCourseListArgs) InitDefault() {
}

var EducationserviceGetCourseListArgs_Req_DEFAULT *GetCourseListReq

func (p *EducationserviceGetCourseListArgs) GetReq() (v *GetCourseListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetCourseListArgs) SetReq(val *GetCourseListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetCourseListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetCourseListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCourseListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetCourseListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseListArgs(%+v)", *p)

}

func (p *EducationserviceGetCourseListArgs) DeepEqual(ano *EducationserviceGetCourseListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseListArgs) Field1DeepEqual(src *GetCourseListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseListResult struct {
	Success *GetCourseListResp `thrift:"success,0,optional" frugal:"0,optional,GetCourseListResp" json:"success,omitempty"`
}

func NewEducationserviceGetCourseListResult() *EducationserviceGetCourseListResult {
	return &EducationserviceGetCourseListResult{}
}

func (p *EducationserviceGetCourseListResult) InitDefault() {
}

var EducationserviceGetCourseListResult_Success_DEFAULT *GetCourseListResp

func (p *EducationserviceGetCourseListResult) GetSuccess() (v *GetCourseListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCourseListResp)
}

var fieldIDToName_EducationserviceGetCourseListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetCourseListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCourseListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetCourseListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseListResult(%+v)", *p)

}

func (p *EducationserviceGetCourseListResult) DeepEqual(ano *EducationserviceGetCourseListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseListResult) Field0DeepEqual(src *GetCourseListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseArgs struct {
	Req *DeleteCourseReq `thrift:"req,1" frugal:"1,default,DeleteCourseReq" json:"req"`
}

func NewEducationserviceDeleteCourseArgs() *EducationserviceDeleteCourseArgs {
	return &EducationserviceDeleteCourseArgs{}
}

func (p *EducationserviceDeleteCourseArgs) InitDefault() {
}

var EducationserviceDeleteCourseArgs_Req_DEFAULT *DeleteCourseReq

func (p *EducationserviceDeleteCourseArgs) GetReq() (v *DeleteCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteCourseArgs) SetReq(val *DeleteCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseArgs(%+v)", *p)

}

func (p *EducationserviceDeleteCourseArgs) DeepEqual(ano *EducationserviceDeleteCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseArgs) Field1DeepEqual(src *DeleteCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseResult struct {
	Success *DeleteCourseResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCourseResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteCourseResult() *EducationserviceDeleteCourseResult {
	return &EducationserviceDeleteCourseResult{}
}

func (p *EducationserviceDeleteCourseResult) InitDefault() {
}

var EducationserviceDeleteCourseResult_Success_DEFAULT *DeleteCourseResp

func (p *EducationserviceDeleteCourseResult) GetSuccess() (v *DeleteCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCourseResp)
}

var fieldIDToName_EducationserviceDeleteCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseResult(%+v)", *p)

}

func (p *EducationserviceDeleteCourseResult) DeepEqual(ano *EducationserviceDeleteCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseResult) Field0DeepEqual(src *DeleteCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportCourseArgs struct {
	Req *ImportCourseReq `thrift:"req,1" frugal:"1,default,ImportCourseReq" json:"req"`
}

func NewEducationserviceImportCourseArgs() *EducationserviceImportCourseArgs {
	return &EducationserviceImportCourseArgs{}
}

func (p *EducationserviceImportCourseArgs) InitDefault() {
}

var EducationserviceImportCourseArgs_Req_DEFAULT *ImportCourseReq

func (p *EducationserviceImportCourseArgs) GetReq() (v *ImportCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceImportCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportCourseArgs) SetReq(val *ImportCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportCourseArgs(%+v)", *p)

}

func (p *EducationserviceImportCourseArgs) DeepEqual(ano *EducationserviceImportCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportCourseArgs) Field1DeepEqual(src *ImportCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportCourseResult struct {
	Success *ImportCourseResp `thrift:"success,0,optional" frugal:"0,optional,ImportCourseResp" json:"success,omitempty"`
}

func NewEducationserviceImportCourseResult() *EducationserviceImportCourseResult {
	return &EducationserviceImportCourseResult{}
}

func (p *EducationserviceImportCourseResult) InitDefault() {
}

var EducationserviceImportCourseResult_Success_DEFAULT *ImportCourseResp

func (p *EducationserviceImportCourseResult) GetSuccess() (v *ImportCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportCourseResp)
}

var fieldIDToName_EducationserviceImportCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportCourseResult(%+v)", *p)

}

func (p *EducationserviceImportCourseResult) DeepEqual(ano *EducationserviceImportCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportCourseResult) Field0DeepEqual(src *ImportCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateCourseArgs struct {
	Req *UpdateCourseReq `thrift:"req,1" frugal:"1,default,UpdateCourseReq" json:"req"`
}

func NewEducationserviceUpdateCourseArgs() *EducationserviceUpdateCourseArgs {
	return &EducationserviceUpdateCourseArgs{}
}

func (p *EducationserviceUpdateCourseArgs) InitDefault() {
}

var EducationserviceUpdateCourseArgs_Req_DEFAULT *UpdateCourseReq

func (p *EducationserviceUpdateCourseArgs) GetReq() (v *UpdateCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateCourseArgs) SetReq(val *UpdateCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateCourseArgs(%+v)", *p)

}

func (p *EducationserviceUpdateCourseArgs) DeepEqual(ano *EducationserviceUpdateCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateCourseArgs) Field1DeepEqual(src *UpdateCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateCourseResult struct {
	Success *UpdateCourseResp `thrift:"success,0,optional" frugal:"0,optional,UpdateCourseResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateCourseResult() *EducationserviceUpdateCourseResult {
	return &EducationserviceUpdateCourseResult{}
}

func (p *EducationserviceUpdateCourseResult) InitDefault() {
}

var EducationserviceUpdateCourseResult_Success_DEFAULT *UpdateCourseResp

func (p *EducationserviceUpdateCourseResult) GetSuccess() (v *UpdateCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCourseResp)
}

var fieldIDToName_EducationserviceUpdateCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateCourseResult(%+v)", *p)

}

func (p *EducationserviceUpdateCourseResult) DeepEqual(ano *EducationserviceUpdateCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateCourseResult) Field0DeepEqual(src *UpdateCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseListArgs struct {
	Req *GetSelfCourseListReq `thrift:"req,1" frugal:"1,default,GetSelfCourseListReq" json:"req"`
}

func NewEducationserviceGetSelfCourseListArgs() *EducationserviceGetSelfCourseListArgs {
	return &EducationserviceGetSelfCourseListArgs{}
}

func (p *EducationserviceGetSelfCourseListArgs) InitDefault() {
}

var EducationserviceGetSelfCourseListArgs_Req_DEFAULT *GetSelfCourseListReq

func (p *EducationserviceGetSelfCourseListArgs) GetReq() (v *GetSelfCourseListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetSelfCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetSelfCourseListArgs) SetReq(val *GetSelfCourseListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetSelfCourseListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetSelfCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetSelfCourseListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetSelfCourseListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseListArgs(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseListArgs) DeepEqual(ano *EducationserviceGetSelfCourseListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseListArgs) Field1DeepEqual(src *GetSelfCourseListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseListResult struct {
	Success *GetSelfCourseListResp `thrift:"success,0,optional" frugal:"0,optional,GetSelfCourseListResp" json:"success,omitempty"`
}

func NewEducationserviceGetSelfCourseListResult() *EducationserviceGetSelfCourseListResult {
	return &EducationserviceGetSelfCourseListResult{}
}

func (p *EducationserviceGetSelfCourseListResult) InitDefault() {
}

var EducationserviceGetSelfCourseListResult_Success_DEFAULT *GetSelfCourseListResp

func (p *EducationserviceGetSelfCourseListResult) GetSuccess() (v *GetSelfCourseListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetSelfCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetSelfCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSelfCourseListResp)
}

var fieldIDToName_EducationserviceGetSelfCourseListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetSelfCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetSelfCourseListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetSelfCourseListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseListResult(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseListResult) DeepEqual(ano *EducationserviceGetSelfCourseListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseListResult) Field0DeepEqual(src *GetSelfCourseListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseApplicationListArgs struct {
	Req *GetCourseApplicationListReq `thrift:"req,1" frugal:"1,default,GetCourseApplicationListReq" json:"req"`
}

func NewEducationserviceGetCourseApplicationListArgs() *EducationserviceGetCourseApplicationListArgs {
	return &EducationserviceGetCourseApplicationListArgs{}
}

func (p *EducationserviceGetCourseApplicationListArgs) InitDefault() {
}

var EducationserviceGetCourseApplicationListArgs_Req_DEFAULT *GetCourseApplicationListReq

func (p *EducationserviceGetCourseApplicationListArgs) GetReq() (v *GetCourseApplicationListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetCourseApplicationListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetCourseApplicationListArgs) SetReq(val *GetCourseApplicationListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetCourseApplicationListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetCourseApplicationListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetCourseApplicationListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseApplicationListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCourseApplicationListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetCourseApplicationListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplicationList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseApplicationListArgs(%+v)", *p)

}

func (p *EducationserviceGetCourseApplicationListArgs) DeepEqual(ano *EducationserviceGetCourseApplicationListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseApplicationListArgs) Field1DeepEqual(src *GetCourseApplicationListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetCourseApplicationListResult struct {
	Success *GetCourseApplicationListResp `thrift:"success,0,optional" frugal:"0,optional,GetCourseApplicationListResp" json:"success,omitempty"`
}

func NewEducationserviceGetCourseApplicationListResult() *EducationserviceGetCourseApplicationListResult {
	return &EducationserviceGetCourseApplicationListResult{}
}

func (p *EducationserviceGetCourseApplicationListResult) InitDefault() {
}

var EducationserviceGetCourseApplicationListResult_Success_DEFAULT *GetCourseApplicationListResp

func (p *EducationserviceGetCourseApplicationListResult) GetSuccess() (v *GetCourseApplicationListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetCourseApplicationListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetCourseApplicationListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCourseApplicationListResp)
}

var fieldIDToName_EducationserviceGetCourseApplicationListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetCourseApplicationListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetCourseApplicationListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetCourseApplicationListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCourseApplicationListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetCourseApplicationListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCourseApplicationList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetCourseApplicationListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetCourseApplicationListResult(%+v)", *p)

}

func (p *EducationserviceGetCourseApplicationListResult) DeepEqual(ano *EducationserviceGetCourseApplicationListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetCourseApplicationListResult) Field0DeepEqual(src *GetCourseApplicationListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseApplicationArgs struct {
	Req *DeleteCourseApplicationReq `thrift:"req,1" frugal:"1,default,DeleteCourseApplicationReq" json:"req"`
}

func NewEducationserviceDeleteCourseApplicationArgs() *EducationserviceDeleteCourseApplicationArgs {
	return &EducationserviceDeleteCourseApplicationArgs{}
}

func (p *EducationserviceDeleteCourseApplicationArgs) InitDefault() {
}

var EducationserviceDeleteCourseApplicationArgs_Req_DEFAULT *DeleteCourseApplicationReq

func (p *EducationserviceDeleteCourseApplicationArgs) GetReq() (v *DeleteCourseApplicationReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteCourseApplicationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteCourseApplicationArgs) SetReq(val *DeleteCourseApplicationReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteCourseApplicationArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteCourseApplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteCourseApplicationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseApplicationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseApplicationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteCourseApplicationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApplication_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseApplicationArgs(%+v)", *p)

}

func (p *EducationserviceDeleteCourseApplicationArgs) DeepEqual(ano *EducationserviceDeleteCourseApplicationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseApplicationArgs) Field1DeepEqual(src *DeleteCourseApplicationReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteCourseApplicationResult struct {
	Success *DeleteCourseApplicationResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCourseApplicationResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteCourseApplicationResult() *EducationserviceDeleteCourseApplicationResult {
	return &EducationserviceDeleteCourseApplicationResult{}
}

func (p *EducationserviceDeleteCourseApplicationResult) InitDefault() {
}

var EducationserviceDeleteCourseApplicationResult_Success_DEFAULT *DeleteCourseApplicationResp

func (p *EducationserviceDeleteCourseApplicationResult) GetSuccess() (v *DeleteCourseApplicationResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteCourseApplicationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteCourseApplicationResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCourseApplicationResp)
}

var fieldIDToName_EducationserviceDeleteCourseApplicationResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteCourseApplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteCourseApplicationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteCourseApplicationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteCourseApplicationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteCourseApplicationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCourseApplication_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteCourseApplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteCourseApplicationResult(%+v)", *p)

}

func (p *EducationserviceDeleteCourseApplicationResult) DeepEqual(ano *EducationserviceDeleteCourseApplicationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteCourseApplicationResult) Field0DeepEqual(src *DeleteCourseApplicationResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseApplicationListArgs struct {
	Req *GetSelfCourseApplicationListReq `thrift:"req,1" frugal:"1,default,GetSelfCourseApplicationListReq" json:"req"`
}

func NewEducationserviceGetSelfCourseApplicationListArgs() *EducationserviceGetSelfCourseApplicationListArgs {
	return &EducationserviceGetSelfCourseApplicationListArgs{}
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) InitDefault() {
}

var EducationserviceGetSelfCourseApplicationListArgs_Req_DEFAULT *GetSelfCourseApplicationListReq

func (p *EducationserviceGetSelfCourseApplicationListArgs) GetReq() (v *GetSelfCourseApplicationListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetSelfCourseApplicationListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetSelfCourseApplicationListArgs) SetReq(val *GetSelfCourseApplicationListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetSelfCourseApplicationListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseApplicationListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseApplicationListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplicationList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseApplicationListArgs(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseApplicationListArgs) DeepEqual(ano *EducationserviceGetSelfCourseApplicationListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseApplicationListArgs) Field1DeepEqual(src *GetSelfCourseApplicationListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfCourseApplicationListResult struct {
	Success *GetSelfCourseApplicationListResp `thrift:"success,0,optional" frugal:"0,optional,GetSelfCourseApplicationListResp" json:"success,omitempty"`
}

func NewEducationserviceGetSelfCourseApplicationListResult() *EducationserviceGetSelfCourseApplicationListResult {
	return &EducationserviceGetSelfCourseApplicationListResult{}
}

func (p *EducationserviceGetSelfCourseApplicationListResult) InitDefault() {
}

var EducationserviceGetSelfCourseApplicationListResult_Success_DEFAULT *GetSelfCourseApplicationListResp

func (p *EducationserviceGetSelfCourseApplicationListResult) GetSuccess() (v *GetSelfCourseApplicationListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetSelfCourseApplicationListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetSelfCourseApplicationListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSelfCourseApplicationListResp)
}

var fieldIDToName_EducationserviceGetSelfCourseApplicationListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetSelfCourseApplicationListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetSelfCourseApplicationListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfCourseApplicationListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSelfCourseApplicationListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetSelfCourseApplicationListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfCourseApplicationList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetSelfCourseApplicationListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfCourseApplicationListResult(%+v)", *p)

}

func (p *EducationserviceGetSelfCourseApplicationListResult) DeepEqual(ano *EducationserviceGetSelfCourseApplicationListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfCourseApplicationListResult) Field0DeepEqual(src *GetSelfCourseApplicationListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceAdjustCourseApplicationArgs struct {
	Req *AdjustCourseApplicationReq `thrift:"req,1" frugal:"1,default,AdjustCourseApplicationReq" json:"req"`
}

func NewEducationserviceAdjustCourseApplicationArgs() *EducationserviceAdjustCourseApplicationArgs {
	return &EducationserviceAdjustCourseApplicationArgs{}
}

func (p *EducationserviceAdjustCourseApplicationArgs) InitDefault() {
}

var EducationserviceAdjustCourseApplicationArgs_Req_DEFAULT *AdjustCourseApplicationReq

func (p *EducationserviceAdjustCourseApplicationArgs) GetReq() (v *AdjustCourseApplicationReq) {
	if !p.IsSetReq() {
		return EducationserviceAdjustCourseApplicationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceAdjustCourseApplicationArgs) SetReq(val *AdjustCourseApplicationReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceAdjustCourseApplicationArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceAdjustCourseApplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceAdjustCourseApplicationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceAdjustCourseApplicationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAdjustCourseApplicationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceAdjustCourseApplicationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AdjustCourseApplication_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceAdjustCourseApplicationArgs(%+v)", *p)

}

func (p *EducationserviceAdjustCourseApplicationArgs) DeepEqual(ano *EducationserviceAdjustCourseApplicationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceAdjustCourseApplicationArgs) Field1DeepEqual(src *AdjustCourseApplicationReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceAdjustCourseApplicationResult struct {
	Success *AdjustCourseApplicationResp `thrift:"success,0,optional" frugal:"0,optional,AdjustCourseApplicationResp" json:"success,omitempty"`
}

func NewEducationserviceAdjustCourseApplicationResult() *EducationserviceAdjustCourseApplicationResult {
	return &EducationserviceAdjustCourseApplicationResult{}
}

func (p *EducationserviceAdjustCourseApplicationResult) InitDefault() {
}

var EducationserviceAdjustCourseApplicationResult_Success_DEFAULT *AdjustCourseApplicationResp

func (p *EducationserviceAdjustCourseApplicationResult) GetSuccess() (v *AdjustCourseApplicationResp) {
	if !p.IsSetSuccess() {
		return EducationserviceAdjustCourseApplicationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceAdjustCourseApplicationResult) SetSuccess(x interface{}) {
	p.Success = x.(*AdjustCourseApplicationResp)
}

var fieldIDToName_EducationserviceAdjustCourseApplicationResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceAdjustCourseApplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceAdjustCourseApplicationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceAdjustCourseApplicationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAdjustCourseApplicationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceAdjustCourseApplicationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AdjustCourseApplication_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceAdjustCourseApplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceAdjustCourseApplicationResult(%+v)", *p)

}

func (p *EducationserviceAdjustCourseApplicationResult) DeepEqual(ano *EducationserviceAdjustCourseApplicationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceAdjustCourseApplicationResult) Field0DeepEqual(src *AdjustCourseApplicationResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetHolidayListArgs struct {
	Req *GetHolidayListReq `thrift:"req,1" frugal:"1,default,GetHolidayListReq" json:"req"`
}

func NewEducationserviceGetHolidayListArgs() *EducationserviceGetHolidayListArgs {
	return &EducationserviceGetHolidayListArgs{}
}

func (p *EducationserviceGetHolidayListArgs) InitDefault() {
}

var EducationserviceGetHolidayListArgs_Req_DEFAULT *GetHolidayListReq

func (p *EducationserviceGetHolidayListArgs) GetReq() (v *GetHolidayListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetHolidayListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetHolidayListArgs) SetReq(val *GetHolidayListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetHolidayListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetHolidayListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetHolidayListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetHolidayListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetHolidayListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetHolidayListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetHolidayListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHolidayList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetHolidayListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetHolidayListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetHolidayListArgs(%+v)", *p)

}

func (p *EducationserviceGetHolidayListArgs) DeepEqual(ano *EducationserviceGetHolidayListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetHolidayListArgs) Field1DeepEqual(src *GetHolidayListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetHolidayListResult struct {
	Success *GetHolidayListResp `thrift:"success,0,optional" frugal:"0,optional,GetHolidayListResp" json:"success,omitempty"`
}

func NewEducationserviceGetHolidayListResult() *EducationserviceGetHolidayListResult {
	return &EducationserviceGetHolidayListResult{}
}

func (p *EducationserviceGetHolidayListResult) InitDefault() {
}

var EducationserviceGetHolidayListResult_Success_DEFAULT *GetHolidayListResp

func (p *EducationserviceGetHolidayListResult) GetSuccess() (v *GetHolidayListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetHolidayListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetHolidayListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHolidayListResp)
}

var fieldIDToName_EducationserviceGetHolidayListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetHolidayListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetHolidayListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetHolidayListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetHolidayListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetHolidayListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetHolidayListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHolidayList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetHolidayListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetHolidayListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetHolidayListResult(%+v)", *p)

}

func (p *EducationserviceGetHolidayListResult) DeepEqual(ano *EducationserviceGetHolidayListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetHolidayListResult) Field0DeepEqual(src *GetHolidayListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteHolidayArgs struct {
	Req *DeleteHolidayReq `thrift:"req,1" frugal:"1,default,DeleteHolidayReq" json:"req"`
}

func NewEducationserviceDeleteHolidayArgs() *EducationserviceDeleteHolidayArgs {
	return &EducationserviceDeleteHolidayArgs{}
}

func (p *EducationserviceDeleteHolidayArgs) InitDefault() {
}

var EducationserviceDeleteHolidayArgs_Req_DEFAULT *DeleteHolidayReq

func (p *EducationserviceDeleteHolidayArgs) GetReq() (v *DeleteHolidayReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteHolidayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteHolidayArgs) SetReq(val *DeleteHolidayReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteHolidayArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteHolidayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteHolidayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteHolidayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteHolidayReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteHolidayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteHoliday_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteHolidayArgs(%+v)", *p)

}

func (p *EducationserviceDeleteHolidayArgs) DeepEqual(ano *EducationserviceDeleteHolidayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteHolidayArgs) Field1DeepEqual(src *DeleteHolidayReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteHolidayResult struct {
	Success *DeleteHolidayResp `thrift:"success,0,optional" frugal:"0,optional,DeleteHolidayResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteHolidayResult() *EducationserviceDeleteHolidayResult {
	return &EducationserviceDeleteHolidayResult{}
}

func (p *EducationserviceDeleteHolidayResult) InitDefault() {
}

var EducationserviceDeleteHolidayResult_Success_DEFAULT *DeleteHolidayResp

func (p *EducationserviceDeleteHolidayResult) GetSuccess() (v *DeleteHolidayResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteHolidayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteHolidayResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteHolidayResp)
}

var fieldIDToName_EducationserviceDeleteHolidayResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteHolidayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteHolidayResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteHolidayResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteHolidayResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteHolidayResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteHoliday_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteHolidayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteHolidayResult(%+v)", *p)

}

func (p *EducationserviceDeleteHolidayResult) DeepEqual(ano *EducationserviceDeleteHolidayResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteHolidayResult) Field0DeepEqual(src *DeleteHolidayResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateHolidayArgs struct {
	Req *CreateHolidayReq `thrift:"req,1" frugal:"1,default,CreateHolidayReq" json:"req"`
}

func NewEducationserviceCreateHolidayArgs() *EducationserviceCreateHolidayArgs {
	return &EducationserviceCreateHolidayArgs{}
}

func (p *EducationserviceCreateHolidayArgs) InitDefault() {
}

var EducationserviceCreateHolidayArgs_Req_DEFAULT *CreateHolidayReq

func (p *EducationserviceCreateHolidayArgs) GetReq() (v *CreateHolidayReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateHolidayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateHolidayArgs) SetReq(val *CreateHolidayReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateHolidayArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateHolidayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateHolidayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateHolidayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateHolidayArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateHolidayReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateHolidayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHoliday_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateHolidayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateHolidayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateHolidayArgs(%+v)", *p)

}

func (p *EducationserviceCreateHolidayArgs) DeepEqual(ano *EducationserviceCreateHolidayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateHolidayArgs) Field1DeepEqual(src *CreateHolidayReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateHolidayResult struct {
	Success *CreateHolidayResp `thrift:"success,0,optional" frugal:"0,optional,CreateHolidayResp" json:"success,omitempty"`
}

func NewEducationserviceCreateHolidayResult() *EducationserviceCreateHolidayResult {
	return &EducationserviceCreateHolidayResult{}
}

func (p *EducationserviceCreateHolidayResult) InitDefault() {
}

var EducationserviceCreateHolidayResult_Success_DEFAULT *CreateHolidayResp

func (p *EducationserviceCreateHolidayResult) GetSuccess() (v *CreateHolidayResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateHolidayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateHolidayResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateHolidayResp)
}

var fieldIDToName_EducationserviceCreateHolidayResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateHolidayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateHolidayResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateHolidayResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateHolidayResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateHolidayResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateHolidayResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHoliday_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateHolidayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateHolidayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateHolidayResult(%+v)", *p)

}

func (p *EducationserviceCreateHolidayResult) DeepEqual(ano *EducationserviceCreateHolidayResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateHolidayResult) Field0DeepEqual(src *CreateHolidayResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateHolidayArgs struct {
	Req *UpdateHolidayReq `thrift:"req,1" frugal:"1,default,UpdateHolidayReq" json:"req"`
}

func NewEducationserviceUpdateHolidayArgs() *EducationserviceUpdateHolidayArgs {
	return &EducationserviceUpdateHolidayArgs{}
}

func (p *EducationserviceUpdateHolidayArgs) InitDefault() {
}

var EducationserviceUpdateHolidayArgs_Req_DEFAULT *UpdateHolidayReq

func (p *EducationserviceUpdateHolidayArgs) GetReq() (v *UpdateHolidayReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateHolidayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateHolidayArgs) SetReq(val *UpdateHolidayReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateHolidayArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateHolidayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateHolidayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateHolidayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateHolidayReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateHolidayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateHoliday_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateHolidayArgs(%+v)", *p)

}

func (p *EducationserviceUpdateHolidayArgs) DeepEqual(ano *EducationserviceUpdateHolidayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateHolidayArgs) Field1DeepEqual(src *UpdateHolidayReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateHolidayResult struct {
	Success *UpdateHolidayResp `thrift:"success,0,optional" frugal:"0,optional,UpdateHolidayResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateHolidayResult() *EducationserviceUpdateHolidayResult {
	return &EducationserviceUpdateHolidayResult{}
}

func (p *EducationserviceUpdateHolidayResult) InitDefault() {
}

var EducationserviceUpdateHolidayResult_Success_DEFAULT *UpdateHolidayResp

func (p *EducationserviceUpdateHolidayResult) GetSuccess() (v *UpdateHolidayResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateHolidayResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateHolidayResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateHolidayResp)
}

var fieldIDToName_EducationserviceUpdateHolidayResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateHolidayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateHolidayResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateHolidayResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateHolidayResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateHolidayResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateHoliday_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateHolidayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateHolidayResult(%+v)", *p)

}

func (p *EducationserviceUpdateHolidayResult) DeepEqual(ano *EducationserviceUpdateHolidayResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateHolidayResult) Field0DeepEqual(src *UpdateHolidayResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetInternshipListArgs struct {
	Req *GetInternshipListReq `thrift:"req,1" frugal:"1,default,GetInternshipListReq" json:"req"`
}

func NewEducationserviceGetInternshipListArgs() *EducationserviceGetInternshipListArgs {
	return &EducationserviceGetInternshipListArgs{}
}

func (p *EducationserviceGetInternshipListArgs) InitDefault() {
}

var EducationserviceGetInternshipListArgs_Req_DEFAULT *GetInternshipListReq

func (p *EducationserviceGetInternshipListArgs) GetReq() (v *GetInternshipListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetInternshipListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetInternshipListArgs) SetReq(val *GetInternshipListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetInternshipListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetInternshipListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetInternshipListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetInternshipListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetInternshipListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetInternshipListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetInternshipListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInternshipList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetInternshipListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetInternshipListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetInternshipListArgs(%+v)", *p)

}

func (p *EducationserviceGetInternshipListArgs) DeepEqual(ano *EducationserviceGetInternshipListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetInternshipListArgs) Field1DeepEqual(src *GetInternshipListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetInternshipListResult struct {
	Success *GetInternshipListResp `thrift:"success,0,optional" frugal:"0,optional,GetInternshipListResp" json:"success,omitempty"`
}

func NewEducationserviceGetInternshipListResult() *EducationserviceGetInternshipListResult {
	return &EducationserviceGetInternshipListResult{}
}

func (p *EducationserviceGetInternshipListResult) InitDefault() {
}

var EducationserviceGetInternshipListResult_Success_DEFAULT *GetInternshipListResp

func (p *EducationserviceGetInternshipListResult) GetSuccess() (v *GetInternshipListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetInternshipListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetInternshipListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetInternshipListResp)
}

var fieldIDToName_EducationserviceGetInternshipListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetInternshipListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetInternshipListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetInternshipListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetInternshipListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetInternshipListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetInternshipListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInternshipList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetInternshipListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetInternshipListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetInternshipListResult(%+v)", *p)

}

func (p *EducationserviceGetInternshipListResult) DeepEqual(ano *EducationserviceGetInternshipListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetInternshipListResult) Field0DeepEqual(src *GetInternshipListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteInternshipArgs struct {
	Req *DeleteInternshipReq `thrift:"req,1" frugal:"1,default,DeleteInternshipReq" json:"req"`
}

func NewEducationserviceDeleteInternshipArgs() *EducationserviceDeleteInternshipArgs {
	return &EducationserviceDeleteInternshipArgs{}
}

func (p *EducationserviceDeleteInternshipArgs) InitDefault() {
}

var EducationserviceDeleteInternshipArgs_Req_DEFAULT *DeleteInternshipReq

func (p *EducationserviceDeleteInternshipArgs) GetReq() (v *DeleteInternshipReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteInternshipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteInternshipArgs) SetReq(val *DeleteInternshipReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteInternshipArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteInternshipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteInternshipArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteInternshipArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteInternshipReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteInternshipArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteInternship_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteInternshipArgs(%+v)", *p)

}

func (p *EducationserviceDeleteInternshipArgs) DeepEqual(ano *EducationserviceDeleteInternshipArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteInternshipArgs) Field1DeepEqual(src *DeleteInternshipReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteInternshipResult struct {
	Success *DeleteInternshipResp `thrift:"success,0,optional" frugal:"0,optional,DeleteInternshipResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteInternshipResult() *EducationserviceDeleteInternshipResult {
	return &EducationserviceDeleteInternshipResult{}
}

func (p *EducationserviceDeleteInternshipResult) InitDefault() {
}

var EducationserviceDeleteInternshipResult_Success_DEFAULT *DeleteInternshipResp

func (p *EducationserviceDeleteInternshipResult) GetSuccess() (v *DeleteInternshipResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteInternshipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteInternshipResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteInternshipResp)
}

var fieldIDToName_EducationserviceDeleteInternshipResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteInternshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteInternshipResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteInternshipResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteInternshipResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteInternshipResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteInternship_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteInternshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteInternshipResult(%+v)", *p)

}

func (p *EducationserviceDeleteInternshipResult) DeepEqual(ano *EducationserviceDeleteInternshipResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteInternshipResult) Field0DeepEqual(src *DeleteInternshipResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateInternshipArgs struct {
	Req *UpdateInternshipReq `thrift:"req,1" frugal:"1,default,UpdateInternshipReq" json:"req"`
}

func NewEducationserviceUpdateInternshipArgs() *EducationserviceUpdateInternshipArgs {
	return &EducationserviceUpdateInternshipArgs{}
}

func (p *EducationserviceUpdateInternshipArgs) InitDefault() {
}

var EducationserviceUpdateInternshipArgs_Req_DEFAULT *UpdateInternshipReq

func (p *EducationserviceUpdateInternshipArgs) GetReq() (v *UpdateInternshipReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateInternshipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateInternshipArgs) SetReq(val *UpdateInternshipReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateInternshipArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateInternshipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateInternshipArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateInternshipArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateInternshipReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateInternshipArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateInternship_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateInternshipArgs(%+v)", *p)

}

func (p *EducationserviceUpdateInternshipArgs) DeepEqual(ano *EducationserviceUpdateInternshipArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateInternshipArgs) Field1DeepEqual(src *UpdateInternshipReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateInternshipResult struct {
	Success *UpdateInternshipResp `thrift:"success,0,optional" frugal:"0,optional,UpdateInternshipResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateInternshipResult() *EducationserviceUpdateInternshipResult {
	return &EducationserviceUpdateInternshipResult{}
}

func (p *EducationserviceUpdateInternshipResult) InitDefault() {
}

var EducationserviceUpdateInternshipResult_Success_DEFAULT *UpdateInternshipResp

func (p *EducationserviceUpdateInternshipResult) GetSuccess() (v *UpdateInternshipResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateInternshipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateInternshipResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateInternshipResp)
}

var fieldIDToName_EducationserviceUpdateInternshipResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateInternshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateInternshipResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateInternshipResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateInternshipResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateInternshipResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateInternship_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateInternshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateInternshipResult(%+v)", *p)

}

func (p *EducationserviceUpdateInternshipResult) DeepEqual(ano *EducationserviceUpdateInternshipResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateInternshipResult) Field0DeepEqual(src *UpdateInternshipResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateInternshipArgs struct {
	Req *CreateInternshipReq `thrift:"req,1" frugal:"1,default,CreateInternshipReq" json:"req"`
}

func NewEducationserviceCreateInternshipArgs() *EducationserviceCreateInternshipArgs {
	return &EducationserviceCreateInternshipArgs{}
}

func (p *EducationserviceCreateInternshipArgs) InitDefault() {
}

var EducationserviceCreateInternshipArgs_Req_DEFAULT *CreateInternshipReq

func (p *EducationserviceCreateInternshipArgs) GetReq() (v *CreateInternshipReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateInternshipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateInternshipArgs) SetReq(val *CreateInternshipReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateInternshipArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateInternshipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateInternshipArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateInternshipArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateInternshipArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateInternshipReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateInternshipArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInternship_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateInternshipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateInternshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateInternshipArgs(%+v)", *p)

}

func (p *EducationserviceCreateInternshipArgs) DeepEqual(ano *EducationserviceCreateInternshipArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateInternshipArgs) Field1DeepEqual(src *CreateInternshipReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateInternshipResult struct {
	Success *CreateInternshipResp `thrift:"success,0,optional" frugal:"0,optional,CreateInternshipResp" json:"success,omitempty"`
}

func NewEducationserviceCreateInternshipResult() *EducationserviceCreateInternshipResult {
	return &EducationserviceCreateInternshipResult{}
}

func (p *EducationserviceCreateInternshipResult) InitDefault() {
}

var EducationserviceCreateInternshipResult_Success_DEFAULT *CreateInternshipResp

func (p *EducationserviceCreateInternshipResult) GetSuccess() (v *CreateInternshipResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateInternshipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateInternshipResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateInternshipResp)
}

var fieldIDToName_EducationserviceCreateInternshipResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateInternshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateInternshipResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateInternshipResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateInternshipResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateInternshipResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateInternshipResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInternship_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateInternshipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateInternshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateInternshipResult(%+v)", *p)

}

func (p *EducationserviceCreateInternshipResult) DeepEqual(ano *EducationserviceCreateInternshipResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateInternshipResult) Field0DeepEqual(src *CreateInternshipResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportInternshipArgs struct {
	Req *ImportInternshipReq `thrift:"req,1" frugal:"1,default,ImportInternshipReq" json:"req"`
}

func NewEducationserviceImportInternshipArgs() *EducationserviceImportInternshipArgs {
	return &EducationserviceImportInternshipArgs{}
}

func (p *EducationserviceImportInternshipArgs) InitDefault() {
}

var EducationserviceImportInternshipArgs_Req_DEFAULT *ImportInternshipReq

func (p *EducationserviceImportInternshipArgs) GetReq() (v *ImportInternshipReq) {
	if !p.IsSetReq() {
		return EducationserviceImportInternshipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportInternshipArgs) SetReq(val *ImportInternshipReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportInternshipArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportInternshipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportInternshipArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportInternshipArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportInternshipArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportInternshipReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportInternshipArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportInternship_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportInternshipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportInternshipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportInternshipArgs(%+v)", *p)

}

func (p *EducationserviceImportInternshipArgs) DeepEqual(ano *EducationserviceImportInternshipArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportInternshipArgs) Field1DeepEqual(src *ImportInternshipReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportInternshipResult struct {
	Success *ImportInternshipResp `thrift:"success,0,optional" frugal:"0,optional,ImportInternshipResp" json:"success,omitempty"`
}

func NewEducationserviceImportInternshipResult() *EducationserviceImportInternshipResult {
	return &EducationserviceImportInternshipResult{}
}

func (p *EducationserviceImportInternshipResult) InitDefault() {
}

var EducationserviceImportInternshipResult_Success_DEFAULT *ImportInternshipResp

func (p *EducationserviceImportInternshipResult) GetSuccess() (v *ImportInternshipResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportInternshipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportInternshipResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportInternshipResp)
}

var fieldIDToName_EducationserviceImportInternshipResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportInternshipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportInternshipResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportInternshipResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportInternshipResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportInternshipResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportInternshipResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportInternship_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportInternshipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportInternshipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportInternshipResult(%+v)", *p)

}

func (p *EducationserviceImportInternshipResult) DeepEqual(ano *EducationserviceImportInternshipResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportInternshipResult) Field0DeepEqual(src *ImportInternshipResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTrainingCourseListArgs struct {
	Req *GetTrainingCourseListReq `thrift:"req,1" frugal:"1,default,GetTrainingCourseListReq" json:"req"`
}

func NewEducationserviceGetTrainingCourseListArgs() *EducationserviceGetTrainingCourseListArgs {
	return &EducationserviceGetTrainingCourseListArgs{}
}

func (p *EducationserviceGetTrainingCourseListArgs) InitDefault() {
}

var EducationserviceGetTrainingCourseListArgs_Req_DEFAULT *GetTrainingCourseListReq

func (p *EducationserviceGetTrainingCourseListArgs) GetReq() (v *GetTrainingCourseListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetTrainingCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetTrainingCourseListArgs) SetReq(val *GetTrainingCourseListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetTrainingCourseListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetTrainingCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetTrainingCourseListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTrainingCourseListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTrainingCourseListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetTrainingCourseListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrainingCourseList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTrainingCourseListArgs(%+v)", *p)

}

func (p *EducationserviceGetTrainingCourseListArgs) DeepEqual(ano *EducationserviceGetTrainingCourseListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetTrainingCourseListArgs) Field1DeepEqual(src *GetTrainingCourseListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetTrainingCourseListResult struct {
	Success *GetTrainingCourseListResp `thrift:"success,0,optional" frugal:"0,optional,GetTrainingCourseListResp" json:"success,omitempty"`
}

func NewEducationserviceGetTrainingCourseListResult() *EducationserviceGetTrainingCourseListResult {
	return &EducationserviceGetTrainingCourseListResult{}
}

func (p *EducationserviceGetTrainingCourseListResult) InitDefault() {
}

var EducationserviceGetTrainingCourseListResult_Success_DEFAULT *GetTrainingCourseListResp

func (p *EducationserviceGetTrainingCourseListResult) GetSuccess() (v *GetTrainingCourseListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetTrainingCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetTrainingCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTrainingCourseListResp)
}

var fieldIDToName_EducationserviceGetTrainingCourseListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetTrainingCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetTrainingCourseListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetTrainingCourseListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTrainingCourseListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetTrainingCourseListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrainingCourseList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetTrainingCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetTrainingCourseListResult(%+v)", *p)

}

func (p *EducationserviceGetTrainingCourseListResult) DeepEqual(ano *EducationserviceGetTrainingCourseListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetTrainingCourseListResult) Field0DeepEqual(src *GetTrainingCourseListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateTrainingCourseArgs struct {
	Req *CreateTrainingCourseReq `thrift:"req,1" frugal:"1,default,CreateTrainingCourseReq" json:"req"`
}

func NewEducationserviceCreateTrainingCourseArgs() *EducationserviceCreateTrainingCourseArgs {
	return &EducationserviceCreateTrainingCourseArgs{}
}

func (p *EducationserviceCreateTrainingCourseArgs) InitDefault() {
}

var EducationserviceCreateTrainingCourseArgs_Req_DEFAULT *CreateTrainingCourseReq

func (p *EducationserviceCreateTrainingCourseArgs) GetReq() (v *CreateTrainingCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceCreateTrainingCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCreateTrainingCourseArgs) SetReq(val *CreateTrainingCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCreateTrainingCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCreateTrainingCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCreateTrainingCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateTrainingCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateTrainingCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCreateTrainingCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTrainingCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateTrainingCourseArgs(%+v)", *p)

}

func (p *EducationserviceCreateTrainingCourseArgs) DeepEqual(ano *EducationserviceCreateTrainingCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCreateTrainingCourseArgs) Field1DeepEqual(src *CreateTrainingCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCreateTrainingCourseResult struct {
	Success *CreateTrainingCourseResp `thrift:"success,0,optional" frugal:"0,optional,CreateTrainingCourseResp" json:"success,omitempty"`
}

func NewEducationserviceCreateTrainingCourseResult() *EducationserviceCreateTrainingCourseResult {
	return &EducationserviceCreateTrainingCourseResult{}
}

func (p *EducationserviceCreateTrainingCourseResult) InitDefault() {
}

var EducationserviceCreateTrainingCourseResult_Success_DEFAULT *CreateTrainingCourseResp

func (p *EducationserviceCreateTrainingCourseResult) GetSuccess() (v *CreateTrainingCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCreateTrainingCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCreateTrainingCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTrainingCourseResp)
}

var fieldIDToName_EducationserviceCreateTrainingCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCreateTrainingCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCreateTrainingCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCreateTrainingCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateTrainingCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCreateTrainingCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTrainingCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCreateTrainingCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCreateTrainingCourseResult(%+v)", *p)

}

func (p *EducationserviceCreateTrainingCourseResult) DeepEqual(ano *EducationserviceCreateTrainingCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCreateTrainingCourseResult) Field0DeepEqual(src *CreateTrainingCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteTrainingCourseArgs struct {
	Req *DeleteTrainingCourseReq `thrift:"req,1" frugal:"1,default,DeleteTrainingCourseReq" json:"req"`
}

func NewEducationserviceDeleteTrainingCourseArgs() *EducationserviceDeleteTrainingCourseArgs {
	return &EducationserviceDeleteTrainingCourseArgs{}
}

func (p *EducationserviceDeleteTrainingCourseArgs) InitDefault() {
}

var EducationserviceDeleteTrainingCourseArgs_Req_DEFAULT *DeleteTrainingCourseReq

func (p *EducationserviceDeleteTrainingCourseArgs) GetReq() (v *DeleteTrainingCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteTrainingCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteTrainingCourseArgs) SetReq(val *DeleteTrainingCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteTrainingCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteTrainingCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteTrainingCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteTrainingCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteTrainingCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteTrainingCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTrainingCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteTrainingCourseArgs(%+v)", *p)

}

func (p *EducationserviceDeleteTrainingCourseArgs) DeepEqual(ano *EducationserviceDeleteTrainingCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteTrainingCourseArgs) Field1DeepEqual(src *DeleteTrainingCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteTrainingCourseResult struct {
	Success *DeleteTrainingCourseResp `thrift:"success,0,optional" frugal:"0,optional,DeleteTrainingCourseResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteTrainingCourseResult() *EducationserviceDeleteTrainingCourseResult {
	return &EducationserviceDeleteTrainingCourseResult{}
}

func (p *EducationserviceDeleteTrainingCourseResult) InitDefault() {
}

var EducationserviceDeleteTrainingCourseResult_Success_DEFAULT *DeleteTrainingCourseResp

func (p *EducationserviceDeleteTrainingCourseResult) GetSuccess() (v *DeleteTrainingCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteTrainingCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteTrainingCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteTrainingCourseResp)
}

var fieldIDToName_EducationserviceDeleteTrainingCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteTrainingCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteTrainingCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteTrainingCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteTrainingCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteTrainingCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTrainingCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteTrainingCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteTrainingCourseResult(%+v)", *p)

}

func (p *EducationserviceDeleteTrainingCourseResult) DeepEqual(ano *EducationserviceDeleteTrainingCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteTrainingCourseResult) Field0DeepEqual(src *DeleteTrainingCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTrainingCourseArgs struct {
	Req *UpdateTrainingCourseReq `thrift:"req,1" frugal:"1,default,UpdateTrainingCourseReq" json:"req"`
}

func NewEducationserviceUpdateTrainingCourseArgs() *EducationserviceUpdateTrainingCourseArgs {
	return &EducationserviceUpdateTrainingCourseArgs{}
}

func (p *EducationserviceUpdateTrainingCourseArgs) InitDefault() {
}

var EducationserviceUpdateTrainingCourseArgs_Req_DEFAULT *UpdateTrainingCourseReq

func (p *EducationserviceUpdateTrainingCourseArgs) GetReq() (v *UpdateTrainingCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateTrainingCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateTrainingCourseArgs) SetReq(val *UpdateTrainingCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateTrainingCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateTrainingCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateTrainingCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTrainingCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateTrainingCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateTrainingCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTrainingCourseArgs(%+v)", *p)

}

func (p *EducationserviceUpdateTrainingCourseArgs) DeepEqual(ano *EducationserviceUpdateTrainingCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTrainingCourseArgs) Field1DeepEqual(src *UpdateTrainingCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTrainingCourseResult struct {
	Success *UpdateTrainingCourseResp `thrift:"success,0,optional" frugal:"0,optional,UpdateTrainingCourseResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateTrainingCourseResult() *EducationserviceUpdateTrainingCourseResult {
	return &EducationserviceUpdateTrainingCourseResult{}
}

func (p *EducationserviceUpdateTrainingCourseResult) InitDefault() {
}

var EducationserviceUpdateTrainingCourseResult_Success_DEFAULT *UpdateTrainingCourseResp

func (p *EducationserviceUpdateTrainingCourseResult) GetSuccess() (v *UpdateTrainingCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateTrainingCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateTrainingCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateTrainingCourseResp)
}

var fieldIDToName_EducationserviceUpdateTrainingCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateTrainingCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateTrainingCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTrainingCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateTrainingCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateTrainingCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTrainingCourseResult(%+v)", *p)

}

func (p *EducationserviceUpdateTrainingCourseResult) DeepEqual(ano *EducationserviceUpdateTrainingCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTrainingCourseResult) Field0DeepEqual(src *UpdateTrainingCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTrainingCourseTeacherArgs struct {
	Req *UpdateTrainingCourseTeacherReq `thrift:"req,1" frugal:"1,default,UpdateTrainingCourseTeacherReq" json:"req"`
}

func NewEducationserviceUpdateTrainingCourseTeacherArgs() *EducationserviceUpdateTrainingCourseTeacherArgs {
	return &EducationserviceUpdateTrainingCourseTeacherArgs{}
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) InitDefault() {
}

var EducationserviceUpdateTrainingCourseTeacherArgs_Req_DEFAULT *UpdateTrainingCourseTeacherReq

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) GetReq() (v *UpdateTrainingCourseTeacherReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateTrainingCourseTeacherArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateTrainingCourseTeacherArgs) SetReq(val *UpdateTrainingCourseTeacherReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateTrainingCourseTeacherArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTrainingCourseTeacherArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateTrainingCourseTeacherReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourseTeacher_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTrainingCourseTeacherArgs(%+v)", *p)

}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) DeepEqual(ano *EducationserviceUpdateTrainingCourseTeacherArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTrainingCourseTeacherArgs) Field1DeepEqual(src *UpdateTrainingCourseTeacherReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateTrainingCourseTeacherResult struct {
	Success *UpdateTrainingCourseTeacherResp `thrift:"success,0,optional" frugal:"0,optional,UpdateTrainingCourseTeacherResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateTrainingCourseTeacherResult() *EducationserviceUpdateTrainingCourseTeacherResult {
	return &EducationserviceUpdateTrainingCourseTeacherResult{}
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) InitDefault() {
}

var EducationserviceUpdateTrainingCourseTeacherResult_Success_DEFAULT *UpdateTrainingCourseTeacherResp

func (p *EducationserviceUpdateTrainingCourseTeacherResult) GetSuccess() (v *UpdateTrainingCourseTeacherResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateTrainingCourseTeacherResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateTrainingCourseTeacherResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateTrainingCourseTeacherResp)
}

var fieldIDToName_EducationserviceUpdateTrainingCourseTeacherResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateTrainingCourseTeacherResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateTrainingCourseTeacherResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTrainingCourseTeacher_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateTrainingCourseTeacherResult(%+v)", *p)

}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) DeepEqual(ano *EducationserviceUpdateTrainingCourseTeacherResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateTrainingCourseTeacherResult) Field0DeepEqual(src *UpdateTrainingCourseTeacherResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportTrainingCourseArgs struct {
	Req *ImportTrainingCourseReq `thrift:"req,1" frugal:"1,default,ImportTrainingCourseReq" json:"req"`
}

func NewEducationserviceImportTrainingCourseArgs() *EducationserviceImportTrainingCourseArgs {
	return &EducationserviceImportTrainingCourseArgs{}
}

func (p *EducationserviceImportTrainingCourseArgs) InitDefault() {
}

var EducationserviceImportTrainingCourseArgs_Req_DEFAULT *ImportTrainingCourseReq

func (p *EducationserviceImportTrainingCourseArgs) GetReq() (v *ImportTrainingCourseReq) {
	if !p.IsSetReq() {
		return EducationserviceImportTrainingCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceImportTrainingCourseArgs) SetReq(val *ImportTrainingCourseReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceImportTrainingCourseArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceImportTrainingCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceImportTrainingCourseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportTrainingCourseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportTrainingCourseReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceImportTrainingCourseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTrainingCourse_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportTrainingCourseArgs(%+v)", *p)

}

func (p *EducationserviceImportTrainingCourseArgs) DeepEqual(ano *EducationserviceImportTrainingCourseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceImportTrainingCourseArgs) Field1DeepEqual(src *ImportTrainingCourseReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceImportTrainingCourseResult struct {
	Success *ImportTrainingCourseResp `thrift:"success,0,optional" frugal:"0,optional,ImportTrainingCourseResp" json:"success,omitempty"`
}

func NewEducationserviceImportTrainingCourseResult() *EducationserviceImportTrainingCourseResult {
	return &EducationserviceImportTrainingCourseResult{}
}

func (p *EducationserviceImportTrainingCourseResult) InitDefault() {
}

var EducationserviceImportTrainingCourseResult_Success_DEFAULT *ImportTrainingCourseResp

func (p *EducationserviceImportTrainingCourseResult) GetSuccess() (v *ImportTrainingCourseResp) {
	if !p.IsSetSuccess() {
		return EducationserviceImportTrainingCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceImportTrainingCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportTrainingCourseResp)
}

var fieldIDToName_EducationserviceImportTrainingCourseResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceImportTrainingCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceImportTrainingCourseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceImportTrainingCourseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportTrainingCourseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceImportTrainingCourseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportTrainingCourse_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceImportTrainingCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceImportTrainingCourseResult(%+v)", *p)

}

func (p *EducationserviceImportTrainingCourseResult) DeepEqual(ano *EducationserviceImportTrainingCourseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceImportTrainingCourseResult) Field0DeepEqual(src *ImportTrainingCourseResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfTrainingCourseListArgs struct {
	Req *GetSelfTrainingCourseListReq `thrift:"req,1" frugal:"1,default,GetSelfTrainingCourseListReq" json:"req"`
}

func NewEducationserviceGetSelfTrainingCourseListArgs() *EducationserviceGetSelfTrainingCourseListArgs {
	return &EducationserviceGetSelfTrainingCourseListArgs{}
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) InitDefault() {
}

var EducationserviceGetSelfTrainingCourseListArgs_Req_DEFAULT *GetSelfTrainingCourseListReq

func (p *EducationserviceGetSelfTrainingCourseListArgs) GetReq() (v *GetSelfTrainingCourseListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetSelfTrainingCourseListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetSelfTrainingCourseListArgs) SetReq(val *GetSelfTrainingCourseListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetSelfTrainingCourseListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfTrainingCourseListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSelfTrainingCourseListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfTrainingCourseList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfTrainingCourseListArgs(%+v)", *p)

}

func (p *EducationserviceGetSelfTrainingCourseListArgs) DeepEqual(ano *EducationserviceGetSelfTrainingCourseListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfTrainingCourseListArgs) Field1DeepEqual(src *GetSelfTrainingCourseListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetSelfTrainingCourseListResult struct {
	Success *GetSelfTrainingCourseListResp `thrift:"success,0,optional" frugal:"0,optional,GetSelfTrainingCourseListResp" json:"success,omitempty"`
}

func NewEducationserviceGetSelfTrainingCourseListResult() *EducationserviceGetSelfTrainingCourseListResult {
	return &EducationserviceGetSelfTrainingCourseListResult{}
}

func (p *EducationserviceGetSelfTrainingCourseListResult) InitDefault() {
}

var EducationserviceGetSelfTrainingCourseListResult_Success_DEFAULT *GetSelfTrainingCourseListResp

func (p *EducationserviceGetSelfTrainingCourseListResult) GetSuccess() (v *GetSelfTrainingCourseListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetSelfTrainingCourseListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetSelfTrainingCourseListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSelfTrainingCourseListResp)
}

var fieldIDToName_EducationserviceGetSelfTrainingCourseListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetSelfTrainingCourseListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetSelfTrainingCourseListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetSelfTrainingCourseListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSelfTrainingCourseListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetSelfTrainingCourseListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSelfTrainingCourseList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetSelfTrainingCourseListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetSelfTrainingCourseListResult(%+v)", *p)

}

func (p *EducationserviceGetSelfTrainingCourseListResult) DeepEqual(ano *EducationserviceGetSelfTrainingCourseListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetSelfTrainingCourseListResult) Field0DeepEqual(src *GetSelfTrainingCourseListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSyncFinalExamArgs struct {
	Req *SyncFinalExamReq `thrift:"req,1" frugal:"1,default,SyncFinalExamReq" json:"req"`
}

func NewEducationserviceSyncFinalExamArgs() *EducationserviceSyncFinalExamArgs {
	return &EducationserviceSyncFinalExamArgs{}
}

func (p *EducationserviceSyncFinalExamArgs) InitDefault() {
}

var EducationserviceSyncFinalExamArgs_Req_DEFAULT *SyncFinalExamReq

func (p *EducationserviceSyncFinalExamArgs) GetReq() (v *SyncFinalExamReq) {
	if !p.IsSetReq() {
		return EducationserviceSyncFinalExamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceSyncFinalExamArgs) SetReq(val *SyncFinalExamReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceSyncFinalExamArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceSyncFinalExamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceSyncFinalExamArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSyncFinalExamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSyncFinalExamReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceSyncFinalExamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncFinalExam_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSyncFinalExamArgs(%+v)", *p)

}

func (p *EducationserviceSyncFinalExamArgs) DeepEqual(ano *EducationserviceSyncFinalExamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceSyncFinalExamArgs) Field1DeepEqual(src *SyncFinalExamReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceSyncFinalExamResult struct {
	Success *SyncFinalExamResp `thrift:"success,0,optional" frugal:"0,optional,SyncFinalExamResp" json:"success,omitempty"`
}

func NewEducationserviceSyncFinalExamResult() *EducationserviceSyncFinalExamResult {
	return &EducationserviceSyncFinalExamResult{}
}

func (p *EducationserviceSyncFinalExamResult) InitDefault() {
}

var EducationserviceSyncFinalExamResult_Success_DEFAULT *SyncFinalExamResp

func (p *EducationserviceSyncFinalExamResult) GetSuccess() (v *SyncFinalExamResp) {
	if !p.IsSetSuccess() {
		return EducationserviceSyncFinalExamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceSyncFinalExamResult) SetSuccess(x interface{}) {
	p.Success = x.(*SyncFinalExamResp)
}

var fieldIDToName_EducationserviceSyncFinalExamResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceSyncFinalExamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceSyncFinalExamResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceSyncFinalExamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSyncFinalExamResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceSyncFinalExamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncFinalExam_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceSyncFinalExamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceSyncFinalExamResult(%+v)", *p)

}

func (p *EducationserviceSyncFinalExamResult) DeepEqual(ano *EducationserviceSyncFinalExamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceSyncFinalExamResult) Field0DeepEqual(src *SyncFinalExamResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamListArgs struct {
	Req *GetFinalExamListReq `thrift:"req,1" frugal:"1,default,GetFinalExamListReq" json:"req"`
}

func NewEducationserviceGetFinalExamListArgs() *EducationserviceGetFinalExamListArgs {
	return &EducationserviceGetFinalExamListArgs{}
}

func (p *EducationserviceGetFinalExamListArgs) InitDefault() {
}

var EducationserviceGetFinalExamListArgs_Req_DEFAULT *GetFinalExamListReq

func (p *EducationserviceGetFinalExamListArgs) GetReq() (v *GetFinalExamListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetFinalExamListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetFinalExamListArgs) SetReq(val *GetFinalExamListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetFinalExamListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetFinalExamListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetFinalExamListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetFinalExamListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamListArgs(%+v)", *p)

}

func (p *EducationserviceGetFinalExamListArgs) DeepEqual(ano *EducationserviceGetFinalExamListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamListArgs) Field1DeepEqual(src *GetFinalExamListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamListResult struct {
	Success *GetFinalExamListResp `thrift:"success,0,optional" frugal:"0,optional,GetFinalExamListResp" json:"success,omitempty"`
}

func NewEducationserviceGetFinalExamListResult() *EducationserviceGetFinalExamListResult {
	return &EducationserviceGetFinalExamListResult{}
}

func (p *EducationserviceGetFinalExamListResult) InitDefault() {
}

var EducationserviceGetFinalExamListResult_Success_DEFAULT *GetFinalExamListResp

func (p *EducationserviceGetFinalExamListResult) GetSuccess() (v *GetFinalExamListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetFinalExamListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetFinalExamListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFinalExamListResp)
}

var fieldIDToName_EducationserviceGetFinalExamListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetFinalExamListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetFinalExamListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetFinalExamListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamListResult(%+v)", *p)

}

func (p *EducationserviceGetFinalExamListResult) DeepEqual(ano *EducationserviceGetFinalExamListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamListResult) Field0DeepEqual(src *GetFinalExamListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamSubjectListArgs struct {
	Req *GetFinalExamSubjectListReq `thrift:"req,1" frugal:"1,default,GetFinalExamSubjectListReq" json:"req"`
}

func NewEducationserviceGetFinalExamSubjectListArgs() *EducationserviceGetFinalExamSubjectListArgs {
	return &EducationserviceGetFinalExamSubjectListArgs{}
}

func (p *EducationserviceGetFinalExamSubjectListArgs) InitDefault() {
}

var EducationserviceGetFinalExamSubjectListArgs_Req_DEFAULT *GetFinalExamSubjectListReq

func (p *EducationserviceGetFinalExamSubjectListArgs) GetReq() (v *GetFinalExamSubjectListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetFinalExamSubjectListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetFinalExamSubjectListArgs) SetReq(val *GetFinalExamSubjectListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetFinalExamSubjectListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetFinalExamSubjectListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetFinalExamSubjectListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamSubjectListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamSubjectListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetFinalExamSubjectListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamSubjectList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamSubjectListArgs(%+v)", *p)

}

func (p *EducationserviceGetFinalExamSubjectListArgs) DeepEqual(ano *EducationserviceGetFinalExamSubjectListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamSubjectListArgs) Field1DeepEqual(src *GetFinalExamSubjectListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamSubjectListResult struct {
	Success *GetFinalExamSubjectListResp `thrift:"success,0,optional" frugal:"0,optional,GetFinalExamSubjectListResp" json:"success,omitempty"`
}

func NewEducationserviceGetFinalExamSubjectListResult() *EducationserviceGetFinalExamSubjectListResult {
	return &EducationserviceGetFinalExamSubjectListResult{}
}

func (p *EducationserviceGetFinalExamSubjectListResult) InitDefault() {
}

var EducationserviceGetFinalExamSubjectListResult_Success_DEFAULT *GetFinalExamSubjectListResp

func (p *EducationserviceGetFinalExamSubjectListResult) GetSuccess() (v *GetFinalExamSubjectListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetFinalExamSubjectListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetFinalExamSubjectListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFinalExamSubjectListResp)
}

var fieldIDToName_EducationserviceGetFinalExamSubjectListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetFinalExamSubjectListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetFinalExamSubjectListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamSubjectListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamSubjectListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetFinalExamSubjectListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamSubjectList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamSubjectListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamSubjectListResult(%+v)", *p)

}

func (p *EducationserviceGetFinalExamSubjectListResult) DeepEqual(ano *EducationserviceGetFinalExamSubjectListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamSubjectListResult) Field0DeepEqual(src *GetFinalExamSubjectListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateFinalExamArgs struct {
	Req *UpdateFinalExamReq `thrift:"req,1" frugal:"1,default,UpdateFinalExamReq" json:"req"`
}

func NewEducationserviceUpdateFinalExamArgs() *EducationserviceUpdateFinalExamArgs {
	return &EducationserviceUpdateFinalExamArgs{}
}

func (p *EducationserviceUpdateFinalExamArgs) InitDefault() {
}

var EducationserviceUpdateFinalExamArgs_Req_DEFAULT *UpdateFinalExamReq

func (p *EducationserviceUpdateFinalExamArgs) GetReq() (v *UpdateFinalExamReq) {
	if !p.IsSetReq() {
		return EducationserviceUpdateFinalExamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceUpdateFinalExamArgs) SetReq(val *UpdateFinalExamReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceUpdateFinalExamArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceUpdateFinalExamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceUpdateFinalExamArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateFinalExamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateFinalExamReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceUpdateFinalExamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateFinalExam_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateFinalExamArgs(%+v)", *p)

}

func (p *EducationserviceUpdateFinalExamArgs) DeepEqual(ano *EducationserviceUpdateFinalExamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateFinalExamArgs) Field1DeepEqual(src *UpdateFinalExamReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceUpdateFinalExamResult struct {
	Success *UpdateFinalExamResp `thrift:"success,0,optional" frugal:"0,optional,UpdateFinalExamResp" json:"success,omitempty"`
}

func NewEducationserviceUpdateFinalExamResult() *EducationserviceUpdateFinalExamResult {
	return &EducationserviceUpdateFinalExamResult{}
}

func (p *EducationserviceUpdateFinalExamResult) InitDefault() {
}

var EducationserviceUpdateFinalExamResult_Success_DEFAULT *UpdateFinalExamResp

func (p *EducationserviceUpdateFinalExamResult) GetSuccess() (v *UpdateFinalExamResp) {
	if !p.IsSetSuccess() {
		return EducationserviceUpdateFinalExamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceUpdateFinalExamResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateFinalExamResp)
}

var fieldIDToName_EducationserviceUpdateFinalExamResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceUpdateFinalExamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceUpdateFinalExamResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceUpdateFinalExamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateFinalExamResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceUpdateFinalExamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateFinalExam_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceUpdateFinalExamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceUpdateFinalExamResult(%+v)", *p)

}

func (p *EducationserviceUpdateFinalExamResult) DeepEqual(ano *EducationserviceUpdateFinalExamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceUpdateFinalExamResult) Field0DeepEqual(src *UpdateFinalExamResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportFinalExamArgs struct {
	Req *ExportFinalExamReq `thrift:"req,1" frugal:"1,default,ExportFinalExamReq" json:"req"`
}

func NewEducationserviceExportFinalExamArgs() *EducationserviceExportFinalExamArgs {
	return &EducationserviceExportFinalExamArgs{}
}

func (p *EducationserviceExportFinalExamArgs) InitDefault() {
}

var EducationserviceExportFinalExamArgs_Req_DEFAULT *ExportFinalExamReq

func (p *EducationserviceExportFinalExamArgs) GetReq() (v *ExportFinalExamReq) {
	if !p.IsSetReq() {
		return EducationserviceExportFinalExamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceExportFinalExamArgs) SetReq(val *ExportFinalExamReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceExportFinalExamArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceExportFinalExamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceExportFinalExamArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportFinalExamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportFinalExamArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExportFinalExamReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceExportFinalExamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportFinalExam_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportFinalExamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceExportFinalExamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportFinalExamArgs(%+v)", *p)

}

func (p *EducationserviceExportFinalExamArgs) DeepEqual(ano *EducationserviceExportFinalExamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceExportFinalExamArgs) Field1DeepEqual(src *ExportFinalExamReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceExportFinalExamResult struct {
	Success *ExportFinalExamResp `thrift:"success,0,optional" frugal:"0,optional,ExportFinalExamResp" json:"success,omitempty"`
}

func NewEducationserviceExportFinalExamResult() *EducationserviceExportFinalExamResult {
	return &EducationserviceExportFinalExamResult{}
}

func (p *EducationserviceExportFinalExamResult) InitDefault() {
}

var EducationserviceExportFinalExamResult_Success_DEFAULT *ExportFinalExamResp

func (p *EducationserviceExportFinalExamResult) GetSuccess() (v *ExportFinalExamResp) {
	if !p.IsSetSuccess() {
		return EducationserviceExportFinalExamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceExportFinalExamResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExportFinalExamResp)
}

var fieldIDToName_EducationserviceExportFinalExamResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceExportFinalExamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceExportFinalExamResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceExportFinalExamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceExportFinalExamResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExportFinalExamResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceExportFinalExamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExportFinalExam_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceExportFinalExamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceExportFinalExamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceExportFinalExamResult(%+v)", *p)

}

func (p *EducationserviceExportFinalExamResult) DeepEqual(ano *EducationserviceExportFinalExamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceExportFinalExamResult) Field0DeepEqual(src *ExportFinalExamResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCalculateFinalExamWorkloadArgs struct {
	Req *CalculateFinalExamWorkloadReq `thrift:"req,1" frugal:"1,default,CalculateFinalExamWorkloadReq" json:"req"`
}

func NewEducationserviceCalculateFinalExamWorkloadArgs() *EducationserviceCalculateFinalExamWorkloadArgs {
	return &EducationserviceCalculateFinalExamWorkloadArgs{}
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) InitDefault() {
}

var EducationserviceCalculateFinalExamWorkloadArgs_Req_DEFAULT *CalculateFinalExamWorkloadReq

func (p *EducationserviceCalculateFinalExamWorkloadArgs) GetReq() (v *CalculateFinalExamWorkloadReq) {
	if !p.IsSetReq() {
		return EducationserviceCalculateFinalExamWorkloadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceCalculateFinalExamWorkloadArgs) SetReq(val *CalculateFinalExamWorkloadReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceCalculateFinalExamWorkloadArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCalculateFinalExamWorkloadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCalculateFinalExamWorkloadReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CalculateFinalExamWorkload_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCalculateFinalExamWorkloadArgs(%+v)", *p)

}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) DeepEqual(ano *EducationserviceCalculateFinalExamWorkloadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceCalculateFinalExamWorkloadArgs) Field1DeepEqual(src *CalculateFinalExamWorkloadReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceCalculateFinalExamWorkloadResult struct {
	Success *CalculateFinalExamWorkloadResp `thrift:"success,0,optional" frugal:"0,optional,CalculateFinalExamWorkloadResp" json:"success,omitempty"`
}

func NewEducationserviceCalculateFinalExamWorkloadResult() *EducationserviceCalculateFinalExamWorkloadResult {
	return &EducationserviceCalculateFinalExamWorkloadResult{}
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) InitDefault() {
}

var EducationserviceCalculateFinalExamWorkloadResult_Success_DEFAULT *CalculateFinalExamWorkloadResp

func (p *EducationserviceCalculateFinalExamWorkloadResult) GetSuccess() (v *CalculateFinalExamWorkloadResp) {
	if !p.IsSetSuccess() {
		return EducationserviceCalculateFinalExamWorkloadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceCalculateFinalExamWorkloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*CalculateFinalExamWorkloadResp)
}

var fieldIDToName_EducationserviceCalculateFinalExamWorkloadResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceCalculateFinalExamWorkloadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCalculateFinalExamWorkloadResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CalculateFinalExamWorkload_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceCalculateFinalExamWorkloadResult(%+v)", *p)

}

func (p *EducationserviceCalculateFinalExamWorkloadResult) DeepEqual(ano *EducationserviceCalculateFinalExamWorkloadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceCalculateFinalExamWorkloadResult) Field0DeepEqual(src *CalculateFinalExamWorkloadResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteFinalExamArgs struct {
	Req *DeleteFinalExamReq `thrift:"req,1" frugal:"1,default,DeleteFinalExamReq" json:"req"`
}

func NewEducationserviceDeleteFinalExamArgs() *EducationserviceDeleteFinalExamArgs {
	return &EducationserviceDeleteFinalExamArgs{}
}

func (p *EducationserviceDeleteFinalExamArgs) InitDefault() {
}

var EducationserviceDeleteFinalExamArgs_Req_DEFAULT *DeleteFinalExamReq

func (p *EducationserviceDeleteFinalExamArgs) GetReq() (v *DeleteFinalExamReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteFinalExamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteFinalExamArgs) SetReq(val *DeleteFinalExamReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteFinalExamArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteFinalExamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteFinalExamArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteFinalExamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteFinalExamReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteFinalExamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExam_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteFinalExamArgs(%+v)", *p)

}

func (p *EducationserviceDeleteFinalExamArgs) DeepEqual(ano *EducationserviceDeleteFinalExamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteFinalExamArgs) Field1DeepEqual(src *DeleteFinalExamReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteFinalExamResult struct {
	Success *DeleteFinalExamResp `thrift:"success,0,optional" frugal:"0,optional,DeleteFinalExamResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteFinalExamResult() *EducationserviceDeleteFinalExamResult {
	return &EducationserviceDeleteFinalExamResult{}
}

func (p *EducationserviceDeleteFinalExamResult) InitDefault() {
}

var EducationserviceDeleteFinalExamResult_Success_DEFAULT *DeleteFinalExamResp

func (p *EducationserviceDeleteFinalExamResult) GetSuccess() (v *DeleteFinalExamResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteFinalExamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteFinalExamResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteFinalExamResp)
}

var fieldIDToName_EducationserviceDeleteFinalExamResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteFinalExamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteFinalExamResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteFinalExamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteFinalExamResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteFinalExamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExam_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteFinalExamResult(%+v)", *p)

}

func (p *EducationserviceDeleteFinalExamResult) DeepEqual(ano *EducationserviceDeleteFinalExamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteFinalExamResult) Field0DeepEqual(src *DeleteFinalExamResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceFillFinalExamPaperArgs struct {
	Req *FillFinalExamPaperReq `thrift:"req,1" frugal:"1,default,FillFinalExamPaperReq" json:"req"`
}

func NewEducationserviceFillFinalExamPaperArgs() *EducationserviceFillFinalExamPaperArgs {
	return &EducationserviceFillFinalExamPaperArgs{}
}

func (p *EducationserviceFillFinalExamPaperArgs) InitDefault() {
}

var EducationserviceFillFinalExamPaperArgs_Req_DEFAULT *FillFinalExamPaperReq

func (p *EducationserviceFillFinalExamPaperArgs) GetReq() (v *FillFinalExamPaperReq) {
	if !p.IsSetReq() {
		return EducationserviceFillFinalExamPaperArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceFillFinalExamPaperArgs) SetReq(val *FillFinalExamPaperReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceFillFinalExamPaperArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceFillFinalExamPaperArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceFillFinalExamPaperArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceFillFinalExamPaperArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFillFinalExamPaperReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceFillFinalExamPaperArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillFinalExamPaper_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceFillFinalExamPaperArgs(%+v)", *p)

}

func (p *EducationserviceFillFinalExamPaperArgs) DeepEqual(ano *EducationserviceFillFinalExamPaperArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceFillFinalExamPaperArgs) Field1DeepEqual(src *FillFinalExamPaperReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceFillFinalExamPaperResult struct {
	Success *FillFinalExamPaperResp `thrift:"success,0,optional" frugal:"0,optional,FillFinalExamPaperResp" json:"success,omitempty"`
}

func NewEducationserviceFillFinalExamPaperResult() *EducationserviceFillFinalExamPaperResult {
	return &EducationserviceFillFinalExamPaperResult{}
}

func (p *EducationserviceFillFinalExamPaperResult) InitDefault() {
}

var EducationserviceFillFinalExamPaperResult_Success_DEFAULT *FillFinalExamPaperResp

func (p *EducationserviceFillFinalExamPaperResult) GetSuccess() (v *FillFinalExamPaperResp) {
	if !p.IsSetSuccess() {
		return EducationserviceFillFinalExamPaperResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceFillFinalExamPaperResult) SetSuccess(x interface{}) {
	p.Success = x.(*FillFinalExamPaperResp)
}

var fieldIDToName_EducationserviceFillFinalExamPaperResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceFillFinalExamPaperResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceFillFinalExamPaperResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceFillFinalExamPaperResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewFillFinalExamPaperResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceFillFinalExamPaperResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FillFinalExamPaper_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceFillFinalExamPaperResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceFillFinalExamPaperResult(%+v)", *p)

}

func (p *EducationserviceFillFinalExamPaperResult) DeepEqual(ano *EducationserviceFillFinalExamPaperResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceFillFinalExamPaperResult) Field0DeepEqual(src *FillFinalExamPaperResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamFillRecordListArgs struct {
	Req *GetFinalExamRecordListReq `thrift:"req,1" frugal:"1,default,GetFinalExamRecordListReq" json:"req"`
}

func NewEducationserviceGetFinalExamFillRecordListArgs() *EducationserviceGetFinalExamFillRecordListArgs {
	return &EducationserviceGetFinalExamFillRecordListArgs{}
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) InitDefault() {
}

var EducationserviceGetFinalExamFillRecordListArgs_Req_DEFAULT *GetFinalExamRecordListReq

func (p *EducationserviceGetFinalExamFillRecordListArgs) GetReq() (v *GetFinalExamRecordListReq) {
	if !p.IsSetReq() {
		return EducationserviceGetFinalExamFillRecordListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceGetFinalExamFillRecordListArgs) SetReq(val *GetFinalExamRecordListReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceGetFinalExamFillRecordListArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamFillRecordListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamRecordListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamFillRecordList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamFillRecordListArgs(%+v)", *p)

}

func (p *EducationserviceGetFinalExamFillRecordListArgs) DeepEqual(ano *EducationserviceGetFinalExamFillRecordListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamFillRecordListArgs) Field1DeepEqual(src *GetFinalExamRecordListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceGetFinalExamFillRecordListResult struct {
	Success *GetFinalExamRecordListResp `thrift:"success,0,optional" frugal:"0,optional,GetFinalExamRecordListResp" json:"success,omitempty"`
}

func NewEducationserviceGetFinalExamFillRecordListResult() *EducationserviceGetFinalExamFillRecordListResult {
	return &EducationserviceGetFinalExamFillRecordListResult{}
}

func (p *EducationserviceGetFinalExamFillRecordListResult) InitDefault() {
}

var EducationserviceGetFinalExamFillRecordListResult_Success_DEFAULT *GetFinalExamRecordListResp

func (p *EducationserviceGetFinalExamFillRecordListResult) GetSuccess() (v *GetFinalExamRecordListResp) {
	if !p.IsSetSuccess() {
		return EducationserviceGetFinalExamFillRecordListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceGetFinalExamFillRecordListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFinalExamRecordListResp)
}

var fieldIDToName_EducationserviceGetFinalExamFillRecordListResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceGetFinalExamFillRecordListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceGetFinalExamFillRecordListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceGetFinalExamFillRecordListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetFinalExamRecordListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceGetFinalExamFillRecordListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFinalExamFillRecordList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceGetFinalExamFillRecordListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceGetFinalExamFillRecordListResult(%+v)", *p)

}

func (p *EducationserviceGetFinalExamFillRecordListResult) DeepEqual(ano *EducationserviceGetFinalExamFillRecordListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceGetFinalExamFillRecordListResult) Field0DeepEqual(src *GetFinalExamRecordListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteFinalExamRecordArgs struct {
	Req *DeleteFinalExamRecordReq `thrift:"req,1" frugal:"1,default,DeleteFinalExamRecordReq" json:"req"`
}

func NewEducationserviceDeleteFinalExamRecordArgs() *EducationserviceDeleteFinalExamRecordArgs {
	return &EducationserviceDeleteFinalExamRecordArgs{}
}

func (p *EducationserviceDeleteFinalExamRecordArgs) InitDefault() {
}

var EducationserviceDeleteFinalExamRecordArgs_Req_DEFAULT *DeleteFinalExamRecordReq

func (p *EducationserviceDeleteFinalExamRecordArgs) GetReq() (v *DeleteFinalExamRecordReq) {
	if !p.IsSetReq() {
		return EducationserviceDeleteFinalExamRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EducationserviceDeleteFinalExamRecordArgs) SetReq(val *DeleteFinalExamRecordReq) {
	p.Req = val
}

var fieldIDToName_EducationserviceDeleteFinalExamRecordArgs = map[int16]string{
	1: "req",
}

func (p *EducationserviceDeleteFinalExamRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EducationserviceDeleteFinalExamRecordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteFinalExamRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteFinalExamRecordReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EducationserviceDeleteFinalExamRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExamRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteFinalExamRecordArgs(%+v)", *p)

}

func (p *EducationserviceDeleteFinalExamRecordArgs) DeepEqual(ano *EducationserviceDeleteFinalExamRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteFinalExamRecordArgs) Field1DeepEqual(src *DeleteFinalExamRecordReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EducationserviceDeleteFinalExamRecordResult struct {
	Success *DeleteFinalExamRecordResp `thrift:"success,0,optional" frugal:"0,optional,DeleteFinalExamRecordResp" json:"success,omitempty"`
}

func NewEducationserviceDeleteFinalExamRecordResult() *EducationserviceDeleteFinalExamRecordResult {
	return &EducationserviceDeleteFinalExamRecordResult{}
}

func (p *EducationserviceDeleteFinalExamRecordResult) InitDefault() {
}

var EducationserviceDeleteFinalExamRecordResult_Success_DEFAULT *DeleteFinalExamRecordResp

func (p *EducationserviceDeleteFinalExamRecordResult) GetSuccess() (v *DeleteFinalExamRecordResp) {
	if !p.IsSetSuccess() {
		return EducationserviceDeleteFinalExamRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EducationserviceDeleteFinalExamRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteFinalExamRecordResp)
}

var fieldIDToName_EducationserviceDeleteFinalExamRecordResult = map[int16]string{
	0: "success",
}

func (p *EducationserviceDeleteFinalExamRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EducationserviceDeleteFinalExamRecordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EducationserviceDeleteFinalExamRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteFinalExamRecordResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EducationserviceDeleteFinalExamRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteFinalExamRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EducationserviceDeleteFinalExamRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EducationserviceDeleteFinalExamRecordResult(%+v)", *p)

}

func (p *EducationserviceDeleteFinalExamRecordResult) DeepEqual(ano *EducationserviceDeleteFinalExamRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EducationserviceDeleteFinalExamRecordResult) Field0DeepEqual(src *DeleteFinalExamRecordResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by Kitex v0.11.3. DO NOT EDIT.

package educationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	education "github.com/cylScripter/openapi/education"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApp": kitex.NewMethodInfo(
		createAppHandler,
		newEducationserviceCreateAppArgs,
		newEducationserviceCreateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newEducationserviceLoginArgs,
		newEducationserviceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserList": kitex.NewMethodInfo(
		getUserListHandler,
		newEducationserviceGetUserListArgs,
		newEducationserviceGetUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newEducationserviceGetRoleListArgs,
		newEducationserviceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPermissionList": kitex.NewMethodInfo(
		getPermissionListHandler,
		newEducationserviceGetPermissionListArgs,
		newEducationserviceGetPermissionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenuList": kitex.NewMethodInfo(
		getMenuListHandler,
		newEducationserviceGetMenuListArgs,
		newEducationserviceGetMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	educationserviceServiceInfo                = NewServiceInfo()
	educationserviceServiceInfoForClient       = NewServiceInfoForClient()
	educationserviceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return educationserviceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "educationservice"
	handlerType := (*education.Educationservice)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "education",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateAppArgs)
	realResult := result.(*education.EducationserviceCreateAppResult)
	success, err := handler.(education.Educationservice).CreateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateAppArgs() interface{} {
	return education.NewEducationserviceCreateAppArgs()
}

func newEducationserviceCreateAppResult() interface{} {
	return education.NewEducationserviceCreateAppResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceLoginArgs)
	realResult := result.(*education.EducationserviceLoginResult)
	success, err := handler.(education.Educationservice).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceLoginArgs() interface{} {
	return education.NewEducationserviceLoginArgs()
}

func newEducationserviceLoginResult() interface{} {
	return education.NewEducationserviceLoginResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserListArgs)
	realResult := result.(*education.EducationserviceGetUserListResult)
	success, err := handler.(education.Educationservice).GetUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserListArgs() interface{} {
	return education.NewEducationserviceGetUserListArgs()
}

func newEducationserviceGetUserListResult() interface{} {
	return education.NewEducationserviceGetUserListResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetRoleListArgs)
	realResult := result.(*education.EducationserviceGetRoleListResult)
	success, err := handler.(education.Educationservice).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetRoleListArgs() interface{} {
	return education.NewEducationserviceGetRoleListArgs()
}

func newEducationserviceGetRoleListResult() interface{} {
	return education.NewEducationserviceGetRoleListResult()
}

func getPermissionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetPermissionListArgs)
	realResult := result.(*education.EducationserviceGetPermissionListResult)
	success, err := handler.(education.Educationservice).GetPermissionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetPermissionListArgs() interface{} {
	return education.NewEducationserviceGetPermissionListArgs()
}

func newEducationserviceGetPermissionListResult() interface{} {
	return education.NewEducationserviceGetPermissionListResult()
}

func getMenuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuListArgs)
	realResult := result.(*education.EducationserviceGetMenuListResult)
	success, err := handler.(education.Educationservice).GetMenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuListArgs() interface{} {
	return education.NewEducationserviceGetMenuListArgs()
}

func newEducationserviceGetMenuListResult() interface{} {
	return education.NewEducationserviceGetMenuListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApp(ctx context.Context, req *education.CreateAppReq) (r *education.CreateAppResp, err error) {
	var _args education.EducationserviceCreateAppArgs
	_args.Req = req
	var _result education.EducationserviceCreateAppResult
	if err = p.c.Call(ctx, "CreateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *education.LoginReq) (r *education.LoginResp, err error) {
	var _args education.EducationserviceLoginArgs
	_args.Req = req
	var _result education.EducationserviceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, req *education.GetUserListReq) (r *education.GetUserListResp, err error) {
	var _args education.EducationserviceGetUserListArgs
	_args.Req = req
	var _result education.EducationserviceGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *education.GetRoleListReq) (r *education.GetRoleListResp, err error) {
	var _args education.EducationserviceGetRoleListArgs
	_args.Req = req
	var _result education.EducationserviceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPermissionList(ctx context.Context, req *education.GetPermissionListReq) (r *education.GetPermissionListResp, err error) {
	var _args education.EducationserviceGetPermissionListArgs
	_args.Req = req
	var _result education.EducationserviceGetPermissionListResult
	if err = p.c.Call(ctx, "GetPermissionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenuList(ctx context.Context, req *education.GetMenuReq) (r *education.GetMenuResp, err error) {
	var _args education.EducationserviceGetMenuListArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuListResult
	if err = p.c.Call(ctx, "GetMenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

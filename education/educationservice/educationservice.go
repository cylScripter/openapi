// Code generated by Kitex v0.11.3. DO NOT EDIT.

package educationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	education "github.com/cylScripter/openapi/education"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApp": kitex.NewMethodInfo(
		createAppHandler,
		newEducationserviceCreateAppArgs,
		newEducationserviceCreateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newEducationserviceLoginArgs,
		newEducationserviceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateUser": kitex.NewMethodInfo(
		createUserHandler,
		newEducationserviceCreateUserArgs,
		newEducationserviceCreateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newEducationserviceCreateRoleArgs,
		newEducationserviceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteUser": kitex.NewMethodInfo(
		deleteUserHandler,
		newEducationserviceDeleteUserArgs,
		newEducationserviceDeleteUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserList": kitex.NewMethodInfo(
		getUserListHandler,
		newEducationserviceGetUserListArgs,
		newEducationserviceGetUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newEducationserviceGetRoleListArgs,
		newEducationserviceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreatePermission": kitex.NewMethodInfo(
		createPermissionHandler,
		newEducationserviceCreatePermissionArgs,
		newEducationserviceCreatePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPermissionList": kitex.NewMethodInfo(
		getPermissionListHandler,
		newEducationserviceGetPermissionListArgs,
		newEducationserviceGetPermissionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenu": kitex.NewMethodInfo(
		getMenuHandler,
		newEducationserviceGetMenuArgs,
		newEducationserviceGetMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenuList": kitex.NewMethodInfo(
		getMenuListHandler,
		newEducationserviceGetMenuListArgs,
		newEducationserviceGetMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newEducationserviceGetUserInfoArgs,
		newEducationserviceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetAuthCode": kitex.NewMethodInfo(
		getAuthCodeHandler,
		newEducationserviceGetAuthCodeArgs,
		newEducationserviceGetAuthCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetUserRole": kitex.NewMethodInfo(
		setUserRoleHandler,
		newEducationserviceSetUserRoleArgs,
		newEducationserviceSetUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRolePermission": kitex.NewMethodInfo(
		setRolePermissionHandler,
		newEducationserviceSetRolePermissionArgs,
		newEducationserviceSetRolePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRoleMenu": kitex.NewMethodInfo(
		setRoleMenuHandler,
		newEducationserviceSetRoleMenuArgs,
		newEducationserviceSetRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newEducationserviceCreateMenuArgs,
		newEducationserviceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateOffice": kitex.NewMethodInfo(
		createOfficeHandler,
		newEducationserviceCreateOfficeArgs,
		newEducationserviceCreateOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOfficeList": kitex.NewMethodInfo(
		getOfficeListHandler,
		newEducationserviceGetOfficeListArgs,
		newEducationserviceGetOfficeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetClassList": kitex.NewMethodInfo(
		getClassListHandler,
		newEducationserviceGetClassListArgs,
		newEducationserviceGetClassListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportCourseApply": kitex.NewMethodInfo(
		importCourseApplyHandler,
		newEducationserviceImportCourseApplyArgs,
		newEducationserviceImportCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCourseApplyList": kitex.NewMethodInfo(
		getCourseApplyListHandler,
		newEducationserviceGetCourseApplyListArgs,
		newEducationserviceGetCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelfCourseApplyList": kitex.NewMethodInfo(
		getSelfCourseApplyListHandler,
		newEducationserviceGetSelfCourseApplyListArgs,
		newEducationserviceGetSelfCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportUser": kitex.NewMethodInfo(
		importUserHandler,
		newEducationserviceImportUserArgs,
		newEducationserviceImportUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCourseApply": kitex.NewMethodInfo(
		deleteCourseApplyHandler,
		newEducationserviceDeleteCourseApplyArgs,
		newEducationserviceDeleteCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApproveCourseApply": kitex.NewMethodInfo(
		approveCourseApplyHandler,
		newEducationserviceApproveCourseApplyArgs,
		newEducationserviceApproveCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetCourseApply": kitex.NewMethodInfo(
		resetCourseApplyHandler,
		newEducationserviceResetCourseApplyArgs,
		newEducationserviceResetCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FillCourseApply": kitex.NewMethodInfo(
		fillCourseApplyHandler,
		newEducationserviceFillCourseApplyArgs,
		newEducationserviceFillCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportSelfCheckTable": kitex.NewMethodInfo(
		exportSelfCheckTableHandler,
		newEducationserviceExportSelfCheckTableArgs,
		newEducationserviceExportSelfCheckTableResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportResponsibility": kitex.NewMethodInfo(
		exportResponsibilityHandler,
		newEducationserviceExportResponsibilityArgs,
		newEducationserviceExportResponsibilityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportAllSelfCheckTable": kitex.NewMethodInfo(
		exportAllSelfCheckTableHandler,
		newEducationserviceExportAllSelfCheckTableArgs,
		newEducationserviceExportAllSelfCheckTableResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCourseApply": kitex.NewMethodInfo(
		updateCourseApplyHandler,
		newEducationserviceUpdateCourseApplyArgs,
		newEducationserviceUpdateCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportCourseApply": kitex.NewMethodInfo(
		exportCourseApplyHandler,
		newEducationserviceExportCourseApplyArgs,
		newEducationserviceExportCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportCourseApplySummary": kitex.NewMethodInfo(
		exportCourseApplySummaryHandler,
		newEducationserviceExportCourseApplySummaryArgs,
		newEducationserviceExportCourseApplySummaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"OneKeyApproveCourseApply": kitex.NewMethodInfo(
		oneKeyApproveCourseApplyHandler,
		newEducationserviceOneKeyApproveCourseApplyArgs,
		newEducationserviceOneKeyApproveCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelectData": kitex.NewMethodInfo(
		getSelectDataHandler,
		newEducationserviceGetSelectDataArgs,
		newEducationserviceGetSelectDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTeacherInfoList": kitex.NewMethodInfo(
		getTeacherInfoListHandler,
		newEducationserviceGetTeacherInfoListArgs,
		newEducationserviceGetTeacherInfoListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportTeacherInfo": kitex.NewMethodInfo(
		importTeacherInfoHandler,
		newEducationserviceImportTeacherInfoArgs,
		newEducationserviceImportTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTeacherInfo": kitex.NewMethodInfo(
		updateTeacherInfoHandler,
		newEducationserviceUpdateTeacherInfoArgs,
		newEducationserviceUpdateTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetTeacherInfoStatus": kitex.NewMethodInfo(
		setTeacherInfoStatusHandler,
		newEducationserviceSetTeacherInfoStatusArgs,
		newEducationserviceSetTeacherInfoStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"OderTeacherInfo": kitex.NewMethodInfo(
		oderTeacherInfoHandler,
		newEducationserviceOderTeacherInfoArgs,
		newEducationserviceOderTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenu": kitex.NewMethodInfo(
		updateMenuHandler,
		newEducationserviceUpdateMenuArgs,
		newEducationserviceUpdateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenu": kitex.NewMethodInfo(
		deleteMenuHandler,
		newEducationserviceDeleteMenuArgs,
		newEducationserviceDeleteMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetToken": kitex.NewMethodInfo(
		getTokenHandler,
		newEducationserviceGetTokenArgs,
		newEducationserviceGetTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newEducationserviceUpdateRoleArgs,
		newEducationserviceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRoleStatus": kitex.NewMethodInfo(
		setRoleStatusHandler,
		newEducationserviceSetRoleStatusArgs,
		newEducationserviceSetRoleStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newEducationserviceDeleteRoleArgs,
		newEducationserviceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteOffice": kitex.NewMethodInfo(
		deleteOfficeHandler,
		newEducationserviceDeleteOfficeArgs,
		newEducationserviceDeleteOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateOffice": kitex.NewMethodInfo(
		updateOfficeHandler,
		newEducationserviceUpdateOfficeArgs,
		newEducationserviceUpdateOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateUser": kitex.NewMethodInfo(
		updateUserHandler,
		newEducationserviceUpdateUserArgs,
		newEducationserviceUpdateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetPassword": kitex.NewMethodInfo(
		resetPasswordHandler,
		newEducationserviceResetPasswordArgs,
		newEducationserviceResetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteTeacherInfo": kitex.NewMethodInfo(
		deleteTeacherInfoHandler,
		newEducationserviceDeleteTeacherInfoArgs,
		newEducationserviceDeleteTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTeacherInfo": kitex.NewMethodInfo(
		createTeacherInfoHandler,
		newEducationserviceCreateTeacherInfoArgs,
		newEducationserviceCreateTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportTeacherInfo": kitex.NewMethodInfo(
		exportTeacherInfoHandler,
		newEducationserviceExportTeacherInfoArgs,
		newEducationserviceExportTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCourseList": kitex.NewMethodInfo(
		getCourseListHandler,
		newEducationserviceGetCourseListArgs,
		newEducationserviceGetCourseListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCourse": kitex.NewMethodInfo(
		deleteCourseHandler,
		newEducationserviceDeleteCourseArgs,
		newEducationserviceDeleteCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportCourse": kitex.NewMethodInfo(
		importCourseHandler,
		newEducationserviceImportCourseArgs,
		newEducationserviceImportCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCourse": kitex.NewMethodInfo(
		updateCourseHandler,
		newEducationserviceUpdateCourseArgs,
		newEducationserviceUpdateCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelfCourseList": kitex.NewMethodInfo(
		getSelfCourseListHandler,
		newEducationserviceGetSelfCourseListArgs,
		newEducationserviceGetSelfCourseListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCourseApplicationList": kitex.NewMethodInfo(
		getCourseApplicationListHandler,
		newEducationserviceGetCourseApplicationListArgs,
		newEducationserviceGetCourseApplicationListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCourseApplication": kitex.NewMethodInfo(
		deleteCourseApplicationHandler,
		newEducationserviceDeleteCourseApplicationArgs,
		newEducationserviceDeleteCourseApplicationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelfCourseApplicationList": kitex.NewMethodInfo(
		getSelfCourseApplicationListHandler,
		newEducationserviceGetSelfCourseApplicationListArgs,
		newEducationserviceGetSelfCourseApplicationListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AdjustCourseApplication": kitex.NewMethodInfo(
		adjustCourseApplicationHandler,
		newEducationserviceAdjustCourseApplicationArgs,
		newEducationserviceAdjustCourseApplicationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHolidayList": kitex.NewMethodInfo(
		getHolidayListHandler,
		newEducationserviceGetHolidayListArgs,
		newEducationserviceGetHolidayListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteHoliday": kitex.NewMethodInfo(
		deleteHolidayHandler,
		newEducationserviceDeleteHolidayArgs,
		newEducationserviceDeleteHolidayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateHoliday": kitex.NewMethodInfo(
		createHolidayHandler,
		newEducationserviceCreateHolidayArgs,
		newEducationserviceCreateHolidayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateHoliday": kitex.NewMethodInfo(
		updateHolidayHandler,
		newEducationserviceUpdateHolidayArgs,
		newEducationserviceUpdateHolidayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetInternshipList": kitex.NewMethodInfo(
		getInternshipListHandler,
		newEducationserviceGetInternshipListArgs,
		newEducationserviceGetInternshipListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteInternship": kitex.NewMethodInfo(
		deleteInternshipHandler,
		newEducationserviceDeleteInternshipArgs,
		newEducationserviceDeleteInternshipResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateInternship": kitex.NewMethodInfo(
		updateInternshipHandler,
		newEducationserviceUpdateInternshipArgs,
		newEducationserviceUpdateInternshipResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateInternship": kitex.NewMethodInfo(
		createInternshipHandler,
		newEducationserviceCreateInternshipArgs,
		newEducationserviceCreateInternshipResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportInternship": kitex.NewMethodInfo(
		importInternshipHandler,
		newEducationserviceImportInternshipArgs,
		newEducationserviceImportInternshipResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTrainingCourseList": kitex.NewMethodInfo(
		getTrainingCourseListHandler,
		newEducationserviceGetTrainingCourseListArgs,
		newEducationserviceGetTrainingCourseListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTrainingCourse": kitex.NewMethodInfo(
		createTrainingCourseHandler,
		newEducationserviceCreateTrainingCourseArgs,
		newEducationserviceCreateTrainingCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteTrainingCourse": kitex.NewMethodInfo(
		deleteTrainingCourseHandler,
		newEducationserviceDeleteTrainingCourseArgs,
		newEducationserviceDeleteTrainingCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTrainingCourse": kitex.NewMethodInfo(
		updateTrainingCourseHandler,
		newEducationserviceUpdateTrainingCourseArgs,
		newEducationserviceUpdateTrainingCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTrainingCourseTeacher": kitex.NewMethodInfo(
		updateTrainingCourseTeacherHandler,
		newEducationserviceUpdateTrainingCourseTeacherArgs,
		newEducationserviceUpdateTrainingCourseTeacherResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportTrainingCourse": kitex.NewMethodInfo(
		importTrainingCourseHandler,
		newEducationserviceImportTrainingCourseArgs,
		newEducationserviceImportTrainingCourseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelfTrainingCourseList": kitex.NewMethodInfo(
		getSelfTrainingCourseListHandler,
		newEducationserviceGetSelfTrainingCourseListArgs,
		newEducationserviceGetSelfTrainingCourseListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SyncFinalExam": kitex.NewMethodInfo(
		syncFinalExamHandler,
		newEducationserviceSyncFinalExamArgs,
		newEducationserviceSyncFinalExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFinalExamList": kitex.NewMethodInfo(
		getFinalExamListHandler,
		newEducationserviceGetFinalExamListArgs,
		newEducationserviceGetFinalExamListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFinalExamSubjectList": kitex.NewMethodInfo(
		getFinalExamSubjectListHandler,
		newEducationserviceGetFinalExamSubjectListArgs,
		newEducationserviceGetFinalExamSubjectListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateFinalExam": kitex.NewMethodInfo(
		updateFinalExamHandler,
		newEducationserviceUpdateFinalExamArgs,
		newEducationserviceUpdateFinalExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportFinalExam": kitex.NewMethodInfo(
		exportFinalExamHandler,
		newEducationserviceExportFinalExamArgs,
		newEducationserviceExportFinalExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CalculateFinalExamWorkload": kitex.NewMethodInfo(
		calculateFinalExamWorkloadHandler,
		newEducationserviceCalculateFinalExamWorkloadArgs,
		newEducationserviceCalculateFinalExamWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteFinalExam": kitex.NewMethodInfo(
		deleteFinalExamHandler,
		newEducationserviceDeleteFinalExamArgs,
		newEducationserviceDeleteFinalExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FillFinalExamPaper": kitex.NewMethodInfo(
		fillFinalExamPaperHandler,
		newEducationserviceFillFinalExamPaperArgs,
		newEducationserviceFillFinalExamPaperResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFinalExamFillRecordList": kitex.NewMethodInfo(
		getFinalExamFillRecordListHandler,
		newEducationserviceGetFinalExamFillRecordListArgs,
		newEducationserviceGetFinalExamFillRecordListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteFinalExamRecord": kitex.NewMethodInfo(
		deleteFinalExamRecordHandler,
		newEducationserviceDeleteFinalExamRecordArgs,
		newEducationserviceDeleteFinalExamRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateFinalExamRecord": kitex.NewMethodInfo(
		updateFinalExamRecordHandler,
		newEducationserviceUpdateFinalExamRecordArgs,
		newEducationserviceUpdateFinalExamRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFinalExamClassList": kitex.NewMethodInfo(
		getFinalExamClassListHandler,
		newEducationserviceGetFinalExamClassListArgs,
		newEducationserviceGetFinalExamClassListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetBeginExamList": kitex.NewMethodInfo(
		getBeginExamListHandler,
		newEducationserviceGetBeginExamListArgs,
		newEducationserviceGetBeginExamListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateBeginExam": kitex.NewMethodInfo(
		updateBeginExamHandler,
		newEducationserviceUpdateBeginExamArgs,
		newEducationserviceUpdateBeginExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateBeginExam": kitex.NewMethodInfo(
		createBeginExamHandler,
		newEducationserviceCreateBeginExamArgs,
		newEducationserviceCreateBeginExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteBeginExam": kitex.NewMethodInfo(
		deleteBeginExamHandler,
		newEducationserviceDeleteBeginExamArgs,
		newEducationserviceDeleteBeginExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportBeginExam": kitex.NewMethodInfo(
		importBeginExamHandler,
		newEducationserviceImportBeginExamArgs,
		newEducationserviceImportBeginExamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleMenu": kitex.NewMethodInfo(
		getRoleMenuHandler,
		newEducationserviceGetRoleMenuArgs,
		newEducationserviceGetRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadSign": kitex.NewMethodInfo(
		uploadSignHandler,
		newEducationserviceUploadSignArgs,
		newEducationserviceUploadSignResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDepartmentCourseApplyList": kitex.NewMethodInfo(
		getDepartmentCourseApplyListHandler,
		newEducationserviceGetDepartmentCourseApplyListArgs,
		newEducationserviceGetDepartmentCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdatePassword": kitex.NewMethodInfo(
		updatePasswordHandler,
		newEducationserviceUpdatePasswordArgs,
		newEducationserviceUpdatePasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserSign": kitex.NewMethodInfo(
		getUserSignHandler,
		newEducationserviceGetUserSignArgs,
		newEducationserviceGetUserSignResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportAllResponsibility": kitex.NewMethodInfo(
		exportAllResponsibilityHandler,
		newEducationserviceExportAllResponsibilityArgs,
		newEducationserviceExportAllResponsibilityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetWorkloadStatisticsRecordList": kitex.NewMethodInfo(
		getWorkloadStatisticsRecordListHandler,
		newEducationserviceGetWorkloadStatisticsRecordListArgs,
		newEducationserviceGetWorkloadStatisticsRecordListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteWorkloadStatisticsRecord": kitex.NewMethodInfo(
		deleteWorkloadStatisticsRecordHandler,
		newEducationserviceDeleteWorkloadStatisticsRecordArgs,
		newEducationserviceDeleteWorkloadStatisticsRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateWorkloadStatisticsRecord": kitex.NewMethodInfo(
		updateWorkloadStatisticsRecordHandler,
		newEducationserviceUpdateWorkloadStatisticsRecordArgs,
		newEducationserviceUpdateWorkloadStatisticsRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CalculateTheoreticalCourseWorkload": kitex.NewMethodInfo(
		calculateTheoreticalCourseWorkloadHandler,
		newEducationserviceCalculateTheoreticalCourseWorkloadArgs,
		newEducationserviceCalculateTheoreticalCourseWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CalculateTrainingCourseWorkload": kitex.NewMethodInfo(
		calculateTrainingCourseWorkloadHandler,
		newEducationserviceCalculateTrainingCourseWorkloadArgs,
		newEducationserviceCalculateTrainingCourseWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CalculateInternshipWorkload": kitex.NewMethodInfo(
		calculateInternshipWorkloadHandler,
		newEducationserviceCalculateInternshipWorkloadArgs,
		newEducationserviceCalculateInternshipWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CalculateBeginExamWorkload": kitex.NewMethodInfo(
		calculateBeginExamWorkloadHandler,
		newEducationserviceCalculateBeginExamWorkloadArgs,
		newEducationserviceCalculateBeginExamWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetWorkloadStatisticsList": kitex.NewMethodInfo(
		getWorkloadStatisticsListHandler,
		newEducationserviceGetWorkloadStatisticsListArgs,
		newEducationserviceGetWorkloadStatisticsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteWorkloadStatistics": kitex.NewMethodInfo(
		deleteWorkloadStatisticsHandler,
		newEducationserviceDeleteWorkloadStatisticsArgs,
		newEducationserviceDeleteWorkloadStatisticsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportWorkloadStatistics": kitex.NewMethodInfo(
		exportWorkloadStatisticsHandler,
		newEducationserviceExportWorkloadStatisticsArgs,
		newEducationserviceExportWorkloadStatisticsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTheoreticalCourseWorkload": kitex.NewMethodInfo(
		updateTheoreticalCourseWorkloadHandler,
		newEducationserviceUpdateTheoreticalCourseWorkloadArgs,
		newEducationserviceUpdateTheoreticalCourseWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTrainingCourseWorkload": kitex.NewMethodInfo(
		updateTrainingCourseWorkloadHandler,
		newEducationserviceUpdateTrainingCourseWorkloadArgs,
		newEducationserviceUpdateTrainingCourseWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateInternshipWorkload": kitex.NewMethodInfo(
		updateInternshipWorkloadHandler,
		newEducationserviceUpdateInternshipWorkloadArgs,
		newEducationserviceUpdateInternshipWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateBeginExamWorkload": kitex.NewMethodInfo(
		updateBeginExamWorkloadHandler,
		newEducationserviceUpdateBeginExamWorkloadArgs,
		newEducationserviceUpdateBeginExamWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportBeginExamWorkload": kitex.NewMethodInfo(
		exportBeginExamWorkloadHandler,
		newEducationserviceExportBeginExamWorkloadArgs,
		newEducationserviceExportBeginExamWorkloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateWorkloadStatistics": kitex.NewMethodInfo(
		createWorkloadStatisticsHandler,
		newEducationserviceCreateWorkloadStatisticsArgs,
		newEducationserviceCreateWorkloadStatisticsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateWorkloadStatistics": kitex.NewMethodInfo(
		updateWorkloadStatisticsHandler,
		newEducationserviceUpdateWorkloadStatisticsArgs,
		newEducationserviceUpdateWorkloadStatisticsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCollegeList": kitex.NewMethodInfo(
		getCollegeListHandler,
		newEducationserviceGetCollegeListArgs,
		newEducationserviceGetCollegeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	educationserviceServiceInfo                = NewServiceInfo()
	educationserviceServiceInfoForClient       = NewServiceInfoForClient()
	educationserviceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return educationserviceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "educationservice"
	handlerType := (*education.Educationservice)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "education",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateAppArgs)
	realResult := result.(*education.EducationserviceCreateAppResult)
	success, err := handler.(education.Educationservice).CreateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateAppArgs() interface{} {
	return education.NewEducationserviceCreateAppArgs()
}

func newEducationserviceCreateAppResult() interface{} {
	return education.NewEducationserviceCreateAppResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceLoginArgs)
	realResult := result.(*education.EducationserviceLoginResult)
	success, err := handler.(education.Educationservice).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceLoginArgs() interface{} {
	return education.NewEducationserviceLoginArgs()
}

func newEducationserviceLoginResult() interface{} {
	return education.NewEducationserviceLoginResult()
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateUserArgs)
	realResult := result.(*education.EducationserviceCreateUserResult)
	success, err := handler.(education.Educationservice).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateUserArgs() interface{} {
	return education.NewEducationserviceCreateUserArgs()
}

func newEducationserviceCreateUserResult() interface{} {
	return education.NewEducationserviceCreateUserResult()
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateRoleArgs)
	realResult := result.(*education.EducationserviceCreateRoleResult)
	success, err := handler.(education.Educationservice).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateRoleArgs() interface{} {
	return education.NewEducationserviceCreateRoleArgs()
}

func newEducationserviceCreateRoleResult() interface{} {
	return education.NewEducationserviceCreateRoleResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteUserArgs)
	realResult := result.(*education.EducationserviceDeleteUserResult)
	success, err := handler.(education.Educationservice).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteUserArgs() interface{} {
	return education.NewEducationserviceDeleteUserArgs()
}

func newEducationserviceDeleteUserResult() interface{} {
	return education.NewEducationserviceDeleteUserResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserListArgs)
	realResult := result.(*education.EducationserviceGetUserListResult)
	success, err := handler.(education.Educationservice).GetUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserListArgs() interface{} {
	return education.NewEducationserviceGetUserListArgs()
}

func newEducationserviceGetUserListResult() interface{} {
	return education.NewEducationserviceGetUserListResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetRoleListArgs)
	realResult := result.(*education.EducationserviceGetRoleListResult)
	success, err := handler.(education.Educationservice).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetRoleListArgs() interface{} {
	return education.NewEducationserviceGetRoleListArgs()
}

func newEducationserviceGetRoleListResult() interface{} {
	return education.NewEducationserviceGetRoleListResult()
}

func createPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreatePermissionArgs)
	realResult := result.(*education.EducationserviceCreatePermissionResult)
	success, err := handler.(education.Educationservice).CreatePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreatePermissionArgs() interface{} {
	return education.NewEducationserviceCreatePermissionArgs()
}

func newEducationserviceCreatePermissionResult() interface{} {
	return education.NewEducationserviceCreatePermissionResult()
}

func getPermissionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetPermissionListArgs)
	realResult := result.(*education.EducationserviceGetPermissionListResult)
	success, err := handler.(education.Educationservice).GetPermissionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetPermissionListArgs() interface{} {
	return education.NewEducationserviceGetPermissionListArgs()
}

func newEducationserviceGetPermissionListResult() interface{} {
	return education.NewEducationserviceGetPermissionListResult()
}

func getMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuArgs)
	realResult := result.(*education.EducationserviceGetMenuResult)
	success, err := handler.(education.Educationservice).GetMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuArgs() interface{} {
	return education.NewEducationserviceGetMenuArgs()
}

func newEducationserviceGetMenuResult() interface{} {
	return education.NewEducationserviceGetMenuResult()
}

func getMenuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuListArgs)
	realResult := result.(*education.EducationserviceGetMenuListResult)
	success, err := handler.(education.Educationservice).GetMenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuListArgs() interface{} {
	return education.NewEducationserviceGetMenuListArgs()
}

func newEducationserviceGetMenuListResult() interface{} {
	return education.NewEducationserviceGetMenuListResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserInfoArgs)
	realResult := result.(*education.EducationserviceGetUserInfoResult)
	success, err := handler.(education.Educationservice).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserInfoArgs() interface{} {
	return education.NewEducationserviceGetUserInfoArgs()
}

func newEducationserviceGetUserInfoResult() interface{} {
	return education.NewEducationserviceGetUserInfoResult()
}

func getAuthCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetAuthCodeArgs)
	realResult := result.(*education.EducationserviceGetAuthCodeResult)
	success, err := handler.(education.Educationservice).GetAuthCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetAuthCodeArgs() interface{} {
	return education.NewEducationserviceGetAuthCodeArgs()
}

func newEducationserviceGetAuthCodeResult() interface{} {
	return education.NewEducationserviceGetAuthCodeResult()
}

func setUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetUserRoleArgs)
	realResult := result.(*education.EducationserviceSetUserRoleResult)
	success, err := handler.(education.Educationservice).SetUserRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetUserRoleArgs() interface{} {
	return education.NewEducationserviceSetUserRoleArgs()
}

func newEducationserviceSetUserRoleResult() interface{} {
	return education.NewEducationserviceSetUserRoleResult()
}

func setRolePermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRolePermissionArgs)
	realResult := result.(*education.EducationserviceSetRolePermissionResult)
	success, err := handler.(education.Educationservice).SetRolePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRolePermissionArgs() interface{} {
	return education.NewEducationserviceSetRolePermissionArgs()
}

func newEducationserviceSetRolePermissionResult() interface{} {
	return education.NewEducationserviceSetRolePermissionResult()
}

func setRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRoleMenuArgs)
	realResult := result.(*education.EducationserviceSetRoleMenuResult)
	success, err := handler.(education.Educationservice).SetRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRoleMenuArgs() interface{} {
	return education.NewEducationserviceSetRoleMenuArgs()
}

func newEducationserviceSetRoleMenuResult() interface{} {
	return education.NewEducationserviceSetRoleMenuResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateMenuArgs)
	realResult := result.(*education.EducationserviceCreateMenuResult)
	success, err := handler.(education.Educationservice).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateMenuArgs() interface{} {
	return education.NewEducationserviceCreateMenuArgs()
}

func newEducationserviceCreateMenuResult() interface{} {
	return education.NewEducationserviceCreateMenuResult()
}

func createOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateOfficeArgs)
	realResult := result.(*education.EducationserviceCreateOfficeResult)
	success, err := handler.(education.Educationservice).CreateOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateOfficeArgs() interface{} {
	return education.NewEducationserviceCreateOfficeArgs()
}

func newEducationserviceCreateOfficeResult() interface{} {
	return education.NewEducationserviceCreateOfficeResult()
}

func getOfficeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetOfficeListArgs)
	realResult := result.(*education.EducationserviceGetOfficeListResult)
	success, err := handler.(education.Educationservice).GetOfficeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetOfficeListArgs() interface{} {
	return education.NewEducationserviceGetOfficeListArgs()
}

func newEducationserviceGetOfficeListResult() interface{} {
	return education.NewEducationserviceGetOfficeListResult()
}

func getClassListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetClassListArgs)
	realResult := result.(*education.EducationserviceGetClassListResult)
	success, err := handler.(education.Educationservice).GetClassList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetClassListArgs() interface{} {
	return education.NewEducationserviceGetClassListArgs()
}

func newEducationserviceGetClassListResult() interface{} {
	return education.NewEducationserviceGetClassListResult()
}

func importCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportCourseApplyArgs)
	realResult := result.(*education.EducationserviceImportCourseApplyResult)
	success, err := handler.(education.Educationservice).ImportCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportCourseApplyArgs() interface{} {
	return education.NewEducationserviceImportCourseApplyArgs()
}

func newEducationserviceImportCourseApplyResult() interface{} {
	return education.NewEducationserviceImportCourseApplyResult()
}

func getCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetCourseApplyListArgs()
}

func newEducationserviceGetCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetCourseApplyListResult()
}

func getSelfCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelfCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetSelfCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetSelfCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelfCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetSelfCourseApplyListArgs()
}

func newEducationserviceGetSelfCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetSelfCourseApplyListResult()
}

func importUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportUserArgs)
	realResult := result.(*education.EducationserviceImportUserResult)
	success, err := handler.(education.Educationservice).ImportUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportUserArgs() interface{} {
	return education.NewEducationserviceImportUserArgs()
}

func newEducationserviceImportUserResult() interface{} {
	return education.NewEducationserviceImportUserResult()
}

func deleteCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteCourseApplyArgs)
	realResult := result.(*education.EducationserviceDeleteCourseApplyResult)
	success, err := handler.(education.Educationservice).DeleteCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteCourseApplyArgs() interface{} {
	return education.NewEducationserviceDeleteCourseApplyArgs()
}

func newEducationserviceDeleteCourseApplyResult() interface{} {
	return education.NewEducationserviceDeleteCourseApplyResult()
}

func approveCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceApproveCourseApplyArgs)
	realResult := result.(*education.EducationserviceApproveCourseApplyResult)
	success, err := handler.(education.Educationservice).ApproveCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceApproveCourseApplyArgs() interface{} {
	return education.NewEducationserviceApproveCourseApplyArgs()
}

func newEducationserviceApproveCourseApplyResult() interface{} {
	return education.NewEducationserviceApproveCourseApplyResult()
}

func resetCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceResetCourseApplyArgs)
	realResult := result.(*education.EducationserviceResetCourseApplyResult)
	success, err := handler.(education.Educationservice).ResetCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceResetCourseApplyArgs() interface{} {
	return education.NewEducationserviceResetCourseApplyArgs()
}

func newEducationserviceResetCourseApplyResult() interface{} {
	return education.NewEducationserviceResetCourseApplyResult()
}

func fillCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceFillCourseApplyArgs)
	realResult := result.(*education.EducationserviceFillCourseApplyResult)
	success, err := handler.(education.Educationservice).FillCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceFillCourseApplyArgs() interface{} {
	return education.NewEducationserviceFillCourseApplyArgs()
}

func newEducationserviceFillCourseApplyResult() interface{} {
	return education.NewEducationserviceFillCourseApplyResult()
}

func exportSelfCheckTableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportSelfCheckTableArgs)
	realResult := result.(*education.EducationserviceExportSelfCheckTableResult)
	success, err := handler.(education.Educationservice).ExportSelfCheckTable(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportSelfCheckTableArgs() interface{} {
	return education.NewEducationserviceExportSelfCheckTableArgs()
}

func newEducationserviceExportSelfCheckTableResult() interface{} {
	return education.NewEducationserviceExportSelfCheckTableResult()
}

func exportResponsibilityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportResponsibilityArgs)
	realResult := result.(*education.EducationserviceExportResponsibilityResult)
	success, err := handler.(education.Educationservice).ExportResponsibility(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportResponsibilityArgs() interface{} {
	return education.NewEducationserviceExportResponsibilityArgs()
}

func newEducationserviceExportResponsibilityResult() interface{} {
	return education.NewEducationserviceExportResponsibilityResult()
}

func exportAllSelfCheckTableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportAllSelfCheckTableArgs)
	realResult := result.(*education.EducationserviceExportAllSelfCheckTableResult)
	success, err := handler.(education.Educationservice).ExportAllSelfCheckTable(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportAllSelfCheckTableArgs() interface{} {
	return education.NewEducationserviceExportAllSelfCheckTableArgs()
}

func newEducationserviceExportAllSelfCheckTableResult() interface{} {
	return education.NewEducationserviceExportAllSelfCheckTableResult()
}

func updateCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateCourseApplyArgs)
	realResult := result.(*education.EducationserviceUpdateCourseApplyResult)
	success, err := handler.(education.Educationservice).UpdateCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateCourseApplyArgs() interface{} {
	return education.NewEducationserviceUpdateCourseApplyArgs()
}

func newEducationserviceUpdateCourseApplyResult() interface{} {
	return education.NewEducationserviceUpdateCourseApplyResult()
}

func exportCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportCourseApplyArgs)
	realResult := result.(*education.EducationserviceExportCourseApplyResult)
	success, err := handler.(education.Educationservice).ExportCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportCourseApplyArgs() interface{} {
	return education.NewEducationserviceExportCourseApplyArgs()
}

func newEducationserviceExportCourseApplyResult() interface{} {
	return education.NewEducationserviceExportCourseApplyResult()
}

func exportCourseApplySummaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportCourseApplySummaryArgs)
	realResult := result.(*education.EducationserviceExportCourseApplySummaryResult)
	success, err := handler.(education.Educationservice).ExportCourseApplySummary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportCourseApplySummaryArgs() interface{} {
	return education.NewEducationserviceExportCourseApplySummaryArgs()
}

func newEducationserviceExportCourseApplySummaryResult() interface{} {
	return education.NewEducationserviceExportCourseApplySummaryResult()
}

func oneKeyApproveCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceOneKeyApproveCourseApplyArgs)
	realResult := result.(*education.EducationserviceOneKeyApproveCourseApplyResult)
	success, err := handler.(education.Educationservice).OneKeyApproveCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceOneKeyApproveCourseApplyArgs() interface{} {
	return education.NewEducationserviceOneKeyApproveCourseApplyArgs()
}

func newEducationserviceOneKeyApproveCourseApplyResult() interface{} {
	return education.NewEducationserviceOneKeyApproveCourseApplyResult()
}

func getSelectDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelectDataArgs)
	realResult := result.(*education.EducationserviceGetSelectDataResult)
	success, err := handler.(education.Educationservice).GetSelectData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelectDataArgs() interface{} {
	return education.NewEducationserviceGetSelectDataArgs()
}

func newEducationserviceGetSelectDataResult() interface{} {
	return education.NewEducationserviceGetSelectDataResult()
}

func getTeacherInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetTeacherInfoListArgs)
	realResult := result.(*education.EducationserviceGetTeacherInfoListResult)
	success, err := handler.(education.Educationservice).GetTeacherInfoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetTeacherInfoListArgs() interface{} {
	return education.NewEducationserviceGetTeacherInfoListArgs()
}

func newEducationserviceGetTeacherInfoListResult() interface{} {
	return education.NewEducationserviceGetTeacherInfoListResult()
}

func importTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportTeacherInfoArgs)
	realResult := result.(*education.EducationserviceImportTeacherInfoResult)
	success, err := handler.(education.Educationservice).ImportTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportTeacherInfoArgs() interface{} {
	return education.NewEducationserviceImportTeacherInfoArgs()
}

func newEducationserviceImportTeacherInfoResult() interface{} {
	return education.NewEducationserviceImportTeacherInfoResult()
}

func updateTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTeacherInfoArgs)
	realResult := result.(*education.EducationserviceUpdateTeacherInfoResult)
	success, err := handler.(education.Educationservice).UpdateTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTeacherInfoArgs() interface{} {
	return education.NewEducationserviceUpdateTeacherInfoArgs()
}

func newEducationserviceUpdateTeacherInfoResult() interface{} {
	return education.NewEducationserviceUpdateTeacherInfoResult()
}

func setTeacherInfoStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetTeacherInfoStatusArgs)
	realResult := result.(*education.EducationserviceSetTeacherInfoStatusResult)
	success, err := handler.(education.Educationservice).SetTeacherInfoStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetTeacherInfoStatusArgs() interface{} {
	return education.NewEducationserviceSetTeacherInfoStatusArgs()
}

func newEducationserviceSetTeacherInfoStatusResult() interface{} {
	return education.NewEducationserviceSetTeacherInfoStatusResult()
}

func oderTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceOderTeacherInfoArgs)
	realResult := result.(*education.EducationserviceOderTeacherInfoResult)
	success, err := handler.(education.Educationservice).OderTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceOderTeacherInfoArgs() interface{} {
	return education.NewEducationserviceOderTeacherInfoArgs()
}

func newEducationserviceOderTeacherInfoResult() interface{} {
	return education.NewEducationserviceOderTeacherInfoResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateMenuArgs)
	realResult := result.(*education.EducationserviceUpdateMenuResult)
	success, err := handler.(education.Educationservice).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateMenuArgs() interface{} {
	return education.NewEducationserviceUpdateMenuArgs()
}

func newEducationserviceUpdateMenuResult() interface{} {
	return education.NewEducationserviceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteMenuArgs)
	realResult := result.(*education.EducationserviceDeleteMenuResult)
	success, err := handler.(education.Educationservice).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteMenuArgs() interface{} {
	return education.NewEducationserviceDeleteMenuArgs()
}

func newEducationserviceDeleteMenuResult() interface{} {
	return education.NewEducationserviceDeleteMenuResult()
}

func getTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetTokenArgs)
	realResult := result.(*education.EducationserviceGetTokenResult)
	success, err := handler.(education.Educationservice).GetToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetTokenArgs() interface{} {
	return education.NewEducationserviceGetTokenArgs()
}

func newEducationserviceGetTokenResult() interface{} {
	return education.NewEducationserviceGetTokenResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateRoleArgs)
	realResult := result.(*education.EducationserviceUpdateRoleResult)
	success, err := handler.(education.Educationservice).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateRoleArgs() interface{} {
	return education.NewEducationserviceUpdateRoleArgs()
}

func newEducationserviceUpdateRoleResult() interface{} {
	return education.NewEducationserviceUpdateRoleResult()
}

func setRoleStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRoleStatusArgs)
	realResult := result.(*education.EducationserviceSetRoleStatusResult)
	success, err := handler.(education.Educationservice).SetRoleStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRoleStatusArgs() interface{} {
	return education.NewEducationserviceSetRoleStatusArgs()
}

func newEducationserviceSetRoleStatusResult() interface{} {
	return education.NewEducationserviceSetRoleStatusResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteRoleArgs)
	realResult := result.(*education.EducationserviceDeleteRoleResult)
	success, err := handler.(education.Educationservice).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteRoleArgs() interface{} {
	return education.NewEducationserviceDeleteRoleArgs()
}

func newEducationserviceDeleteRoleResult() interface{} {
	return education.NewEducationserviceDeleteRoleResult()
}

func deleteOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteOfficeArgs)
	realResult := result.(*education.EducationserviceDeleteOfficeResult)
	success, err := handler.(education.Educationservice).DeleteOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteOfficeArgs() interface{} {
	return education.NewEducationserviceDeleteOfficeArgs()
}

func newEducationserviceDeleteOfficeResult() interface{} {
	return education.NewEducationserviceDeleteOfficeResult()
}

func updateOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateOfficeArgs)
	realResult := result.(*education.EducationserviceUpdateOfficeResult)
	success, err := handler.(education.Educationservice).UpdateOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateOfficeArgs() interface{} {
	return education.NewEducationserviceUpdateOfficeArgs()
}

func newEducationserviceUpdateOfficeResult() interface{} {
	return education.NewEducationserviceUpdateOfficeResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateUserArgs)
	realResult := result.(*education.EducationserviceUpdateUserResult)
	success, err := handler.(education.Educationservice).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateUserArgs() interface{} {
	return education.NewEducationserviceUpdateUserArgs()
}

func newEducationserviceUpdateUserResult() interface{} {
	return education.NewEducationserviceUpdateUserResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceResetPasswordArgs)
	realResult := result.(*education.EducationserviceResetPasswordResult)
	success, err := handler.(education.Educationservice).ResetPassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceResetPasswordArgs() interface{} {
	return education.NewEducationserviceResetPasswordArgs()
}

func newEducationserviceResetPasswordResult() interface{} {
	return education.NewEducationserviceResetPasswordResult()
}

func deleteTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteTeacherInfoArgs)
	realResult := result.(*education.EducationserviceDeleteTeacherInfoResult)
	success, err := handler.(education.Educationservice).DeleteTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteTeacherInfoArgs() interface{} {
	return education.NewEducationserviceDeleteTeacherInfoArgs()
}

func newEducationserviceDeleteTeacherInfoResult() interface{} {
	return education.NewEducationserviceDeleteTeacherInfoResult()
}

func createTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateTeacherInfoArgs)
	realResult := result.(*education.EducationserviceCreateTeacherInfoResult)
	success, err := handler.(education.Educationservice).CreateTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateTeacherInfoArgs() interface{} {
	return education.NewEducationserviceCreateTeacherInfoArgs()
}

func newEducationserviceCreateTeacherInfoResult() interface{} {
	return education.NewEducationserviceCreateTeacherInfoResult()
}

func exportTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportTeacherInfoArgs)
	realResult := result.(*education.EducationserviceExportTeacherInfoResult)
	success, err := handler.(education.Educationservice).ExportTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportTeacherInfoArgs() interface{} {
	return education.NewEducationserviceExportTeacherInfoArgs()
}

func newEducationserviceExportTeacherInfoResult() interface{} {
	return education.NewEducationserviceExportTeacherInfoResult()
}

func getCourseListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCourseListArgs)
	realResult := result.(*education.EducationserviceGetCourseListResult)
	success, err := handler.(education.Educationservice).GetCourseList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCourseListArgs() interface{} {
	return education.NewEducationserviceGetCourseListArgs()
}

func newEducationserviceGetCourseListResult() interface{} {
	return education.NewEducationserviceGetCourseListResult()
}

func deleteCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteCourseArgs)
	realResult := result.(*education.EducationserviceDeleteCourseResult)
	success, err := handler.(education.Educationservice).DeleteCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteCourseArgs() interface{} {
	return education.NewEducationserviceDeleteCourseArgs()
}

func newEducationserviceDeleteCourseResult() interface{} {
	return education.NewEducationserviceDeleteCourseResult()
}

func importCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportCourseArgs)
	realResult := result.(*education.EducationserviceImportCourseResult)
	success, err := handler.(education.Educationservice).ImportCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportCourseArgs() interface{} {
	return education.NewEducationserviceImportCourseArgs()
}

func newEducationserviceImportCourseResult() interface{} {
	return education.NewEducationserviceImportCourseResult()
}

func updateCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateCourseArgs)
	realResult := result.(*education.EducationserviceUpdateCourseResult)
	success, err := handler.(education.Educationservice).UpdateCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateCourseArgs() interface{} {
	return education.NewEducationserviceUpdateCourseArgs()
}

func newEducationserviceUpdateCourseResult() interface{} {
	return education.NewEducationserviceUpdateCourseResult()
}

func getSelfCourseListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelfCourseListArgs)
	realResult := result.(*education.EducationserviceGetSelfCourseListResult)
	success, err := handler.(education.Educationservice).GetSelfCourseList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelfCourseListArgs() interface{} {
	return education.NewEducationserviceGetSelfCourseListArgs()
}

func newEducationserviceGetSelfCourseListResult() interface{} {
	return education.NewEducationserviceGetSelfCourseListResult()
}

func getCourseApplicationListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCourseApplicationListArgs)
	realResult := result.(*education.EducationserviceGetCourseApplicationListResult)
	success, err := handler.(education.Educationservice).GetCourseApplicationList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCourseApplicationListArgs() interface{} {
	return education.NewEducationserviceGetCourseApplicationListArgs()
}

func newEducationserviceGetCourseApplicationListResult() interface{} {
	return education.NewEducationserviceGetCourseApplicationListResult()
}

func deleteCourseApplicationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteCourseApplicationArgs)
	realResult := result.(*education.EducationserviceDeleteCourseApplicationResult)
	success, err := handler.(education.Educationservice).DeleteCourseApplication(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteCourseApplicationArgs() interface{} {
	return education.NewEducationserviceDeleteCourseApplicationArgs()
}

func newEducationserviceDeleteCourseApplicationResult() interface{} {
	return education.NewEducationserviceDeleteCourseApplicationResult()
}

func getSelfCourseApplicationListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelfCourseApplicationListArgs)
	realResult := result.(*education.EducationserviceGetSelfCourseApplicationListResult)
	success, err := handler.(education.Educationservice).GetSelfCourseApplicationList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelfCourseApplicationListArgs() interface{} {
	return education.NewEducationserviceGetSelfCourseApplicationListArgs()
}

func newEducationserviceGetSelfCourseApplicationListResult() interface{} {
	return education.NewEducationserviceGetSelfCourseApplicationListResult()
}

func adjustCourseApplicationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceAdjustCourseApplicationArgs)
	realResult := result.(*education.EducationserviceAdjustCourseApplicationResult)
	success, err := handler.(education.Educationservice).AdjustCourseApplication(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceAdjustCourseApplicationArgs() interface{} {
	return education.NewEducationserviceAdjustCourseApplicationArgs()
}

func newEducationserviceAdjustCourseApplicationResult() interface{} {
	return education.NewEducationserviceAdjustCourseApplicationResult()
}

func getHolidayListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetHolidayListArgs)
	realResult := result.(*education.EducationserviceGetHolidayListResult)
	success, err := handler.(education.Educationservice).GetHolidayList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetHolidayListArgs() interface{} {
	return education.NewEducationserviceGetHolidayListArgs()
}

func newEducationserviceGetHolidayListResult() interface{} {
	return education.NewEducationserviceGetHolidayListResult()
}

func deleteHolidayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteHolidayArgs)
	realResult := result.(*education.EducationserviceDeleteHolidayResult)
	success, err := handler.(education.Educationservice).DeleteHoliday(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteHolidayArgs() interface{} {
	return education.NewEducationserviceDeleteHolidayArgs()
}

func newEducationserviceDeleteHolidayResult() interface{} {
	return education.NewEducationserviceDeleteHolidayResult()
}

func createHolidayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateHolidayArgs)
	realResult := result.(*education.EducationserviceCreateHolidayResult)
	success, err := handler.(education.Educationservice).CreateHoliday(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateHolidayArgs() interface{} {
	return education.NewEducationserviceCreateHolidayArgs()
}

func newEducationserviceCreateHolidayResult() interface{} {
	return education.NewEducationserviceCreateHolidayResult()
}

func updateHolidayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateHolidayArgs)
	realResult := result.(*education.EducationserviceUpdateHolidayResult)
	success, err := handler.(education.Educationservice).UpdateHoliday(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateHolidayArgs() interface{} {
	return education.NewEducationserviceUpdateHolidayArgs()
}

func newEducationserviceUpdateHolidayResult() interface{} {
	return education.NewEducationserviceUpdateHolidayResult()
}

func getInternshipListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetInternshipListArgs)
	realResult := result.(*education.EducationserviceGetInternshipListResult)
	success, err := handler.(education.Educationservice).GetInternshipList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetInternshipListArgs() interface{} {
	return education.NewEducationserviceGetInternshipListArgs()
}

func newEducationserviceGetInternshipListResult() interface{} {
	return education.NewEducationserviceGetInternshipListResult()
}

func deleteInternshipHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteInternshipArgs)
	realResult := result.(*education.EducationserviceDeleteInternshipResult)
	success, err := handler.(education.Educationservice).DeleteInternship(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteInternshipArgs() interface{} {
	return education.NewEducationserviceDeleteInternshipArgs()
}

func newEducationserviceDeleteInternshipResult() interface{} {
	return education.NewEducationserviceDeleteInternshipResult()
}

func updateInternshipHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateInternshipArgs)
	realResult := result.(*education.EducationserviceUpdateInternshipResult)
	success, err := handler.(education.Educationservice).UpdateInternship(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateInternshipArgs() interface{} {
	return education.NewEducationserviceUpdateInternshipArgs()
}

func newEducationserviceUpdateInternshipResult() interface{} {
	return education.NewEducationserviceUpdateInternshipResult()
}

func createInternshipHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateInternshipArgs)
	realResult := result.(*education.EducationserviceCreateInternshipResult)
	success, err := handler.(education.Educationservice).CreateInternship(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateInternshipArgs() interface{} {
	return education.NewEducationserviceCreateInternshipArgs()
}

func newEducationserviceCreateInternshipResult() interface{} {
	return education.NewEducationserviceCreateInternshipResult()
}

func importInternshipHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportInternshipArgs)
	realResult := result.(*education.EducationserviceImportInternshipResult)
	success, err := handler.(education.Educationservice).ImportInternship(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportInternshipArgs() interface{} {
	return education.NewEducationserviceImportInternshipArgs()
}

func newEducationserviceImportInternshipResult() interface{} {
	return education.NewEducationserviceImportInternshipResult()
}

func getTrainingCourseListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetTrainingCourseListArgs)
	realResult := result.(*education.EducationserviceGetTrainingCourseListResult)
	success, err := handler.(education.Educationservice).GetTrainingCourseList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetTrainingCourseListArgs() interface{} {
	return education.NewEducationserviceGetTrainingCourseListArgs()
}

func newEducationserviceGetTrainingCourseListResult() interface{} {
	return education.NewEducationserviceGetTrainingCourseListResult()
}

func createTrainingCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateTrainingCourseArgs)
	realResult := result.(*education.EducationserviceCreateTrainingCourseResult)
	success, err := handler.(education.Educationservice).CreateTrainingCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateTrainingCourseArgs() interface{} {
	return education.NewEducationserviceCreateTrainingCourseArgs()
}

func newEducationserviceCreateTrainingCourseResult() interface{} {
	return education.NewEducationserviceCreateTrainingCourseResult()
}

func deleteTrainingCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteTrainingCourseArgs)
	realResult := result.(*education.EducationserviceDeleteTrainingCourseResult)
	success, err := handler.(education.Educationservice).DeleteTrainingCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteTrainingCourseArgs() interface{} {
	return education.NewEducationserviceDeleteTrainingCourseArgs()
}

func newEducationserviceDeleteTrainingCourseResult() interface{} {
	return education.NewEducationserviceDeleteTrainingCourseResult()
}

func updateTrainingCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTrainingCourseArgs)
	realResult := result.(*education.EducationserviceUpdateTrainingCourseResult)
	success, err := handler.(education.Educationservice).UpdateTrainingCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTrainingCourseArgs() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseArgs()
}

func newEducationserviceUpdateTrainingCourseResult() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseResult()
}

func updateTrainingCourseTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTrainingCourseTeacherArgs)
	realResult := result.(*education.EducationserviceUpdateTrainingCourseTeacherResult)
	success, err := handler.(education.Educationservice).UpdateTrainingCourseTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTrainingCourseTeacherArgs() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseTeacherArgs()
}

func newEducationserviceUpdateTrainingCourseTeacherResult() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseTeacherResult()
}

func importTrainingCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportTrainingCourseArgs)
	realResult := result.(*education.EducationserviceImportTrainingCourseResult)
	success, err := handler.(education.Educationservice).ImportTrainingCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportTrainingCourseArgs() interface{} {
	return education.NewEducationserviceImportTrainingCourseArgs()
}

func newEducationserviceImportTrainingCourseResult() interface{} {
	return education.NewEducationserviceImportTrainingCourseResult()
}

func getSelfTrainingCourseListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelfTrainingCourseListArgs)
	realResult := result.(*education.EducationserviceGetSelfTrainingCourseListResult)
	success, err := handler.(education.Educationservice).GetSelfTrainingCourseList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelfTrainingCourseListArgs() interface{} {
	return education.NewEducationserviceGetSelfTrainingCourseListArgs()
}

func newEducationserviceGetSelfTrainingCourseListResult() interface{} {
	return education.NewEducationserviceGetSelfTrainingCourseListResult()
}

func syncFinalExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSyncFinalExamArgs)
	realResult := result.(*education.EducationserviceSyncFinalExamResult)
	success, err := handler.(education.Educationservice).SyncFinalExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSyncFinalExamArgs() interface{} {
	return education.NewEducationserviceSyncFinalExamArgs()
}

func newEducationserviceSyncFinalExamResult() interface{} {
	return education.NewEducationserviceSyncFinalExamResult()
}

func getFinalExamListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetFinalExamListArgs)
	realResult := result.(*education.EducationserviceGetFinalExamListResult)
	success, err := handler.(education.Educationservice).GetFinalExamList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetFinalExamListArgs() interface{} {
	return education.NewEducationserviceGetFinalExamListArgs()
}

func newEducationserviceGetFinalExamListResult() interface{} {
	return education.NewEducationserviceGetFinalExamListResult()
}

func getFinalExamSubjectListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetFinalExamSubjectListArgs)
	realResult := result.(*education.EducationserviceGetFinalExamSubjectListResult)
	success, err := handler.(education.Educationservice).GetFinalExamSubjectList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetFinalExamSubjectListArgs() interface{} {
	return education.NewEducationserviceGetFinalExamSubjectListArgs()
}

func newEducationserviceGetFinalExamSubjectListResult() interface{} {
	return education.NewEducationserviceGetFinalExamSubjectListResult()
}

func updateFinalExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateFinalExamArgs)
	realResult := result.(*education.EducationserviceUpdateFinalExamResult)
	success, err := handler.(education.Educationservice).UpdateFinalExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateFinalExamArgs() interface{} {
	return education.NewEducationserviceUpdateFinalExamArgs()
}

func newEducationserviceUpdateFinalExamResult() interface{} {
	return education.NewEducationserviceUpdateFinalExamResult()
}

func exportFinalExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportFinalExamArgs)
	realResult := result.(*education.EducationserviceExportFinalExamResult)
	success, err := handler.(education.Educationservice).ExportFinalExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportFinalExamArgs() interface{} {
	return education.NewEducationserviceExportFinalExamArgs()
}

func newEducationserviceExportFinalExamResult() interface{} {
	return education.NewEducationserviceExportFinalExamResult()
}

func calculateFinalExamWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCalculateFinalExamWorkloadArgs)
	realResult := result.(*education.EducationserviceCalculateFinalExamWorkloadResult)
	success, err := handler.(education.Educationservice).CalculateFinalExamWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCalculateFinalExamWorkloadArgs() interface{} {
	return education.NewEducationserviceCalculateFinalExamWorkloadArgs()
}

func newEducationserviceCalculateFinalExamWorkloadResult() interface{} {
	return education.NewEducationserviceCalculateFinalExamWorkloadResult()
}

func deleteFinalExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteFinalExamArgs)
	realResult := result.(*education.EducationserviceDeleteFinalExamResult)
	success, err := handler.(education.Educationservice).DeleteFinalExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteFinalExamArgs() interface{} {
	return education.NewEducationserviceDeleteFinalExamArgs()
}

func newEducationserviceDeleteFinalExamResult() interface{} {
	return education.NewEducationserviceDeleteFinalExamResult()
}

func fillFinalExamPaperHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceFillFinalExamPaperArgs)
	realResult := result.(*education.EducationserviceFillFinalExamPaperResult)
	success, err := handler.(education.Educationservice).FillFinalExamPaper(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceFillFinalExamPaperArgs() interface{} {
	return education.NewEducationserviceFillFinalExamPaperArgs()
}

func newEducationserviceFillFinalExamPaperResult() interface{} {
	return education.NewEducationserviceFillFinalExamPaperResult()
}

func getFinalExamFillRecordListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetFinalExamFillRecordListArgs)
	realResult := result.(*education.EducationserviceGetFinalExamFillRecordListResult)
	success, err := handler.(education.Educationservice).GetFinalExamFillRecordList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetFinalExamFillRecordListArgs() interface{} {
	return education.NewEducationserviceGetFinalExamFillRecordListArgs()
}

func newEducationserviceGetFinalExamFillRecordListResult() interface{} {
	return education.NewEducationserviceGetFinalExamFillRecordListResult()
}

func deleteFinalExamRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteFinalExamRecordArgs)
	realResult := result.(*education.EducationserviceDeleteFinalExamRecordResult)
	success, err := handler.(education.Educationservice).DeleteFinalExamRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteFinalExamRecordArgs() interface{} {
	return education.NewEducationserviceDeleteFinalExamRecordArgs()
}

func newEducationserviceDeleteFinalExamRecordResult() interface{} {
	return education.NewEducationserviceDeleteFinalExamRecordResult()
}

func updateFinalExamRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateFinalExamRecordArgs)
	realResult := result.(*education.EducationserviceUpdateFinalExamRecordResult)
	success, err := handler.(education.Educationservice).UpdateFinalExamRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateFinalExamRecordArgs() interface{} {
	return education.NewEducationserviceUpdateFinalExamRecordArgs()
}

func newEducationserviceUpdateFinalExamRecordResult() interface{} {
	return education.NewEducationserviceUpdateFinalExamRecordResult()
}

func getFinalExamClassListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetFinalExamClassListArgs)
	realResult := result.(*education.EducationserviceGetFinalExamClassListResult)
	success, err := handler.(education.Educationservice).GetFinalExamClassList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetFinalExamClassListArgs() interface{} {
	return education.NewEducationserviceGetFinalExamClassListArgs()
}

func newEducationserviceGetFinalExamClassListResult() interface{} {
	return education.NewEducationserviceGetFinalExamClassListResult()
}

func getBeginExamListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetBeginExamListArgs)
	realResult := result.(*education.EducationserviceGetBeginExamListResult)
	success, err := handler.(education.Educationservice).GetBeginExamList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetBeginExamListArgs() interface{} {
	return education.NewEducationserviceGetBeginExamListArgs()
}

func newEducationserviceGetBeginExamListResult() interface{} {
	return education.NewEducationserviceGetBeginExamListResult()
}

func updateBeginExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateBeginExamArgs)
	realResult := result.(*education.EducationserviceUpdateBeginExamResult)
	success, err := handler.(education.Educationservice).UpdateBeginExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateBeginExamArgs() interface{} {
	return education.NewEducationserviceUpdateBeginExamArgs()
}

func newEducationserviceUpdateBeginExamResult() interface{} {
	return education.NewEducationserviceUpdateBeginExamResult()
}

func createBeginExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateBeginExamArgs)
	realResult := result.(*education.EducationserviceCreateBeginExamResult)
	success, err := handler.(education.Educationservice).CreateBeginExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateBeginExamArgs() interface{} {
	return education.NewEducationserviceCreateBeginExamArgs()
}

func newEducationserviceCreateBeginExamResult() interface{} {
	return education.NewEducationserviceCreateBeginExamResult()
}

func deleteBeginExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteBeginExamArgs)
	realResult := result.(*education.EducationserviceDeleteBeginExamResult)
	success, err := handler.(education.Educationservice).DeleteBeginExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteBeginExamArgs() interface{} {
	return education.NewEducationserviceDeleteBeginExamArgs()
}

func newEducationserviceDeleteBeginExamResult() interface{} {
	return education.NewEducationserviceDeleteBeginExamResult()
}

func importBeginExamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportBeginExamArgs)
	realResult := result.(*education.EducationserviceImportBeginExamResult)
	success, err := handler.(education.Educationservice).ImportBeginExam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportBeginExamArgs() interface{} {
	return education.NewEducationserviceImportBeginExamArgs()
}

func newEducationserviceImportBeginExamResult() interface{} {
	return education.NewEducationserviceImportBeginExamResult()
}

func getRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetRoleMenuArgs)
	realResult := result.(*education.EducationserviceGetRoleMenuResult)
	success, err := handler.(education.Educationservice).GetRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetRoleMenuArgs() interface{} {
	return education.NewEducationserviceGetRoleMenuArgs()
}

func newEducationserviceGetRoleMenuResult() interface{} {
	return education.NewEducationserviceGetRoleMenuResult()
}

func uploadSignHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUploadSignArgs)
	realResult := result.(*education.EducationserviceUploadSignResult)
	success, err := handler.(education.Educationservice).UploadSign(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUploadSignArgs() interface{} {
	return education.NewEducationserviceUploadSignArgs()
}

func newEducationserviceUploadSignResult() interface{} {
	return education.NewEducationserviceUploadSignResult()
}

func getDepartmentCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetDepartmentCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetDepartmentCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetDepartmentCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetDepartmentCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetDepartmentCourseApplyListArgs()
}

func newEducationserviceGetDepartmentCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetDepartmentCourseApplyListResult()
}

func updatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdatePasswordArgs)
	realResult := result.(*education.EducationserviceUpdatePasswordResult)
	success, err := handler.(education.Educationservice).UpdatePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdatePasswordArgs() interface{} {
	return education.NewEducationserviceUpdatePasswordArgs()
}

func newEducationserviceUpdatePasswordResult() interface{} {
	return education.NewEducationserviceUpdatePasswordResult()
}

func getUserSignHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserSignArgs)
	realResult := result.(*education.EducationserviceGetUserSignResult)
	success, err := handler.(education.Educationservice).GetUserSign(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserSignArgs() interface{} {
	return education.NewEducationserviceGetUserSignArgs()
}

func newEducationserviceGetUserSignResult() interface{} {
	return education.NewEducationserviceGetUserSignResult()
}

func exportAllResponsibilityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportAllResponsibilityArgs)
	realResult := result.(*education.EducationserviceExportAllResponsibilityResult)
	success, err := handler.(education.Educationservice).ExportAllResponsibility(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportAllResponsibilityArgs() interface{} {
	return education.NewEducationserviceExportAllResponsibilityArgs()
}

func newEducationserviceExportAllResponsibilityResult() interface{} {
	return education.NewEducationserviceExportAllResponsibilityResult()
}

func getWorkloadStatisticsRecordListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetWorkloadStatisticsRecordListArgs)
	realResult := result.(*education.EducationserviceGetWorkloadStatisticsRecordListResult)
	success, err := handler.(education.Educationservice).GetWorkloadStatisticsRecordList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetWorkloadStatisticsRecordListArgs() interface{} {
	return education.NewEducationserviceGetWorkloadStatisticsRecordListArgs()
}

func newEducationserviceGetWorkloadStatisticsRecordListResult() interface{} {
	return education.NewEducationserviceGetWorkloadStatisticsRecordListResult()
}

func deleteWorkloadStatisticsRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteWorkloadStatisticsRecordArgs)
	realResult := result.(*education.EducationserviceDeleteWorkloadStatisticsRecordResult)
	success, err := handler.(education.Educationservice).DeleteWorkloadStatisticsRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteWorkloadStatisticsRecordArgs() interface{} {
	return education.NewEducationserviceDeleteWorkloadStatisticsRecordArgs()
}

func newEducationserviceDeleteWorkloadStatisticsRecordResult() interface{} {
	return education.NewEducationserviceDeleteWorkloadStatisticsRecordResult()
}

func updateWorkloadStatisticsRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateWorkloadStatisticsRecordArgs)
	realResult := result.(*education.EducationserviceUpdateWorkloadStatisticsRecordResult)
	success, err := handler.(education.Educationservice).UpdateWorkloadStatisticsRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateWorkloadStatisticsRecordArgs() interface{} {
	return education.NewEducationserviceUpdateWorkloadStatisticsRecordArgs()
}

func newEducationserviceUpdateWorkloadStatisticsRecordResult() interface{} {
	return education.NewEducationserviceUpdateWorkloadStatisticsRecordResult()
}

func calculateTheoreticalCourseWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCalculateTheoreticalCourseWorkloadArgs)
	realResult := result.(*education.EducationserviceCalculateTheoreticalCourseWorkloadResult)
	success, err := handler.(education.Educationservice).CalculateTheoreticalCourseWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCalculateTheoreticalCourseWorkloadArgs() interface{} {
	return education.NewEducationserviceCalculateTheoreticalCourseWorkloadArgs()
}

func newEducationserviceCalculateTheoreticalCourseWorkloadResult() interface{} {
	return education.NewEducationserviceCalculateTheoreticalCourseWorkloadResult()
}

func calculateTrainingCourseWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCalculateTrainingCourseWorkloadArgs)
	realResult := result.(*education.EducationserviceCalculateTrainingCourseWorkloadResult)
	success, err := handler.(education.Educationservice).CalculateTrainingCourseWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCalculateTrainingCourseWorkloadArgs() interface{} {
	return education.NewEducationserviceCalculateTrainingCourseWorkloadArgs()
}

func newEducationserviceCalculateTrainingCourseWorkloadResult() interface{} {
	return education.NewEducationserviceCalculateTrainingCourseWorkloadResult()
}

func calculateInternshipWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCalculateInternshipWorkloadArgs)
	realResult := result.(*education.EducationserviceCalculateInternshipWorkloadResult)
	success, err := handler.(education.Educationservice).CalculateInternshipWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCalculateInternshipWorkloadArgs() interface{} {
	return education.NewEducationserviceCalculateInternshipWorkloadArgs()
}

func newEducationserviceCalculateInternshipWorkloadResult() interface{} {
	return education.NewEducationserviceCalculateInternshipWorkloadResult()
}

func calculateBeginExamWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCalculateBeginExamWorkloadArgs)
	realResult := result.(*education.EducationserviceCalculateBeginExamWorkloadResult)
	success, err := handler.(education.Educationservice).CalculateBeginExamWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCalculateBeginExamWorkloadArgs() interface{} {
	return education.NewEducationserviceCalculateBeginExamWorkloadArgs()
}

func newEducationserviceCalculateBeginExamWorkloadResult() interface{} {
	return education.NewEducationserviceCalculateBeginExamWorkloadResult()
}

func getWorkloadStatisticsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetWorkloadStatisticsListArgs)
	realResult := result.(*education.EducationserviceGetWorkloadStatisticsListResult)
	success, err := handler.(education.Educationservice).GetWorkloadStatisticsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetWorkloadStatisticsListArgs() interface{} {
	return education.NewEducationserviceGetWorkloadStatisticsListArgs()
}

func newEducationserviceGetWorkloadStatisticsListResult() interface{} {
	return education.NewEducationserviceGetWorkloadStatisticsListResult()
}

func deleteWorkloadStatisticsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteWorkloadStatisticsArgs)
	realResult := result.(*education.EducationserviceDeleteWorkloadStatisticsResult)
	success, err := handler.(education.Educationservice).DeleteWorkloadStatistics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteWorkloadStatisticsArgs() interface{} {
	return education.NewEducationserviceDeleteWorkloadStatisticsArgs()
}

func newEducationserviceDeleteWorkloadStatisticsResult() interface{} {
	return education.NewEducationserviceDeleteWorkloadStatisticsResult()
}

func exportWorkloadStatisticsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportWorkloadStatisticsArgs)
	realResult := result.(*education.EducationserviceExportWorkloadStatisticsResult)
	success, err := handler.(education.Educationservice).ExportWorkloadStatistics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportWorkloadStatisticsArgs() interface{} {
	return education.NewEducationserviceExportWorkloadStatisticsArgs()
}

func newEducationserviceExportWorkloadStatisticsResult() interface{} {
	return education.NewEducationserviceExportWorkloadStatisticsResult()
}

func updateTheoreticalCourseWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTheoreticalCourseWorkloadArgs)
	realResult := result.(*education.EducationserviceUpdateTheoreticalCourseWorkloadResult)
	success, err := handler.(education.Educationservice).UpdateTheoreticalCourseWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTheoreticalCourseWorkloadArgs() interface{} {
	return education.NewEducationserviceUpdateTheoreticalCourseWorkloadArgs()
}

func newEducationserviceUpdateTheoreticalCourseWorkloadResult() interface{} {
	return education.NewEducationserviceUpdateTheoreticalCourseWorkloadResult()
}

func updateTrainingCourseWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTrainingCourseWorkloadArgs)
	realResult := result.(*education.EducationserviceUpdateTrainingCourseWorkloadResult)
	success, err := handler.(education.Educationservice).UpdateTrainingCourseWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTrainingCourseWorkloadArgs() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseWorkloadArgs()
}

func newEducationserviceUpdateTrainingCourseWorkloadResult() interface{} {
	return education.NewEducationserviceUpdateTrainingCourseWorkloadResult()
}

func updateInternshipWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateInternshipWorkloadArgs)
	realResult := result.(*education.EducationserviceUpdateInternshipWorkloadResult)
	success, err := handler.(education.Educationservice).UpdateInternshipWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateInternshipWorkloadArgs() interface{} {
	return education.NewEducationserviceUpdateInternshipWorkloadArgs()
}

func newEducationserviceUpdateInternshipWorkloadResult() interface{} {
	return education.NewEducationserviceUpdateInternshipWorkloadResult()
}

func updateBeginExamWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateBeginExamWorkloadArgs)
	realResult := result.(*education.EducationserviceUpdateBeginExamWorkloadResult)
	success, err := handler.(education.Educationservice).UpdateBeginExamWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateBeginExamWorkloadArgs() interface{} {
	return education.NewEducationserviceUpdateBeginExamWorkloadArgs()
}

func newEducationserviceUpdateBeginExamWorkloadResult() interface{} {
	return education.NewEducationserviceUpdateBeginExamWorkloadResult()
}

func exportBeginExamWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportBeginExamWorkloadArgs)
	realResult := result.(*education.EducationserviceExportBeginExamWorkloadResult)
	success, err := handler.(education.Educationservice).ExportBeginExamWorkload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportBeginExamWorkloadArgs() interface{} {
	return education.NewEducationserviceExportBeginExamWorkloadArgs()
}

func newEducationserviceExportBeginExamWorkloadResult() interface{} {
	return education.NewEducationserviceExportBeginExamWorkloadResult()
}

func createWorkloadStatisticsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateWorkloadStatisticsArgs)
	realResult := result.(*education.EducationserviceCreateWorkloadStatisticsResult)
	success, err := handler.(education.Educationservice).CreateWorkloadStatistics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateWorkloadStatisticsArgs() interface{} {
	return education.NewEducationserviceCreateWorkloadStatisticsArgs()
}

func newEducationserviceCreateWorkloadStatisticsResult() interface{} {
	return education.NewEducationserviceCreateWorkloadStatisticsResult()
}

func updateWorkloadStatisticsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateWorkloadStatisticsArgs)
	realResult := result.(*education.EducationserviceUpdateWorkloadStatisticsResult)
	success, err := handler.(education.Educationservice).UpdateWorkloadStatistics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateWorkloadStatisticsArgs() interface{} {
	return education.NewEducationserviceUpdateWorkloadStatisticsArgs()
}

func newEducationserviceUpdateWorkloadStatisticsResult() interface{} {
	return education.NewEducationserviceUpdateWorkloadStatisticsResult()
}

func getCollegeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCollegeListArgs)
	realResult := result.(*education.EducationserviceGetCollegeListResult)
	success, err := handler.(education.Educationservice).GetCollegeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCollegeListArgs() interface{} {
	return education.NewEducationserviceGetCollegeListArgs()
}

func newEducationserviceGetCollegeListResult() interface{} {
	return education.NewEducationserviceGetCollegeListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApp(ctx context.Context, req *education.CreateAppReq) (r *education.CreateAppResp, err error) {
	var _args education.EducationserviceCreateAppArgs
	_args.Req = req
	var _result education.EducationserviceCreateAppResult
	if err = p.c.Call(ctx, "CreateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *education.LoginReq) (r *education.LoginResp, err error) {
	var _args education.EducationserviceLoginArgs
	_args.Req = req
	var _result education.EducationserviceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, req *education.CreateUserReq) (r *education.CreateUserResp, err error) {
	var _args education.EducationserviceCreateUserArgs
	_args.Req = req
	var _result education.EducationserviceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRole(ctx context.Context, req *education.CreateRoleReq) (r *education.CreateRoleResp, err error) {
	var _args education.EducationserviceCreateRoleArgs
	_args.Req = req
	var _result education.EducationserviceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *education.DeleteUserReq) (r *education.DeleteUserResp, err error) {
	var _args education.EducationserviceDeleteUserArgs
	_args.Req = req
	var _result education.EducationserviceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, req *education.GetUserListReq) (r *education.GetUserListResp, err error) {
	var _args education.EducationserviceGetUserListArgs
	_args.Req = req
	var _result education.EducationserviceGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *education.GetRoleListReq) (r *education.GetRoleListResp, err error) {
	var _args education.EducationserviceGetRoleListArgs
	_args.Req = req
	var _result education.EducationserviceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePermission(ctx context.Context, req *education.CreatePermissionReq) (r *education.CreatePermissionResp, err error) {
	var _args education.EducationserviceCreatePermissionArgs
	_args.Req = req
	var _result education.EducationserviceCreatePermissionResult
	if err = p.c.Call(ctx, "CreatePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPermissionList(ctx context.Context, req *education.GetPermissionListReq) (r *education.GetPermissionListResp, err error) {
	var _args education.EducationserviceGetPermissionListArgs
	_args.Req = req
	var _result education.EducationserviceGetPermissionListResult
	if err = p.c.Call(ctx, "GetPermissionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenu(ctx context.Context, req *education.GetMenuReq) (r *education.GetMenuResp, err error) {
	var _args education.EducationserviceGetMenuArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuResult
	if err = p.c.Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenuList(ctx context.Context, req *education.GetMenuListReq) (r *education.GetMenuListResp, err error) {
	var _args education.EducationserviceGetMenuListArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuListResult
	if err = p.c.Call(ctx, "GetMenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *education.GetUserInfoReq) (r *education.GetUserInfoResp, err error) {
	var _args education.EducationserviceGetUserInfoArgs
	_args.Req = req
	var _result education.EducationserviceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthCode(ctx context.Context, req *education.GetAuthCodeReq) (r *education.GetAuthCodeResp, err error) {
	var _args education.EducationserviceGetAuthCodeArgs
	_args.Req = req
	var _result education.EducationserviceGetAuthCodeResult
	if err = p.c.Call(ctx, "GetAuthCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetUserRole(ctx context.Context, req *education.SetUserRoleReq) (r *education.SetUserRoleResp, err error) {
	var _args education.EducationserviceSetUserRoleArgs
	_args.Req = req
	var _result education.EducationserviceSetUserRoleResult
	if err = p.c.Call(ctx, "SetUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRolePermission(ctx context.Context, req *education.SetRolePermissionReq) (r *education.SetRolePermissionResp, err error) {
	var _args education.EducationserviceSetRolePermissionArgs
	_args.Req = req
	var _result education.EducationserviceSetRolePermissionResult
	if err = p.c.Call(ctx, "SetRolePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRoleMenu(ctx context.Context, req *education.SetRoleMenuReq) (r *education.SetRoleMenuResp, err error) {
	var _args education.EducationserviceSetRoleMenuArgs
	_args.Req = req
	var _result education.EducationserviceSetRoleMenuResult
	if err = p.c.Call(ctx, "SetRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *education.CreateMenuReq) (r *education.CreateMenuResp, err error) {
	var _args education.EducationserviceCreateMenuArgs
	_args.Req = req
	var _result education.EducationserviceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOffice(ctx context.Context, req *education.CreateOfficeReq) (r *education.CreateOfficeResp, err error) {
	var _args education.EducationserviceCreateOfficeArgs
	_args.Req = req
	var _result education.EducationserviceCreateOfficeResult
	if err = p.c.Call(ctx, "CreateOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOfficeList(ctx context.Context, req *education.GetOfficeListReq) (r *education.GetOfficeListResp, err error) {
	var _args education.EducationserviceGetOfficeListArgs
	_args.Req = req
	var _result education.EducationserviceGetOfficeListResult
	if err = p.c.Call(ctx, "GetOfficeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetClassList(ctx context.Context, req *education.GetClassListReq) (r *education.GetClassListResp, err error) {
	var _args education.EducationserviceGetClassListArgs
	_args.Req = req
	var _result education.EducationserviceGetClassListResult
	if err = p.c.Call(ctx, "GetClassList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportCourseApply(ctx context.Context, req *education.ImportCourseApplyReq) (r *education.ImportCourseApplyResp, err error) {
	var _args education.EducationserviceImportCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceImportCourseApplyResult
	if err = p.c.Call(ctx, "ImportCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCourseApplyList(ctx context.Context, req *education.GetCourseApplyListReq) (r *education.GetCourseApplyListResp, err error) {
	var _args education.EducationserviceGetCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetCourseApplyListResult
	if err = p.c.Call(ctx, "GetCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelfCourseApplyList(ctx context.Context, req *education.GetSelfCourseApplyListReq) (r *education.GetSelfCourseApplyListResp, err error) {
	var _args education.EducationserviceGetSelfCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetSelfCourseApplyListResult
	if err = p.c.Call(ctx, "GetSelfCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportUser(ctx context.Context, req *education.ImportUserReq) (r *education.ImportUserResp, err error) {
	var _args education.EducationserviceImportUserArgs
	_args.Req = req
	var _result education.EducationserviceImportUserResult
	if err = p.c.Call(ctx, "ImportUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourseApply(ctx context.Context, req *education.DeleteCourseApplyReq) (r *education.DeleteCourseApplyResp, err error) {
	var _args education.EducationserviceDeleteCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceDeleteCourseApplyResult
	if err = p.c.Call(ctx, "DeleteCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApproveCourseApply(ctx context.Context, req *education.ApproveCourseApplyReq) (r *education.ApproveCourseApplyResp, err error) {
	var _args education.EducationserviceApproveCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceApproveCourseApplyResult
	if err = p.c.Call(ctx, "ApproveCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetCourseApply(ctx context.Context, req *education.ResetCourseApplyReq) (r *education.ResetCourseApplyResp, err error) {
	var _args education.EducationserviceResetCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceResetCourseApplyResult
	if err = p.c.Call(ctx, "ResetCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FillCourseApply(ctx context.Context, req *education.FillCourseApplyReq) (r *education.FillCourseApplyResp, err error) {
	var _args education.EducationserviceFillCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceFillCourseApplyResult
	if err = p.c.Call(ctx, "FillCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSelfCheckTable(ctx context.Context, req *education.ExportSelfCheckTableReq) (r *education.ExportSelfCheckTableResp, err error) {
	var _args education.EducationserviceExportSelfCheckTableArgs
	_args.Req = req
	var _result education.EducationserviceExportSelfCheckTableResult
	if err = p.c.Call(ctx, "ExportSelfCheckTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportResponsibility(ctx context.Context, req *education.ExportResponsibilityReq) (r *education.ExportResponsibilityResp, err error) {
	var _args education.EducationserviceExportResponsibilityArgs
	_args.Req = req
	var _result education.EducationserviceExportResponsibilityResult
	if err = p.c.Call(ctx, "ExportResponsibility", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportAllSelfCheckTable(ctx context.Context, req *education.ExportAllSelfCheckTableReq) (r *education.ExportAllSelfCheckTableResp, err error) {
	var _args education.EducationserviceExportAllSelfCheckTableArgs
	_args.Req = req
	var _result education.EducationserviceExportAllSelfCheckTableResult
	if err = p.c.Call(ctx, "ExportAllSelfCheckTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCourseApply(ctx context.Context, req *education.UpdateCourseApplyReq) (r *education.UpdateCourseApplyResp, err error) {
	var _args education.EducationserviceUpdateCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceUpdateCourseApplyResult
	if err = p.c.Call(ctx, "UpdateCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportCourseApply(ctx context.Context, req *education.ExportCourseApplyReq) (r *education.ExportCourseApplyResp, err error) {
	var _args education.EducationserviceExportCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceExportCourseApplyResult
	if err = p.c.Call(ctx, "ExportCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportCourseApplySummary(ctx context.Context, req *education.ExportCourseApplySummaryReq) (r *education.ExportCourseApplySummaryResp, err error) {
	var _args education.EducationserviceExportCourseApplySummaryArgs
	_args.Req = req
	var _result education.EducationserviceExportCourseApplySummaryResult
	if err = p.c.Call(ctx, "ExportCourseApplySummary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OneKeyApproveCourseApply(ctx context.Context, req *education.OneKeyApproveCourseApplyReq) (r *education.OneKeyApproveCourseApplyResp, err error) {
	var _args education.EducationserviceOneKeyApproveCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceOneKeyApproveCourseApplyResult
	if err = p.c.Call(ctx, "OneKeyApproveCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelectData(ctx context.Context, req *education.GetSelectDataReq) (r *education.GetSelectDataResp, err error) {
	var _args education.EducationserviceGetSelectDataArgs
	_args.Req = req
	var _result education.EducationserviceGetSelectDataResult
	if err = p.c.Call(ctx, "GetSelectData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTeacherInfoList(ctx context.Context, req *education.GetTeacherInfoListReq) (r *education.GetTeacherInfoListResp, err error) {
	var _args education.EducationserviceGetTeacherInfoListArgs
	_args.Req = req
	var _result education.EducationserviceGetTeacherInfoListResult
	if err = p.c.Call(ctx, "GetTeacherInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportTeacherInfo(ctx context.Context, req *education.ImportTeacherInfoReq) (r *education.ImportTeacherInfoResp, err error) {
	var _args education.EducationserviceImportTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceImportTeacherInfoResult
	if err = p.c.Call(ctx, "ImportTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTeacherInfo(ctx context.Context, req *education.UpdateTeacherInfoReq) (r *education.UpdateTeacherInfoResp, err error) {
	var _args education.EducationserviceUpdateTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTeacherInfoResult
	if err = p.c.Call(ctx, "UpdateTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetTeacherInfoStatus(ctx context.Context, req *education.SetTeacherInfoStatusReq) (r *education.SetTeacherInfoStatusResp, err error) {
	var _args education.EducationserviceSetTeacherInfoStatusArgs
	_args.Req = req
	var _result education.EducationserviceSetTeacherInfoStatusResult
	if err = p.c.Call(ctx, "SetTeacherInfoStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OderTeacherInfo(ctx context.Context, req *education.OrderTeacherInfoReq) (r *education.OrderTeacherInfoResp, err error) {
	var _args education.EducationserviceOderTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceOderTeacherInfoResult
	if err = p.c.Call(ctx, "OderTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *education.UpdateMenuReq) (r *education.UpdateMenuResp, err error) {
	var _args education.EducationserviceUpdateMenuArgs
	_args.Req = req
	var _result education.EducationserviceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *education.DeleteMenuReq) (r *education.DeleteMenuResp, err error) {
	var _args education.EducationserviceDeleteMenuArgs
	_args.Req = req
	var _result education.EducationserviceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToken(ctx context.Context, req *education.GetTokenReq) (r *education.GetTokenResp, err error) {
	var _args education.EducationserviceGetTokenArgs
	_args.Req = req
	var _result education.EducationserviceGetTokenResult
	if err = p.c.Call(ctx, "GetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *education.UpdateRoleReq) (r *education.UpdateRoleResp, err error) {
	var _args education.EducationserviceUpdateRoleArgs
	_args.Req = req
	var _result education.EducationserviceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRoleStatus(ctx context.Context, req *education.SetRoleStatusReq) (r *education.SetRoleStatusResp, err error) {
	var _args education.EducationserviceSetRoleStatusArgs
	_args.Req = req
	var _result education.EducationserviceSetRoleStatusResult
	if err = p.c.Call(ctx, "SetRoleStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *education.DeleteRoleReq) (r *education.DeleteRoleResp, err error) {
	var _args education.EducationserviceDeleteRoleArgs
	_args.Req = req
	var _result education.EducationserviceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOffice(ctx context.Context, req *education.DeleteOfficeReq) (r *education.DeleteOfficeResp, err error) {
	var _args education.EducationserviceDeleteOfficeArgs
	_args.Req = req
	var _result education.EducationserviceDeleteOfficeResult
	if err = p.c.Call(ctx, "DeleteOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOffice(ctx context.Context, req *education.UpdateOfficeReq) (r *education.UpdateOfficeResp, err error) {
	var _args education.EducationserviceUpdateOfficeArgs
	_args.Req = req
	var _result education.EducationserviceUpdateOfficeResult
	if err = p.c.Call(ctx, "UpdateOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, req *education.UpdateUserReq) (r *education.UpdateUserResp, err error) {
	var _args education.EducationserviceUpdateUserArgs
	_args.Req = req
	var _result education.EducationserviceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, req *education.ResetPasswordReq) (r *education.ResetPasswordResp, err error) {
	var _args education.EducationserviceResetPasswordArgs
	_args.Req = req
	var _result education.EducationserviceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTeacherInfo(ctx context.Context, req *education.DeleteTeacherInfoReq) (r *education.DeleteTeacherInfoResp, err error) {
	var _args education.EducationserviceDeleteTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceDeleteTeacherInfoResult
	if err = p.c.Call(ctx, "DeleteTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTeacherInfo(ctx context.Context, req *education.CreateTeacherInfoReq) (r *education.CreateTeacherInfoResp, err error) {
	var _args education.EducationserviceCreateTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceCreateTeacherInfoResult
	if err = p.c.Call(ctx, "CreateTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportTeacherInfo(ctx context.Context, req *education.ExportTeacherInfoReq) (r *education.ExportTeacherInfoResp, err error) {
	var _args education.EducationserviceExportTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceExportTeacherInfoResult
	if err = p.c.Call(ctx, "ExportTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCourseList(ctx context.Context, req *education.GetCourseListReq) (r *education.GetCourseListResp, err error) {
	var _args education.EducationserviceGetCourseListArgs
	_args.Req = req
	var _result education.EducationserviceGetCourseListResult
	if err = p.c.Call(ctx, "GetCourseList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourse(ctx context.Context, req *education.DeleteCourseReq) (r *education.DeleteCourseResp, err error) {
	var _args education.EducationserviceDeleteCourseArgs
	_args.Req = req
	var _result education.EducationserviceDeleteCourseResult
	if err = p.c.Call(ctx, "DeleteCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportCourse(ctx context.Context, req *education.ImportCourseReq) (r *education.ImportCourseResp, err error) {
	var _args education.EducationserviceImportCourseArgs
	_args.Req = req
	var _result education.EducationserviceImportCourseResult
	if err = p.c.Call(ctx, "ImportCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCourse(ctx context.Context, req *education.UpdateCourseReq) (r *education.UpdateCourseResp, err error) {
	var _args education.EducationserviceUpdateCourseArgs
	_args.Req = req
	var _result education.EducationserviceUpdateCourseResult
	if err = p.c.Call(ctx, "UpdateCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelfCourseList(ctx context.Context, req *education.GetSelfCourseListReq) (r *education.GetSelfCourseListResp, err error) {
	var _args education.EducationserviceGetSelfCourseListArgs
	_args.Req = req
	var _result education.EducationserviceGetSelfCourseListResult
	if err = p.c.Call(ctx, "GetSelfCourseList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCourseApplicationList(ctx context.Context, req *education.GetCourseApplicationListReq) (r *education.GetCourseApplicationListResp, err error) {
	var _args education.EducationserviceGetCourseApplicationListArgs
	_args.Req = req
	var _result education.EducationserviceGetCourseApplicationListResult
	if err = p.c.Call(ctx, "GetCourseApplicationList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourseApplication(ctx context.Context, req *education.DeleteCourseApplicationReq) (r *education.DeleteCourseApplicationResp, err error) {
	var _args education.EducationserviceDeleteCourseApplicationArgs
	_args.Req = req
	var _result education.EducationserviceDeleteCourseApplicationResult
	if err = p.c.Call(ctx, "DeleteCourseApplication", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelfCourseApplicationList(ctx context.Context, req *education.GetSelfCourseApplicationListReq) (r *education.GetSelfCourseApplicationListResp, err error) {
	var _args education.EducationserviceGetSelfCourseApplicationListArgs
	_args.Req = req
	var _result education.EducationserviceGetSelfCourseApplicationListResult
	if err = p.c.Call(ctx, "GetSelfCourseApplicationList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AdjustCourseApplication(ctx context.Context, req *education.AdjustCourseApplicationReq) (r *education.AdjustCourseApplicationResp, err error) {
	var _args education.EducationserviceAdjustCourseApplicationArgs
	_args.Req = req
	var _result education.EducationserviceAdjustCourseApplicationResult
	if err = p.c.Call(ctx, "AdjustCourseApplication", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHolidayList(ctx context.Context, req *education.GetHolidayListReq) (r *education.GetHolidayListResp, err error) {
	var _args education.EducationserviceGetHolidayListArgs
	_args.Req = req
	var _result education.EducationserviceGetHolidayListResult
	if err = p.c.Call(ctx, "GetHolidayList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteHoliday(ctx context.Context, req *education.DeleteHolidayReq) (r *education.DeleteHolidayResp, err error) {
	var _args education.EducationserviceDeleteHolidayArgs
	_args.Req = req
	var _result education.EducationserviceDeleteHolidayResult
	if err = p.c.Call(ctx, "DeleteHoliday", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateHoliday(ctx context.Context, req *education.CreateHolidayReq) (r *education.CreateHolidayResp, err error) {
	var _args education.EducationserviceCreateHolidayArgs
	_args.Req = req
	var _result education.EducationserviceCreateHolidayResult
	if err = p.c.Call(ctx, "CreateHoliday", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateHoliday(ctx context.Context, req *education.UpdateHolidayReq) (r *education.UpdateHolidayResp, err error) {
	var _args education.EducationserviceUpdateHolidayArgs
	_args.Req = req
	var _result education.EducationserviceUpdateHolidayResult
	if err = p.c.Call(ctx, "UpdateHoliday", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetInternshipList(ctx context.Context, req *education.GetInternshipListReq) (r *education.GetInternshipListResp, err error) {
	var _args education.EducationserviceGetInternshipListArgs
	_args.Req = req
	var _result education.EducationserviceGetInternshipListResult
	if err = p.c.Call(ctx, "GetInternshipList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteInternship(ctx context.Context, req *education.DeleteInternshipReq) (r *education.DeleteInternshipResp, err error) {
	var _args education.EducationserviceDeleteInternshipArgs
	_args.Req = req
	var _result education.EducationserviceDeleteInternshipResult
	if err = p.c.Call(ctx, "DeleteInternship", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateInternship(ctx context.Context, req *education.UpdateInternshipReq) (r *education.UpdateInternshipResp, err error) {
	var _args education.EducationserviceUpdateInternshipArgs
	_args.Req = req
	var _result education.EducationserviceUpdateInternshipResult
	if err = p.c.Call(ctx, "UpdateInternship", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateInternship(ctx context.Context, req *education.CreateInternshipReq) (r *education.CreateInternshipResp, err error) {
	var _args education.EducationserviceCreateInternshipArgs
	_args.Req = req
	var _result education.EducationserviceCreateInternshipResult
	if err = p.c.Call(ctx, "CreateInternship", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportInternship(ctx context.Context, req *education.ImportInternshipReq) (r *education.ImportInternshipResp, err error) {
	var _args education.EducationserviceImportInternshipArgs
	_args.Req = req
	var _result education.EducationserviceImportInternshipResult
	if err = p.c.Call(ctx, "ImportInternship", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrainingCourseList(ctx context.Context, req *education.GetTrainingCourseListReq) (r *education.GetTrainingCourseListResp, err error) {
	var _args education.EducationserviceGetTrainingCourseListArgs
	_args.Req = req
	var _result education.EducationserviceGetTrainingCourseListResult
	if err = p.c.Call(ctx, "GetTrainingCourseList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTrainingCourse(ctx context.Context, req *education.CreateTrainingCourseReq) (r *education.CreateTrainingCourseResp, err error) {
	var _args education.EducationserviceCreateTrainingCourseArgs
	_args.Req = req
	var _result education.EducationserviceCreateTrainingCourseResult
	if err = p.c.Call(ctx, "CreateTrainingCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTrainingCourse(ctx context.Context, req *education.DeleteTrainingCourseReq) (r *education.DeleteTrainingCourseResp, err error) {
	var _args education.EducationserviceDeleteTrainingCourseArgs
	_args.Req = req
	var _result education.EducationserviceDeleteTrainingCourseResult
	if err = p.c.Call(ctx, "DeleteTrainingCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTrainingCourse(ctx context.Context, req *education.UpdateTrainingCourseReq) (r *education.UpdateTrainingCourseResp, err error) {
	var _args education.EducationserviceUpdateTrainingCourseArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTrainingCourseResult
	if err = p.c.Call(ctx, "UpdateTrainingCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTrainingCourseTeacher(ctx context.Context, req *education.UpdateTrainingCourseTeacherReq) (r *education.UpdateTrainingCourseTeacherResp, err error) {
	var _args education.EducationserviceUpdateTrainingCourseTeacherArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTrainingCourseTeacherResult
	if err = p.c.Call(ctx, "UpdateTrainingCourseTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportTrainingCourse(ctx context.Context, req *education.ImportTrainingCourseReq) (r *education.ImportTrainingCourseResp, err error) {
	var _args education.EducationserviceImportTrainingCourseArgs
	_args.Req = req
	var _result education.EducationserviceImportTrainingCourseResult
	if err = p.c.Call(ctx, "ImportTrainingCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelfTrainingCourseList(ctx context.Context, req *education.GetSelfTrainingCourseListReq) (r *education.GetSelfTrainingCourseListResp, err error) {
	var _args education.EducationserviceGetSelfTrainingCourseListArgs
	_args.Req = req
	var _result education.EducationserviceGetSelfTrainingCourseListResult
	if err = p.c.Call(ctx, "GetSelfTrainingCourseList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncFinalExam(ctx context.Context, req *education.SyncFinalExamReq) (r *education.SyncFinalExamResp, err error) {
	var _args education.EducationserviceSyncFinalExamArgs
	_args.Req = req
	var _result education.EducationserviceSyncFinalExamResult
	if err = p.c.Call(ctx, "SyncFinalExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFinalExamList(ctx context.Context, req *education.GetFinalExamListReq) (r *education.GetFinalExamListResp, err error) {
	var _args education.EducationserviceGetFinalExamListArgs
	_args.Req = req
	var _result education.EducationserviceGetFinalExamListResult
	if err = p.c.Call(ctx, "GetFinalExamList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFinalExamSubjectList(ctx context.Context, req *education.GetFinalExamSubjectListReq) (r *education.GetFinalExamSubjectListResp, err error) {
	var _args education.EducationserviceGetFinalExamSubjectListArgs
	_args.Req = req
	var _result education.EducationserviceGetFinalExamSubjectListResult
	if err = p.c.Call(ctx, "GetFinalExamSubjectList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFinalExam(ctx context.Context, req *education.UpdateFinalExamReq) (r *education.UpdateFinalExamResp, err error) {
	var _args education.EducationserviceUpdateFinalExamArgs
	_args.Req = req
	var _result education.EducationserviceUpdateFinalExamResult
	if err = p.c.Call(ctx, "UpdateFinalExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportFinalExam(ctx context.Context, req *education.ExportFinalExamReq) (r *education.ExportFinalExamResp, err error) {
	var _args education.EducationserviceExportFinalExamArgs
	_args.Req = req
	var _result education.EducationserviceExportFinalExamResult
	if err = p.c.Call(ctx, "ExportFinalExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CalculateFinalExamWorkload(ctx context.Context, req *education.CalculateFinalExamWorkloadReq) (r *education.CalculateFinalExamWorkloadResp, err error) {
	var _args education.EducationserviceCalculateFinalExamWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceCalculateFinalExamWorkloadResult
	if err = p.c.Call(ctx, "CalculateFinalExamWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFinalExam(ctx context.Context, req *education.DeleteFinalExamReq) (r *education.DeleteFinalExamResp, err error) {
	var _args education.EducationserviceDeleteFinalExamArgs
	_args.Req = req
	var _result education.EducationserviceDeleteFinalExamResult
	if err = p.c.Call(ctx, "DeleteFinalExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FillFinalExamPaper(ctx context.Context, req *education.FillFinalExamPaperReq) (r *education.FillFinalExamPaperResp, err error) {
	var _args education.EducationserviceFillFinalExamPaperArgs
	_args.Req = req
	var _result education.EducationserviceFillFinalExamPaperResult
	if err = p.c.Call(ctx, "FillFinalExamPaper", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFinalExamFillRecordList(ctx context.Context, req *education.GetFinalExamRecordListReq) (r *education.GetFinalExamRecordListResp, err error) {
	var _args education.EducationserviceGetFinalExamFillRecordListArgs
	_args.Req = req
	var _result education.EducationserviceGetFinalExamFillRecordListResult
	if err = p.c.Call(ctx, "GetFinalExamFillRecordList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFinalExamRecord(ctx context.Context, req *education.DeleteFinalExamRecordReq) (r *education.DeleteFinalExamRecordResp, err error) {
	var _args education.EducationserviceDeleteFinalExamRecordArgs
	_args.Req = req
	var _result education.EducationserviceDeleteFinalExamRecordResult
	if err = p.c.Call(ctx, "DeleteFinalExamRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFinalExamRecord(ctx context.Context, req *education.UpdateFinalExamRecordReq) (r *education.UpdateFinalExamRecordResp, err error) {
	var _args education.EducationserviceUpdateFinalExamRecordArgs
	_args.Req = req
	var _result education.EducationserviceUpdateFinalExamRecordResult
	if err = p.c.Call(ctx, "UpdateFinalExamRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFinalExamClassList(ctx context.Context, req *education.GetFinalExamClassListReq) (r *education.GetFinalExamClassListResp, err error) {
	var _args education.EducationserviceGetFinalExamClassListArgs
	_args.Req = req
	var _result education.EducationserviceGetFinalExamClassListResult
	if err = p.c.Call(ctx, "GetFinalExamClassList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBeginExamList(ctx context.Context, req *education.GetBeginExamListReq) (r *education.GetBeginExamListResp, err error) {
	var _args education.EducationserviceGetBeginExamListArgs
	_args.Req = req
	var _result education.EducationserviceGetBeginExamListResult
	if err = p.c.Call(ctx, "GetBeginExamList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBeginExam(ctx context.Context, req *education.UpdateBeginExamReq) (r *education.UpdateBeginExamResp, err error) {
	var _args education.EducationserviceUpdateBeginExamArgs
	_args.Req = req
	var _result education.EducationserviceUpdateBeginExamResult
	if err = p.c.Call(ctx, "UpdateBeginExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBeginExam(ctx context.Context, req *education.CreateBeginExamReq) (r *education.CreateBeginExamResp, err error) {
	var _args education.EducationserviceCreateBeginExamArgs
	_args.Req = req
	var _result education.EducationserviceCreateBeginExamResult
	if err = p.c.Call(ctx, "CreateBeginExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBeginExam(ctx context.Context, req *education.DeleteBeginExamReq) (r *education.DeleteBeginExamResp, err error) {
	var _args education.EducationserviceDeleteBeginExamArgs
	_args.Req = req
	var _result education.EducationserviceDeleteBeginExamResult
	if err = p.c.Call(ctx, "DeleteBeginExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportBeginExam(ctx context.Context, req *education.ImportBeginExamReq) (r *education.ImportBeginExamResp, err error) {
	var _args education.EducationserviceImportBeginExamArgs
	_args.Req = req
	var _result education.EducationserviceImportBeginExamResult
	if err = p.c.Call(ctx, "ImportBeginExam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleMenu(ctx context.Context, req *education.GetRoleMenuReq) (r *education.GetRoleMenuResp, err error) {
	var _args education.EducationserviceGetRoleMenuArgs
	_args.Req = req
	var _result education.EducationserviceGetRoleMenuResult
	if err = p.c.Call(ctx, "GetRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadSign(ctx context.Context, req *education.UploadSignReq) (r *education.UploadSignResp, err error) {
	var _args education.EducationserviceUploadSignArgs
	_args.Req = req
	var _result education.EducationserviceUploadSignResult
	if err = p.c.Call(ctx, "UploadSign", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDepartmentCourseApplyList(ctx context.Context, req *education.GetDepartmentCourseApplyListReq) (r *education.GetDepartmentCourseApplyListResp, err error) {
	var _args education.EducationserviceGetDepartmentCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetDepartmentCourseApplyListResult
	if err = p.c.Call(ctx, "GetDepartmentCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePassword(ctx context.Context, req *education.UpdatePasswordReq) (r *education.UpdatePasswordResp, err error) {
	var _args education.EducationserviceUpdatePasswordArgs
	_args.Req = req
	var _result education.EducationserviceUpdatePasswordResult
	if err = p.c.Call(ctx, "UpdatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserSign(ctx context.Context, req *education.GetUserSignReq) (r *education.GetUserSignResp, err error) {
	var _args education.EducationserviceGetUserSignArgs
	_args.Req = req
	var _result education.EducationserviceGetUserSignResult
	if err = p.c.Call(ctx, "GetUserSign", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportAllResponsibility(ctx context.Context, req *education.ExportAllResponsibilityReq) (r *education.ExportAllResponsibilityResp, err error) {
	var _args education.EducationserviceExportAllResponsibilityArgs
	_args.Req = req
	var _result education.EducationserviceExportAllResponsibilityResult
	if err = p.c.Call(ctx, "ExportAllResponsibility", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWorkloadStatisticsRecordList(ctx context.Context, req *education.GetWorkloadStatisticsRecordListReq) (r *education.GetWorkloadStatisticsRecordListResp, err error) {
	var _args education.EducationserviceGetWorkloadStatisticsRecordListArgs
	_args.Req = req
	var _result education.EducationserviceGetWorkloadStatisticsRecordListResult
	if err = p.c.Call(ctx, "GetWorkloadStatisticsRecordList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteWorkloadStatisticsRecord(ctx context.Context, req *education.DeleteWorkloadStatisticsRecordReq) (r *education.DeleteWorkloadStatisticsRecordResp, err error) {
	var _args education.EducationserviceDeleteWorkloadStatisticsRecordArgs
	_args.Req = req
	var _result education.EducationserviceDeleteWorkloadStatisticsRecordResult
	if err = p.c.Call(ctx, "DeleteWorkloadStatisticsRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateWorkloadStatisticsRecord(ctx context.Context, req *education.UpdateWorkloadStatisticsRecordReq) (r *education.UpdateWorkloadStatisticsRecordResp, err error) {
	var _args education.EducationserviceUpdateWorkloadStatisticsRecordArgs
	_args.Req = req
	var _result education.EducationserviceUpdateWorkloadStatisticsRecordResult
	if err = p.c.Call(ctx, "UpdateWorkloadStatisticsRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CalculateTheoreticalCourseWorkload(ctx context.Context, req *education.CalculateTheoreticalCourseWorkloadReq) (r *education.CalculateTheoreticalCourseWorkloadResp, err error) {
	var _args education.EducationserviceCalculateTheoreticalCourseWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceCalculateTheoreticalCourseWorkloadResult
	if err = p.c.Call(ctx, "CalculateTheoreticalCourseWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CalculateTrainingCourseWorkload(ctx context.Context, req *education.CalculateTrainingCourseWorkloadReq) (r *education.CalculateTrainingCourseWorkloadResp, err error) {
	var _args education.EducationserviceCalculateTrainingCourseWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceCalculateTrainingCourseWorkloadResult
	if err = p.c.Call(ctx, "CalculateTrainingCourseWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CalculateInternshipWorkload(ctx context.Context, req *education.CalculateInternshipWorkloadReq) (r *education.CalculateInternshipWorkloadResp, err error) {
	var _args education.EducationserviceCalculateInternshipWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceCalculateInternshipWorkloadResult
	if err = p.c.Call(ctx, "CalculateInternshipWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CalculateBeginExamWorkload(ctx context.Context, req *education.CalculateBeginExamWorkloadReq) (r *education.CalculateBeginExamWorkloadResp, err error) {
	var _args education.EducationserviceCalculateBeginExamWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceCalculateBeginExamWorkloadResult
	if err = p.c.Call(ctx, "CalculateBeginExamWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWorkloadStatisticsList(ctx context.Context, req *education.GetWorkloadStatisticsListReq) (r *education.GetWorkloadStatisticsListResp, err error) {
	var _args education.EducationserviceGetWorkloadStatisticsListArgs
	_args.Req = req
	var _result education.EducationserviceGetWorkloadStatisticsListResult
	if err = p.c.Call(ctx, "GetWorkloadStatisticsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteWorkloadStatistics(ctx context.Context, req *education.DeleteWorkloadStatisticsReq) (r *education.DeleteWorkloadStatisticsResp, err error) {
	var _args education.EducationserviceDeleteWorkloadStatisticsArgs
	_args.Req = req
	var _result education.EducationserviceDeleteWorkloadStatisticsResult
	if err = p.c.Call(ctx, "DeleteWorkloadStatistics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportWorkloadStatistics(ctx context.Context, req *education.ExportWorkloadStatisticsReq) (r *education.ExportWorkloadStatisticsResp, err error) {
	var _args education.EducationserviceExportWorkloadStatisticsArgs
	_args.Req = req
	var _result education.EducationserviceExportWorkloadStatisticsResult
	if err = p.c.Call(ctx, "ExportWorkloadStatistics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTheoreticalCourseWorkload(ctx context.Context, req *education.UpdateTheoreticalCourseWorkloadReq) (r *education.UpdateTheoreticalCourseWorkloadResp, err error) {
	var _args education.EducationserviceUpdateTheoreticalCourseWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTheoreticalCourseWorkloadResult
	if err = p.c.Call(ctx, "UpdateTheoreticalCourseWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTrainingCourseWorkload(ctx context.Context, req *education.UpdateTrainingCourseWorkloadReq) (r *education.UpdateTrainingCourseWorkloadResp, err error) {
	var _args education.EducationserviceUpdateTrainingCourseWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTrainingCourseWorkloadResult
	if err = p.c.Call(ctx, "UpdateTrainingCourseWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateInternshipWorkload(ctx context.Context, req *education.UpdateInternshipWorkloadReq) (r *education.UpdateInternshipWorkloadResp, err error) {
	var _args education.EducationserviceUpdateInternshipWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceUpdateInternshipWorkloadResult
	if err = p.c.Call(ctx, "UpdateInternshipWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBeginExamWorkload(ctx context.Context, req *education.UpdateBeginExamWorkloadReq) (r *education.UpdateBeginExamWorkloadResp, err error) {
	var _args education.EducationserviceUpdateBeginExamWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceUpdateBeginExamWorkloadResult
	if err = p.c.Call(ctx, "UpdateBeginExamWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportBeginExamWorkload(ctx context.Context, req *education.ExportBeginExamWorkloadReq) (r *education.ExportBeginExamWorkloadResp, err error) {
	var _args education.EducationserviceExportBeginExamWorkloadArgs
	_args.Req = req
	var _result education.EducationserviceExportBeginExamWorkloadResult
	if err = p.c.Call(ctx, "ExportBeginExamWorkload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateWorkloadStatistics(ctx context.Context, req *education.CreateWorkloadStatisticsReq) (r *education.CreateWorkloadStatisticsResp, err error) {
	var _args education.EducationserviceCreateWorkloadStatisticsArgs
	_args.Req = req
	var _result education.EducationserviceCreateWorkloadStatisticsResult
	if err = p.c.Call(ctx, "CreateWorkloadStatistics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateWorkloadStatistics(ctx context.Context, req *education.UpdateWorkloadStatisticsReq) (r *education.UpdateWorkloadStatisticsResp, err error) {
	var _args education.EducationserviceUpdateWorkloadStatisticsArgs
	_args.Req = req
	var _result education.EducationserviceUpdateWorkloadStatisticsResult
	if err = p.c.Call(ctx, "UpdateWorkloadStatistics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCollegeList(ctx context.Context, req *education.GetCollegeListReq) (r *education.GetCollegeListResp, err error) {
	var _args education.EducationserviceGetCollegeListArgs
	_args.Req = req
	var _result education.EducationserviceGetCollegeListResult
	if err = p.c.Call(ctx, "GetCollegeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

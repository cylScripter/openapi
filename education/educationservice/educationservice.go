// Code generated by Kitex v0.11.3. DO NOT EDIT.

package educationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	education "github.com/cylScripter/openapi/education"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApp": kitex.NewMethodInfo(
		createAppHandler,
		newEducationserviceCreateAppArgs,
		newEducationserviceCreateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newEducationserviceLoginArgs,
		newEducationserviceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateUser": kitex.NewMethodInfo(
		createUserHandler,
		newEducationserviceCreateUserArgs,
		newEducationserviceCreateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newEducationserviceCreateRoleArgs,
		newEducationserviceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteUser": kitex.NewMethodInfo(
		deleteUserHandler,
		newEducationserviceDeleteUserArgs,
		newEducationserviceDeleteUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserList": kitex.NewMethodInfo(
		getUserListHandler,
		newEducationserviceGetUserListArgs,
		newEducationserviceGetUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newEducationserviceGetRoleListArgs,
		newEducationserviceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreatePermission": kitex.NewMethodInfo(
		createPermissionHandler,
		newEducationserviceCreatePermissionArgs,
		newEducationserviceCreatePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPermissionList": kitex.NewMethodInfo(
		getPermissionListHandler,
		newEducationserviceGetPermissionListArgs,
		newEducationserviceGetPermissionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenu": kitex.NewMethodInfo(
		getMenuHandler,
		newEducationserviceGetMenuArgs,
		newEducationserviceGetMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenuList": kitex.NewMethodInfo(
		getMenuListHandler,
		newEducationserviceGetMenuListArgs,
		newEducationserviceGetMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newEducationserviceGetUserInfoArgs,
		newEducationserviceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetAuthCode": kitex.NewMethodInfo(
		getAuthCodeHandler,
		newEducationserviceGetAuthCodeArgs,
		newEducationserviceGetAuthCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetUserRole": kitex.NewMethodInfo(
		setUserRoleHandler,
		newEducationserviceSetUserRoleArgs,
		newEducationserviceSetUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRolePermission": kitex.NewMethodInfo(
		setRolePermissionHandler,
		newEducationserviceSetRolePermissionArgs,
		newEducationserviceSetRolePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRoleMenu": kitex.NewMethodInfo(
		setRoleMenuHandler,
		newEducationserviceSetRoleMenuArgs,
		newEducationserviceSetRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newEducationserviceCreateMenuArgs,
		newEducationserviceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateOffice": kitex.NewMethodInfo(
		createOfficeHandler,
		newEducationserviceCreateOfficeArgs,
		newEducationserviceCreateOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOfficeList": kitex.NewMethodInfo(
		getOfficeListHandler,
		newEducationserviceGetOfficeListArgs,
		newEducationserviceGetOfficeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetClassList": kitex.NewMethodInfo(
		getClassListHandler,
		newEducationserviceGetClassListArgs,
		newEducationserviceGetClassListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportCourseApply": kitex.NewMethodInfo(
		importCourseApplyHandler,
		newEducationserviceImportCourseApplyArgs,
		newEducationserviceImportCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCourseApplyList": kitex.NewMethodInfo(
		getCourseApplyListHandler,
		newEducationserviceGetCourseApplyListArgs,
		newEducationserviceGetCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelfCourseApplyList": kitex.NewMethodInfo(
		getSelfCourseApplyListHandler,
		newEducationserviceGetSelfCourseApplyListArgs,
		newEducationserviceGetSelfCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportUser": kitex.NewMethodInfo(
		importUserHandler,
		newEducationserviceImportUserArgs,
		newEducationserviceImportUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCourseApply": kitex.NewMethodInfo(
		deleteCourseApplyHandler,
		newEducationserviceDeleteCourseApplyArgs,
		newEducationserviceDeleteCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApproveCourseApply": kitex.NewMethodInfo(
		approveCourseApplyHandler,
		newEducationserviceApproveCourseApplyArgs,
		newEducationserviceApproveCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetCourseApply": kitex.NewMethodInfo(
		resetCourseApplyHandler,
		newEducationserviceResetCourseApplyArgs,
		newEducationserviceResetCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FillCourseApply": kitex.NewMethodInfo(
		fillCourseApplyHandler,
		newEducationserviceFillCourseApplyArgs,
		newEducationserviceFillCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportSelfCheckTable": kitex.NewMethodInfo(
		exportSelfCheckTableHandler,
		newEducationserviceExportSelfCheckTableArgs,
		newEducationserviceExportSelfCheckTableResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportResponsibility": kitex.NewMethodInfo(
		exportResponsibilityHandler,
		newEducationserviceExportResponsibilityArgs,
		newEducationserviceExportResponsibilityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportAllSelfCheckTable": kitex.NewMethodInfo(
		exportAllSelfCheckTableHandler,
		newEducationserviceExportAllSelfCheckTableArgs,
		newEducationserviceExportAllSelfCheckTableResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCourseApply": kitex.NewMethodInfo(
		updateCourseApplyHandler,
		newEducationserviceUpdateCourseApplyArgs,
		newEducationserviceUpdateCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportCourseApply": kitex.NewMethodInfo(
		exportCourseApplyHandler,
		newEducationserviceExportCourseApplyArgs,
		newEducationserviceExportCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportCourseApplySummary": kitex.NewMethodInfo(
		exportCourseApplySummaryHandler,
		newEducationserviceExportCourseApplySummaryArgs,
		newEducationserviceExportCourseApplySummaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"OneKeyApproveCourseApply": kitex.NewMethodInfo(
		oneKeyApproveCourseApplyHandler,
		newEducationserviceOneKeyApproveCourseApplyArgs,
		newEducationserviceOneKeyApproveCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSelectData": kitex.NewMethodInfo(
		getSelectDataHandler,
		newEducationserviceGetSelectDataArgs,
		newEducationserviceGetSelectDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTeacherInfoList": kitex.NewMethodInfo(
		getTeacherInfoListHandler,
		newEducationserviceGetTeacherInfoListArgs,
		newEducationserviceGetTeacherInfoListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportTeacherInfo": kitex.NewMethodInfo(
		importTeacherInfoHandler,
		newEducationserviceImportTeacherInfoArgs,
		newEducationserviceImportTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTeacherInfo": kitex.NewMethodInfo(
		updateTeacherInfoHandler,
		newEducationserviceUpdateTeacherInfoArgs,
		newEducationserviceUpdateTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetTeacherInfoStatus": kitex.NewMethodInfo(
		setTeacherInfoStatusHandler,
		newEducationserviceSetTeacherInfoStatusArgs,
		newEducationserviceSetTeacherInfoStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"OderTeacherInfo": kitex.NewMethodInfo(
		oderTeacherInfoHandler,
		newEducationserviceOderTeacherInfoArgs,
		newEducationserviceOderTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenu": kitex.NewMethodInfo(
		updateMenuHandler,
		newEducationserviceUpdateMenuArgs,
		newEducationserviceUpdateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenu": kitex.NewMethodInfo(
		deleteMenuHandler,
		newEducationserviceDeleteMenuArgs,
		newEducationserviceDeleteMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetToken": kitex.NewMethodInfo(
		getTokenHandler,
		newEducationserviceGetTokenArgs,
		newEducationserviceGetTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newEducationserviceUpdateRoleArgs,
		newEducationserviceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRoleStatus": kitex.NewMethodInfo(
		setRoleStatusHandler,
		newEducationserviceSetRoleStatusArgs,
		newEducationserviceSetRoleStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newEducationserviceDeleteRoleArgs,
		newEducationserviceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteOffice": kitex.NewMethodInfo(
		deleteOfficeHandler,
		newEducationserviceDeleteOfficeArgs,
		newEducationserviceDeleteOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateOffice": kitex.NewMethodInfo(
		updateOfficeHandler,
		newEducationserviceUpdateOfficeArgs,
		newEducationserviceUpdateOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateUser": kitex.NewMethodInfo(
		updateUserHandler,
		newEducationserviceUpdateUserArgs,
		newEducationserviceUpdateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetPassword": kitex.NewMethodInfo(
		resetPasswordHandler,
		newEducationserviceResetPasswordArgs,
		newEducationserviceResetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteTeacherInfo": kitex.NewMethodInfo(
		deleteTeacherInfoHandler,
		newEducationserviceDeleteTeacherInfoArgs,
		newEducationserviceDeleteTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTeacherInfo": kitex.NewMethodInfo(
		createTeacherInfoHandler,
		newEducationserviceCreateTeacherInfoArgs,
		newEducationserviceCreateTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportTeacherInfo": kitex.NewMethodInfo(
		exportTeacherInfoHandler,
		newEducationserviceExportTeacherInfoArgs,
		newEducationserviceExportTeacherInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	educationserviceServiceInfo                = NewServiceInfo()
	educationserviceServiceInfoForClient       = NewServiceInfoForClient()
	educationserviceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return educationserviceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "educationservice"
	handlerType := (*education.Educationservice)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "education",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateAppArgs)
	realResult := result.(*education.EducationserviceCreateAppResult)
	success, err := handler.(education.Educationservice).CreateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateAppArgs() interface{} {
	return education.NewEducationserviceCreateAppArgs()
}

func newEducationserviceCreateAppResult() interface{} {
	return education.NewEducationserviceCreateAppResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceLoginArgs)
	realResult := result.(*education.EducationserviceLoginResult)
	success, err := handler.(education.Educationservice).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceLoginArgs() interface{} {
	return education.NewEducationserviceLoginArgs()
}

func newEducationserviceLoginResult() interface{} {
	return education.NewEducationserviceLoginResult()
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateUserArgs)
	realResult := result.(*education.EducationserviceCreateUserResult)
	success, err := handler.(education.Educationservice).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateUserArgs() interface{} {
	return education.NewEducationserviceCreateUserArgs()
}

func newEducationserviceCreateUserResult() interface{} {
	return education.NewEducationserviceCreateUserResult()
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateRoleArgs)
	realResult := result.(*education.EducationserviceCreateRoleResult)
	success, err := handler.(education.Educationservice).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateRoleArgs() interface{} {
	return education.NewEducationserviceCreateRoleArgs()
}

func newEducationserviceCreateRoleResult() interface{} {
	return education.NewEducationserviceCreateRoleResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteUserArgs)
	realResult := result.(*education.EducationserviceDeleteUserResult)
	success, err := handler.(education.Educationservice).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteUserArgs() interface{} {
	return education.NewEducationserviceDeleteUserArgs()
}

func newEducationserviceDeleteUserResult() interface{} {
	return education.NewEducationserviceDeleteUserResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserListArgs)
	realResult := result.(*education.EducationserviceGetUserListResult)
	success, err := handler.(education.Educationservice).GetUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserListArgs() interface{} {
	return education.NewEducationserviceGetUserListArgs()
}

func newEducationserviceGetUserListResult() interface{} {
	return education.NewEducationserviceGetUserListResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetRoleListArgs)
	realResult := result.(*education.EducationserviceGetRoleListResult)
	success, err := handler.(education.Educationservice).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetRoleListArgs() interface{} {
	return education.NewEducationserviceGetRoleListArgs()
}

func newEducationserviceGetRoleListResult() interface{} {
	return education.NewEducationserviceGetRoleListResult()
}

func createPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreatePermissionArgs)
	realResult := result.(*education.EducationserviceCreatePermissionResult)
	success, err := handler.(education.Educationservice).CreatePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreatePermissionArgs() interface{} {
	return education.NewEducationserviceCreatePermissionArgs()
}

func newEducationserviceCreatePermissionResult() interface{} {
	return education.NewEducationserviceCreatePermissionResult()
}

func getPermissionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetPermissionListArgs)
	realResult := result.(*education.EducationserviceGetPermissionListResult)
	success, err := handler.(education.Educationservice).GetPermissionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetPermissionListArgs() interface{} {
	return education.NewEducationserviceGetPermissionListArgs()
}

func newEducationserviceGetPermissionListResult() interface{} {
	return education.NewEducationserviceGetPermissionListResult()
}

func getMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuArgs)
	realResult := result.(*education.EducationserviceGetMenuResult)
	success, err := handler.(education.Educationservice).GetMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuArgs() interface{} {
	return education.NewEducationserviceGetMenuArgs()
}

func newEducationserviceGetMenuResult() interface{} {
	return education.NewEducationserviceGetMenuResult()
}

func getMenuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuListArgs)
	realResult := result.(*education.EducationserviceGetMenuListResult)
	success, err := handler.(education.Educationservice).GetMenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuListArgs() interface{} {
	return education.NewEducationserviceGetMenuListArgs()
}

func newEducationserviceGetMenuListResult() interface{} {
	return education.NewEducationserviceGetMenuListResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserInfoArgs)
	realResult := result.(*education.EducationserviceGetUserInfoResult)
	success, err := handler.(education.Educationservice).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserInfoArgs() interface{} {
	return education.NewEducationserviceGetUserInfoArgs()
}

func newEducationserviceGetUserInfoResult() interface{} {
	return education.NewEducationserviceGetUserInfoResult()
}

func getAuthCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetAuthCodeArgs)
	realResult := result.(*education.EducationserviceGetAuthCodeResult)
	success, err := handler.(education.Educationservice).GetAuthCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetAuthCodeArgs() interface{} {
	return education.NewEducationserviceGetAuthCodeArgs()
}

func newEducationserviceGetAuthCodeResult() interface{} {
	return education.NewEducationserviceGetAuthCodeResult()
}

func setUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetUserRoleArgs)
	realResult := result.(*education.EducationserviceSetUserRoleResult)
	success, err := handler.(education.Educationservice).SetUserRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetUserRoleArgs() interface{} {
	return education.NewEducationserviceSetUserRoleArgs()
}

func newEducationserviceSetUserRoleResult() interface{} {
	return education.NewEducationserviceSetUserRoleResult()
}

func setRolePermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRolePermissionArgs)
	realResult := result.(*education.EducationserviceSetRolePermissionResult)
	success, err := handler.(education.Educationservice).SetRolePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRolePermissionArgs() interface{} {
	return education.NewEducationserviceSetRolePermissionArgs()
}

func newEducationserviceSetRolePermissionResult() interface{} {
	return education.NewEducationserviceSetRolePermissionResult()
}

func setRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRoleMenuArgs)
	realResult := result.(*education.EducationserviceSetRoleMenuResult)
	success, err := handler.(education.Educationservice).SetRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRoleMenuArgs() interface{} {
	return education.NewEducationserviceSetRoleMenuArgs()
}

func newEducationserviceSetRoleMenuResult() interface{} {
	return education.NewEducationserviceSetRoleMenuResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateMenuArgs)
	realResult := result.(*education.EducationserviceCreateMenuResult)
	success, err := handler.(education.Educationservice).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateMenuArgs() interface{} {
	return education.NewEducationserviceCreateMenuArgs()
}

func newEducationserviceCreateMenuResult() interface{} {
	return education.NewEducationserviceCreateMenuResult()
}

func createOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateOfficeArgs)
	realResult := result.(*education.EducationserviceCreateOfficeResult)
	success, err := handler.(education.Educationservice).CreateOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateOfficeArgs() interface{} {
	return education.NewEducationserviceCreateOfficeArgs()
}

func newEducationserviceCreateOfficeResult() interface{} {
	return education.NewEducationserviceCreateOfficeResult()
}

func getOfficeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetOfficeListArgs)
	realResult := result.(*education.EducationserviceGetOfficeListResult)
	success, err := handler.(education.Educationservice).GetOfficeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetOfficeListArgs() interface{} {
	return education.NewEducationserviceGetOfficeListArgs()
}

func newEducationserviceGetOfficeListResult() interface{} {
	return education.NewEducationserviceGetOfficeListResult()
}

func getClassListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetClassListArgs)
	realResult := result.(*education.EducationserviceGetClassListResult)
	success, err := handler.(education.Educationservice).GetClassList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetClassListArgs() interface{} {
	return education.NewEducationserviceGetClassListArgs()
}

func newEducationserviceGetClassListResult() interface{} {
	return education.NewEducationserviceGetClassListResult()
}

func importCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportCourseApplyArgs)
	realResult := result.(*education.EducationserviceImportCourseApplyResult)
	success, err := handler.(education.Educationservice).ImportCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportCourseApplyArgs() interface{} {
	return education.NewEducationserviceImportCourseApplyArgs()
}

func newEducationserviceImportCourseApplyResult() interface{} {
	return education.NewEducationserviceImportCourseApplyResult()
}

func getCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetCourseApplyListArgs()
}

func newEducationserviceGetCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetCourseApplyListResult()
}

func getSelfCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelfCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetSelfCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetSelfCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelfCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetSelfCourseApplyListArgs()
}

func newEducationserviceGetSelfCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetSelfCourseApplyListResult()
}

func importUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportUserArgs)
	realResult := result.(*education.EducationserviceImportUserResult)
	success, err := handler.(education.Educationservice).ImportUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportUserArgs() interface{} {
	return education.NewEducationserviceImportUserArgs()
}

func newEducationserviceImportUserResult() interface{} {
	return education.NewEducationserviceImportUserResult()
}

func deleteCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteCourseApplyArgs)
	realResult := result.(*education.EducationserviceDeleteCourseApplyResult)
	success, err := handler.(education.Educationservice).DeleteCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteCourseApplyArgs() interface{} {
	return education.NewEducationserviceDeleteCourseApplyArgs()
}

func newEducationserviceDeleteCourseApplyResult() interface{} {
	return education.NewEducationserviceDeleteCourseApplyResult()
}

func approveCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceApproveCourseApplyArgs)
	realResult := result.(*education.EducationserviceApproveCourseApplyResult)
	success, err := handler.(education.Educationservice).ApproveCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceApproveCourseApplyArgs() interface{} {
	return education.NewEducationserviceApproveCourseApplyArgs()
}

func newEducationserviceApproveCourseApplyResult() interface{} {
	return education.NewEducationserviceApproveCourseApplyResult()
}

func resetCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceResetCourseApplyArgs)
	realResult := result.(*education.EducationserviceResetCourseApplyResult)
	success, err := handler.(education.Educationservice).ResetCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceResetCourseApplyArgs() interface{} {
	return education.NewEducationserviceResetCourseApplyArgs()
}

func newEducationserviceResetCourseApplyResult() interface{} {
	return education.NewEducationserviceResetCourseApplyResult()
}

func fillCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceFillCourseApplyArgs)
	realResult := result.(*education.EducationserviceFillCourseApplyResult)
	success, err := handler.(education.Educationservice).FillCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceFillCourseApplyArgs() interface{} {
	return education.NewEducationserviceFillCourseApplyArgs()
}

func newEducationserviceFillCourseApplyResult() interface{} {
	return education.NewEducationserviceFillCourseApplyResult()
}

func exportSelfCheckTableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportSelfCheckTableArgs)
	realResult := result.(*education.EducationserviceExportSelfCheckTableResult)
	success, err := handler.(education.Educationservice).ExportSelfCheckTable(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportSelfCheckTableArgs() interface{} {
	return education.NewEducationserviceExportSelfCheckTableArgs()
}

func newEducationserviceExportSelfCheckTableResult() interface{} {
	return education.NewEducationserviceExportSelfCheckTableResult()
}

func exportResponsibilityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportResponsibilityArgs)
	realResult := result.(*education.EducationserviceExportResponsibilityResult)
	success, err := handler.(education.Educationservice).ExportResponsibility(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportResponsibilityArgs() interface{} {
	return education.NewEducationserviceExportResponsibilityArgs()
}

func newEducationserviceExportResponsibilityResult() interface{} {
	return education.NewEducationserviceExportResponsibilityResult()
}

func exportAllSelfCheckTableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportAllSelfCheckTableArgs)
	realResult := result.(*education.EducationserviceExportAllSelfCheckTableResult)
	success, err := handler.(education.Educationservice).ExportAllSelfCheckTable(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportAllSelfCheckTableArgs() interface{} {
	return education.NewEducationserviceExportAllSelfCheckTableArgs()
}

func newEducationserviceExportAllSelfCheckTableResult() interface{} {
	return education.NewEducationserviceExportAllSelfCheckTableResult()
}

func updateCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateCourseApplyArgs)
	realResult := result.(*education.EducationserviceUpdateCourseApplyResult)
	success, err := handler.(education.Educationservice).UpdateCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateCourseApplyArgs() interface{} {
	return education.NewEducationserviceUpdateCourseApplyArgs()
}

func newEducationserviceUpdateCourseApplyResult() interface{} {
	return education.NewEducationserviceUpdateCourseApplyResult()
}

func exportCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportCourseApplyArgs)
	realResult := result.(*education.EducationserviceExportCourseApplyResult)
	success, err := handler.(education.Educationservice).ExportCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportCourseApplyArgs() interface{} {
	return education.NewEducationserviceExportCourseApplyArgs()
}

func newEducationserviceExportCourseApplyResult() interface{} {
	return education.NewEducationserviceExportCourseApplyResult()
}

func exportCourseApplySummaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportCourseApplySummaryArgs)
	realResult := result.(*education.EducationserviceExportCourseApplySummaryResult)
	success, err := handler.(education.Educationservice).ExportCourseApplySummary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportCourseApplySummaryArgs() interface{} {
	return education.NewEducationserviceExportCourseApplySummaryArgs()
}

func newEducationserviceExportCourseApplySummaryResult() interface{} {
	return education.NewEducationserviceExportCourseApplySummaryResult()
}

func oneKeyApproveCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceOneKeyApproveCourseApplyArgs)
	realResult := result.(*education.EducationserviceOneKeyApproveCourseApplyResult)
	success, err := handler.(education.Educationservice).OneKeyApproveCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceOneKeyApproveCourseApplyArgs() interface{} {
	return education.NewEducationserviceOneKeyApproveCourseApplyArgs()
}

func newEducationserviceOneKeyApproveCourseApplyResult() interface{} {
	return education.NewEducationserviceOneKeyApproveCourseApplyResult()
}

func getSelectDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetSelectDataArgs)
	realResult := result.(*education.EducationserviceGetSelectDataResult)
	success, err := handler.(education.Educationservice).GetSelectData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetSelectDataArgs() interface{} {
	return education.NewEducationserviceGetSelectDataArgs()
}

func newEducationserviceGetSelectDataResult() interface{} {
	return education.NewEducationserviceGetSelectDataResult()
}

func getTeacherInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetTeacherInfoListArgs)
	realResult := result.(*education.EducationserviceGetTeacherInfoListResult)
	success, err := handler.(education.Educationservice).GetTeacherInfoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetTeacherInfoListArgs() interface{} {
	return education.NewEducationserviceGetTeacherInfoListArgs()
}

func newEducationserviceGetTeacherInfoListResult() interface{} {
	return education.NewEducationserviceGetTeacherInfoListResult()
}

func importTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportTeacherInfoArgs)
	realResult := result.(*education.EducationserviceImportTeacherInfoResult)
	success, err := handler.(education.Educationservice).ImportTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportTeacherInfoArgs() interface{} {
	return education.NewEducationserviceImportTeacherInfoArgs()
}

func newEducationserviceImportTeacherInfoResult() interface{} {
	return education.NewEducationserviceImportTeacherInfoResult()
}

func updateTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateTeacherInfoArgs)
	realResult := result.(*education.EducationserviceUpdateTeacherInfoResult)
	success, err := handler.(education.Educationservice).UpdateTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateTeacherInfoArgs() interface{} {
	return education.NewEducationserviceUpdateTeacherInfoArgs()
}

func newEducationserviceUpdateTeacherInfoResult() interface{} {
	return education.NewEducationserviceUpdateTeacherInfoResult()
}

func setTeacherInfoStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetTeacherInfoStatusArgs)
	realResult := result.(*education.EducationserviceSetTeacherInfoStatusResult)
	success, err := handler.(education.Educationservice).SetTeacherInfoStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetTeacherInfoStatusArgs() interface{} {
	return education.NewEducationserviceSetTeacherInfoStatusArgs()
}

func newEducationserviceSetTeacherInfoStatusResult() interface{} {
	return education.NewEducationserviceSetTeacherInfoStatusResult()
}

func oderTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceOderTeacherInfoArgs)
	realResult := result.(*education.EducationserviceOderTeacherInfoResult)
	success, err := handler.(education.Educationservice).OderTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceOderTeacherInfoArgs() interface{} {
	return education.NewEducationserviceOderTeacherInfoArgs()
}

func newEducationserviceOderTeacherInfoResult() interface{} {
	return education.NewEducationserviceOderTeacherInfoResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateMenuArgs)
	realResult := result.(*education.EducationserviceUpdateMenuResult)
	success, err := handler.(education.Educationservice).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateMenuArgs() interface{} {
	return education.NewEducationserviceUpdateMenuArgs()
}

func newEducationserviceUpdateMenuResult() interface{} {
	return education.NewEducationserviceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteMenuArgs)
	realResult := result.(*education.EducationserviceDeleteMenuResult)
	success, err := handler.(education.Educationservice).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteMenuArgs() interface{} {
	return education.NewEducationserviceDeleteMenuArgs()
}

func newEducationserviceDeleteMenuResult() interface{} {
	return education.NewEducationserviceDeleteMenuResult()
}

func getTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetTokenArgs)
	realResult := result.(*education.EducationserviceGetTokenResult)
	success, err := handler.(education.Educationservice).GetToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetTokenArgs() interface{} {
	return education.NewEducationserviceGetTokenArgs()
}

func newEducationserviceGetTokenResult() interface{} {
	return education.NewEducationserviceGetTokenResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateRoleArgs)
	realResult := result.(*education.EducationserviceUpdateRoleResult)
	success, err := handler.(education.Educationservice).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateRoleArgs() interface{} {
	return education.NewEducationserviceUpdateRoleArgs()
}

func newEducationserviceUpdateRoleResult() interface{} {
	return education.NewEducationserviceUpdateRoleResult()
}

func setRoleStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRoleStatusArgs)
	realResult := result.(*education.EducationserviceSetRoleStatusResult)
	success, err := handler.(education.Educationservice).SetRoleStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRoleStatusArgs() interface{} {
	return education.NewEducationserviceSetRoleStatusArgs()
}

func newEducationserviceSetRoleStatusResult() interface{} {
	return education.NewEducationserviceSetRoleStatusResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteRoleArgs)
	realResult := result.(*education.EducationserviceDeleteRoleResult)
	success, err := handler.(education.Educationservice).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteRoleArgs() interface{} {
	return education.NewEducationserviceDeleteRoleArgs()
}

func newEducationserviceDeleteRoleResult() interface{} {
	return education.NewEducationserviceDeleteRoleResult()
}

func deleteOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteOfficeArgs)
	realResult := result.(*education.EducationserviceDeleteOfficeResult)
	success, err := handler.(education.Educationservice).DeleteOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteOfficeArgs() interface{} {
	return education.NewEducationserviceDeleteOfficeArgs()
}

func newEducationserviceDeleteOfficeResult() interface{} {
	return education.NewEducationserviceDeleteOfficeResult()
}

func updateOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateOfficeArgs)
	realResult := result.(*education.EducationserviceUpdateOfficeResult)
	success, err := handler.(education.Educationservice).UpdateOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateOfficeArgs() interface{} {
	return education.NewEducationserviceUpdateOfficeArgs()
}

func newEducationserviceUpdateOfficeResult() interface{} {
	return education.NewEducationserviceUpdateOfficeResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceUpdateUserArgs)
	realResult := result.(*education.EducationserviceUpdateUserResult)
	success, err := handler.(education.Educationservice).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceUpdateUserArgs() interface{} {
	return education.NewEducationserviceUpdateUserArgs()
}

func newEducationserviceUpdateUserResult() interface{} {
	return education.NewEducationserviceUpdateUserResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceResetPasswordArgs)
	realResult := result.(*education.EducationserviceResetPasswordResult)
	success, err := handler.(education.Educationservice).ResetPassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceResetPasswordArgs() interface{} {
	return education.NewEducationserviceResetPasswordArgs()
}

func newEducationserviceResetPasswordResult() interface{} {
	return education.NewEducationserviceResetPasswordResult()
}

func deleteTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteTeacherInfoArgs)
	realResult := result.(*education.EducationserviceDeleteTeacherInfoResult)
	success, err := handler.(education.Educationservice).DeleteTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteTeacherInfoArgs() interface{} {
	return education.NewEducationserviceDeleteTeacherInfoArgs()
}

func newEducationserviceDeleteTeacherInfoResult() interface{} {
	return education.NewEducationserviceDeleteTeacherInfoResult()
}

func createTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateTeacherInfoArgs)
	realResult := result.(*education.EducationserviceCreateTeacherInfoResult)
	success, err := handler.(education.Educationservice).CreateTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateTeacherInfoArgs() interface{} {
	return education.NewEducationserviceCreateTeacherInfoArgs()
}

func newEducationserviceCreateTeacherInfoResult() interface{} {
	return education.NewEducationserviceCreateTeacherInfoResult()
}

func exportTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceExportTeacherInfoArgs)
	realResult := result.(*education.EducationserviceExportTeacherInfoResult)
	success, err := handler.(education.Educationservice).ExportTeacherInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceExportTeacherInfoArgs() interface{} {
	return education.NewEducationserviceExportTeacherInfoArgs()
}

func newEducationserviceExportTeacherInfoResult() interface{} {
	return education.NewEducationserviceExportTeacherInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApp(ctx context.Context, req *education.CreateAppReq) (r *education.CreateAppResp, err error) {
	var _args education.EducationserviceCreateAppArgs
	_args.Req = req
	var _result education.EducationserviceCreateAppResult
	if err = p.c.Call(ctx, "CreateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *education.LoginReq) (r *education.LoginResp, err error) {
	var _args education.EducationserviceLoginArgs
	_args.Req = req
	var _result education.EducationserviceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, req *education.CreateUserReq) (r *education.CreateUserResp, err error) {
	var _args education.EducationserviceCreateUserArgs
	_args.Req = req
	var _result education.EducationserviceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRole(ctx context.Context, req *education.CreateRoleReq) (r *education.CreateRoleResp, err error) {
	var _args education.EducationserviceCreateRoleArgs
	_args.Req = req
	var _result education.EducationserviceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *education.DeleteUserReq) (r *education.DeleteUserResp, err error) {
	var _args education.EducationserviceDeleteUserArgs
	_args.Req = req
	var _result education.EducationserviceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, req *education.GetUserListReq) (r *education.GetUserListResp, err error) {
	var _args education.EducationserviceGetUserListArgs
	_args.Req = req
	var _result education.EducationserviceGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *education.GetRoleListReq) (r *education.GetRoleListResp, err error) {
	var _args education.EducationserviceGetRoleListArgs
	_args.Req = req
	var _result education.EducationserviceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePermission(ctx context.Context, req *education.CreatePermissionReq) (r *education.CreatePermissionResp, err error) {
	var _args education.EducationserviceCreatePermissionArgs
	_args.Req = req
	var _result education.EducationserviceCreatePermissionResult
	if err = p.c.Call(ctx, "CreatePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPermissionList(ctx context.Context, req *education.GetPermissionListReq) (r *education.GetPermissionListResp, err error) {
	var _args education.EducationserviceGetPermissionListArgs
	_args.Req = req
	var _result education.EducationserviceGetPermissionListResult
	if err = p.c.Call(ctx, "GetPermissionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenu(ctx context.Context, req *education.GetMenuReq) (r *education.GetMenuResp, err error) {
	var _args education.EducationserviceGetMenuArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuResult
	if err = p.c.Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenuList(ctx context.Context, req *education.GetMenuListReq) (r *education.GetMenuListResp, err error) {
	var _args education.EducationserviceGetMenuListArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuListResult
	if err = p.c.Call(ctx, "GetMenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *education.GetUserInfoReq) (r *education.GetUserInfoResp, err error) {
	var _args education.EducationserviceGetUserInfoArgs
	_args.Req = req
	var _result education.EducationserviceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthCode(ctx context.Context, req *education.GetAuthCodeReq) (r *education.GetAuthCodeResp, err error) {
	var _args education.EducationserviceGetAuthCodeArgs
	_args.Req = req
	var _result education.EducationserviceGetAuthCodeResult
	if err = p.c.Call(ctx, "GetAuthCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetUserRole(ctx context.Context, req *education.SetUserRoleReq) (r *education.SetUserRoleResp, err error) {
	var _args education.EducationserviceSetUserRoleArgs
	_args.Req = req
	var _result education.EducationserviceSetUserRoleResult
	if err = p.c.Call(ctx, "SetUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRolePermission(ctx context.Context, req *education.SetRolePermissionReq) (r *education.SetRolePermissionResp, err error) {
	var _args education.EducationserviceSetRolePermissionArgs
	_args.Req = req
	var _result education.EducationserviceSetRolePermissionResult
	if err = p.c.Call(ctx, "SetRolePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRoleMenu(ctx context.Context, req *education.SetRoleMenuReq) (r *education.SetRoleMenuResp, err error) {
	var _args education.EducationserviceSetRoleMenuArgs
	_args.Req = req
	var _result education.EducationserviceSetRoleMenuResult
	if err = p.c.Call(ctx, "SetRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *education.CreateMenuReq) (r *education.CreateMenuResp, err error) {
	var _args education.EducationserviceCreateMenuArgs
	_args.Req = req
	var _result education.EducationserviceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOffice(ctx context.Context, req *education.CreateOfficeReq) (r *education.CreateOfficeResp, err error) {
	var _args education.EducationserviceCreateOfficeArgs
	_args.Req = req
	var _result education.EducationserviceCreateOfficeResult
	if err = p.c.Call(ctx, "CreateOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOfficeList(ctx context.Context, req *education.GetOfficeListReq) (r *education.GetOfficeListResp, err error) {
	var _args education.EducationserviceGetOfficeListArgs
	_args.Req = req
	var _result education.EducationserviceGetOfficeListResult
	if err = p.c.Call(ctx, "GetOfficeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetClassList(ctx context.Context, req *education.GetClassListReq) (r *education.GetClassListResp, err error) {
	var _args education.EducationserviceGetClassListArgs
	_args.Req = req
	var _result education.EducationserviceGetClassListResult
	if err = p.c.Call(ctx, "GetClassList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportCourseApply(ctx context.Context, req *education.ImportCourseApplyReq) (r *education.ImportCourseApplyResp, err error) {
	var _args education.EducationserviceImportCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceImportCourseApplyResult
	if err = p.c.Call(ctx, "ImportCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCourseApplyList(ctx context.Context, req *education.GetCourseApplyListReq) (r *education.GetCourseApplyListResp, err error) {
	var _args education.EducationserviceGetCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetCourseApplyListResult
	if err = p.c.Call(ctx, "GetCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelfCourseApplyList(ctx context.Context, req *education.GetSelfCourseApplyListReq) (r *education.GetSelfCourseApplyListResp, err error) {
	var _args education.EducationserviceGetSelfCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetSelfCourseApplyListResult
	if err = p.c.Call(ctx, "GetSelfCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportUser(ctx context.Context, req *education.ImportUserReq) (r *education.ImportUserResp, err error) {
	var _args education.EducationserviceImportUserArgs
	_args.Req = req
	var _result education.EducationserviceImportUserResult
	if err = p.c.Call(ctx, "ImportUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourseApply(ctx context.Context, req *education.DeleteCourseApplyReq) (r *education.DeleteCourseApplyResp, err error) {
	var _args education.EducationserviceDeleteCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceDeleteCourseApplyResult
	if err = p.c.Call(ctx, "DeleteCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApproveCourseApply(ctx context.Context, req *education.ApproveCourseApplyReq) (r *education.ApproveCourseApplyResp, err error) {
	var _args education.EducationserviceApproveCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceApproveCourseApplyResult
	if err = p.c.Call(ctx, "ApproveCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetCourseApply(ctx context.Context, req *education.ResetCourseApplyReq) (r *education.ResetCourseApplyResp, err error) {
	var _args education.EducationserviceResetCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceResetCourseApplyResult
	if err = p.c.Call(ctx, "ResetCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FillCourseApply(ctx context.Context, req *education.FillCourseApplyReq) (r *education.FillCourseApplyResp, err error) {
	var _args education.EducationserviceFillCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceFillCourseApplyResult
	if err = p.c.Call(ctx, "FillCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportSelfCheckTable(ctx context.Context, req *education.ExportSelfCheckTableReq) (r *education.ExportSelfCheckTableResp, err error) {
	var _args education.EducationserviceExportSelfCheckTableArgs
	_args.Req = req
	var _result education.EducationserviceExportSelfCheckTableResult
	if err = p.c.Call(ctx, "ExportSelfCheckTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportResponsibility(ctx context.Context, req *education.ExportResponsibilityReq) (r *education.ExportResponsibilityResp, err error) {
	var _args education.EducationserviceExportResponsibilityArgs
	_args.Req = req
	var _result education.EducationserviceExportResponsibilityResult
	if err = p.c.Call(ctx, "ExportResponsibility", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportAllSelfCheckTable(ctx context.Context, req *education.ExportAllSelfCheckTableReq) (r *education.ExportAllSelfCheckTableResp, err error) {
	var _args education.EducationserviceExportAllSelfCheckTableArgs
	_args.Req = req
	var _result education.EducationserviceExportAllSelfCheckTableResult
	if err = p.c.Call(ctx, "ExportAllSelfCheckTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCourseApply(ctx context.Context, req *education.UpdateCourseApplyReq) (r *education.UpdateCourseApplyResp, err error) {
	var _args education.EducationserviceUpdateCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceUpdateCourseApplyResult
	if err = p.c.Call(ctx, "UpdateCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportCourseApply(ctx context.Context, req *education.ExportCourseApplyReq) (r *education.ExportCourseApplyResp, err error) {
	var _args education.EducationserviceExportCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceExportCourseApplyResult
	if err = p.c.Call(ctx, "ExportCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportCourseApplySummary(ctx context.Context, req *education.ExportCourseApplySummaryReq) (r *education.ExportCourseApplySummaryResp, err error) {
	var _args education.EducationserviceExportCourseApplySummaryArgs
	_args.Req = req
	var _result education.EducationserviceExportCourseApplySummaryResult
	if err = p.c.Call(ctx, "ExportCourseApplySummary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OneKeyApproveCourseApply(ctx context.Context, req *education.OneKeyApproveCourseApplyReq) (r *education.OneKeyApproveCourseApplyResp, err error) {
	var _args education.EducationserviceOneKeyApproveCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceOneKeyApproveCourseApplyResult
	if err = p.c.Call(ctx, "OneKeyApproveCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSelectData(ctx context.Context, req *education.GetSelectDataReq) (r *education.GetSelectDataResp, err error) {
	var _args education.EducationserviceGetSelectDataArgs
	_args.Req = req
	var _result education.EducationserviceGetSelectDataResult
	if err = p.c.Call(ctx, "GetSelectData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTeacherInfoList(ctx context.Context, req *education.GetTeacherInfoListReq) (r *education.GetTeacherInfoListResp, err error) {
	var _args education.EducationserviceGetTeacherInfoListArgs
	_args.Req = req
	var _result education.EducationserviceGetTeacherInfoListResult
	if err = p.c.Call(ctx, "GetTeacherInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportTeacherInfo(ctx context.Context, req *education.ImportTeacherInfoReq) (r *education.ImportTeacherInfoResp, err error) {
	var _args education.EducationserviceImportTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceImportTeacherInfoResult
	if err = p.c.Call(ctx, "ImportTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTeacherInfo(ctx context.Context, req *education.UpdateTeacherInfoReq) (r *education.UpdateTeacherInfoResp, err error) {
	var _args education.EducationserviceUpdateTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceUpdateTeacherInfoResult
	if err = p.c.Call(ctx, "UpdateTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetTeacherInfoStatus(ctx context.Context, req *education.SetTeacherInfoStatusReq) (r *education.SetTeacherInfoStatusResp, err error) {
	var _args education.EducationserviceSetTeacherInfoStatusArgs
	_args.Req = req
	var _result education.EducationserviceSetTeacherInfoStatusResult
	if err = p.c.Call(ctx, "SetTeacherInfoStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OderTeacherInfo(ctx context.Context, req *education.OrderTeacherInfoReq) (r *education.OrderTeacherInfoResp, err error) {
	var _args education.EducationserviceOderTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceOderTeacherInfoResult
	if err = p.c.Call(ctx, "OderTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *education.UpdateMenuReq) (r *education.UpdateMenuResp, err error) {
	var _args education.EducationserviceUpdateMenuArgs
	_args.Req = req
	var _result education.EducationserviceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *education.DeleteMenuReq) (r *education.DeleteMenuResp, err error) {
	var _args education.EducationserviceDeleteMenuArgs
	_args.Req = req
	var _result education.EducationserviceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToken(ctx context.Context, req *education.GetTokenReq) (r *education.GetTokenResp, err error) {
	var _args education.EducationserviceGetTokenArgs
	_args.Req = req
	var _result education.EducationserviceGetTokenResult
	if err = p.c.Call(ctx, "GetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *education.UpdateRoleReq) (r *education.UpdateRoleResp, err error) {
	var _args education.EducationserviceUpdateRoleArgs
	_args.Req = req
	var _result education.EducationserviceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRoleStatus(ctx context.Context, req *education.SetRoleStatusReq) (r *education.SetRoleStatusResp, err error) {
	var _args education.EducationserviceSetRoleStatusArgs
	_args.Req = req
	var _result education.EducationserviceSetRoleStatusResult
	if err = p.c.Call(ctx, "SetRoleStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *education.DeleteRoleReq) (r *education.DeleteRoleResp, err error) {
	var _args education.EducationserviceDeleteRoleArgs
	_args.Req = req
	var _result education.EducationserviceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOffice(ctx context.Context, req *education.DeleteOfficeReq) (r *education.DeleteOfficeResp, err error) {
	var _args education.EducationserviceDeleteOfficeArgs
	_args.Req = req
	var _result education.EducationserviceDeleteOfficeResult
	if err = p.c.Call(ctx, "DeleteOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOffice(ctx context.Context, req *education.UpdateOfficeReq) (r *education.UpdateOfficeResp, err error) {
	var _args education.EducationserviceUpdateOfficeArgs
	_args.Req = req
	var _result education.EducationserviceUpdateOfficeResult
	if err = p.c.Call(ctx, "UpdateOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, req *education.UpdateUserReq) (r *education.UpdateUserResp, err error) {
	var _args education.EducationserviceUpdateUserArgs
	_args.Req = req
	var _result education.EducationserviceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, req *education.ResetPasswordReq) (r *education.ResetPasswordResp, err error) {
	var _args education.EducationserviceResetPasswordArgs
	_args.Req = req
	var _result education.EducationserviceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTeacherInfo(ctx context.Context, req *education.DeleteTeacherInfoReq) (r *education.DeleteTeacherInfoResp, err error) {
	var _args education.EducationserviceDeleteTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceDeleteTeacherInfoResult
	if err = p.c.Call(ctx, "DeleteTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTeacherInfo(ctx context.Context, req *education.CreateTeacherInfoReq) (r *education.CreateTeacherInfoResp, err error) {
	var _args education.EducationserviceCreateTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceCreateTeacherInfoResult
	if err = p.c.Call(ctx, "CreateTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportTeacherInfo(ctx context.Context, req *education.ExportTeacherInfoReq) (r *education.ExportTeacherInfoResp, err error) {
	var _args education.EducationserviceExportTeacherInfoArgs
	_args.Req = req
	var _result education.EducationserviceExportTeacherInfoResult
	if err = p.c.Call(ctx, "ExportTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

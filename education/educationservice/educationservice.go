// Code generated by Kitex v0.11.3. DO NOT EDIT.

package educationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	education "github.com/cylScripter/openapi/education"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApp": kitex.NewMethodInfo(
		createAppHandler,
		newEducationserviceCreateAppArgs,
		newEducationserviceCreateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newEducationserviceLoginArgs,
		newEducationserviceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateUser": kitex.NewMethodInfo(
		createUserHandler,
		newEducationserviceCreateUserArgs,
		newEducationserviceCreateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newEducationserviceCreateRoleArgs,
		newEducationserviceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteUser": kitex.NewMethodInfo(
		deleteUserHandler,
		newEducationserviceDeleteUserArgs,
		newEducationserviceDeleteUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserList": kitex.NewMethodInfo(
		getUserListHandler,
		newEducationserviceGetUserListArgs,
		newEducationserviceGetUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newEducationserviceGetRoleListArgs,
		newEducationserviceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreatePermission": kitex.NewMethodInfo(
		createPermissionHandler,
		newEducationserviceCreatePermissionArgs,
		newEducationserviceCreatePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPermissionList": kitex.NewMethodInfo(
		getPermissionListHandler,
		newEducationserviceGetPermissionListArgs,
		newEducationserviceGetPermissionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenu": kitex.NewMethodInfo(
		getMenuHandler,
		newEducationserviceGetMenuArgs,
		newEducationserviceGetMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenuList": kitex.NewMethodInfo(
		getMenuListHandler,
		newEducationserviceGetMenuListArgs,
		newEducationserviceGetMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetUserRole": kitex.NewMethodInfo(
		setUserRoleHandler,
		newEducationserviceSetUserRoleArgs,
		newEducationserviceSetUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRolePermission": kitex.NewMethodInfo(
		setRolePermissionHandler,
		newEducationserviceSetRolePermissionArgs,
		newEducationserviceSetRolePermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetRoleMenu": kitex.NewMethodInfo(
		setRoleMenuHandler,
		newEducationserviceSetRoleMenuArgs,
		newEducationserviceSetRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newEducationserviceCreateMenuArgs,
		newEducationserviceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateOffice": kitex.NewMethodInfo(
		createOfficeHandler,
		newEducationserviceCreateOfficeArgs,
		newEducationserviceCreateOfficeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOfficeList": kitex.NewMethodInfo(
		getOfficeListHandler,
		newEducationserviceGetOfficeListArgs,
		newEducationserviceGetOfficeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportCourseApply": kitex.NewMethodInfo(
		importCourseApplyHandler,
		newEducationserviceImportCourseApplyArgs,
		newEducationserviceImportCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCourseApplyList": kitex.NewMethodInfo(
		getCourseApplyListHandler,
		newEducationserviceGetCourseApplyListArgs,
		newEducationserviceGetCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMyCourseApplyList": kitex.NewMethodInfo(
		getMyCourseApplyListHandler,
		newEducationserviceGetMyCourseApplyListArgs,
		newEducationserviceGetMyCourseApplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCourseApply": kitex.NewMethodInfo(
		deleteCourseApplyHandler,
		newEducationserviceDeleteCourseApplyArgs,
		newEducationserviceDeleteCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApproveCourseApply": kitex.NewMethodInfo(
		approveCourseApplyHandler,
		newEducationserviceApproveCourseApplyArgs,
		newEducationserviceApproveCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetCourseApply": kitex.NewMethodInfo(
		resetCourseApplyHandler,
		newEducationserviceResetCourseApplyArgs,
		newEducationserviceResetCourseApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	educationserviceServiceInfo                = NewServiceInfo()
	educationserviceServiceInfoForClient       = NewServiceInfoForClient()
	educationserviceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return educationserviceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return educationserviceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "educationservice"
	handlerType := (*education.Educationservice)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "education",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateAppArgs)
	realResult := result.(*education.EducationserviceCreateAppResult)
	success, err := handler.(education.Educationservice).CreateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateAppArgs() interface{} {
	return education.NewEducationserviceCreateAppArgs()
}

func newEducationserviceCreateAppResult() interface{} {
	return education.NewEducationserviceCreateAppResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceLoginArgs)
	realResult := result.(*education.EducationserviceLoginResult)
	success, err := handler.(education.Educationservice).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceLoginArgs() interface{} {
	return education.NewEducationserviceLoginArgs()
}

func newEducationserviceLoginResult() interface{} {
	return education.NewEducationserviceLoginResult()
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateUserArgs)
	realResult := result.(*education.EducationserviceCreateUserResult)
	success, err := handler.(education.Educationservice).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateUserArgs() interface{} {
	return education.NewEducationserviceCreateUserArgs()
}

func newEducationserviceCreateUserResult() interface{} {
	return education.NewEducationserviceCreateUserResult()
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateRoleArgs)
	realResult := result.(*education.EducationserviceCreateRoleResult)
	success, err := handler.(education.Educationservice).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateRoleArgs() interface{} {
	return education.NewEducationserviceCreateRoleArgs()
}

func newEducationserviceCreateRoleResult() interface{} {
	return education.NewEducationserviceCreateRoleResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteUserArgs)
	realResult := result.(*education.EducationserviceDeleteUserResult)
	success, err := handler.(education.Educationservice).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteUserArgs() interface{} {
	return education.NewEducationserviceDeleteUserArgs()
}

func newEducationserviceDeleteUserResult() interface{} {
	return education.NewEducationserviceDeleteUserResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetUserListArgs)
	realResult := result.(*education.EducationserviceGetUserListResult)
	success, err := handler.(education.Educationservice).GetUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetUserListArgs() interface{} {
	return education.NewEducationserviceGetUserListArgs()
}

func newEducationserviceGetUserListResult() interface{} {
	return education.NewEducationserviceGetUserListResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetRoleListArgs)
	realResult := result.(*education.EducationserviceGetRoleListResult)
	success, err := handler.(education.Educationservice).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetRoleListArgs() interface{} {
	return education.NewEducationserviceGetRoleListArgs()
}

func newEducationserviceGetRoleListResult() interface{} {
	return education.NewEducationserviceGetRoleListResult()
}

func createPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreatePermissionArgs)
	realResult := result.(*education.EducationserviceCreatePermissionResult)
	success, err := handler.(education.Educationservice).CreatePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreatePermissionArgs() interface{} {
	return education.NewEducationserviceCreatePermissionArgs()
}

func newEducationserviceCreatePermissionResult() interface{} {
	return education.NewEducationserviceCreatePermissionResult()
}

func getPermissionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetPermissionListArgs)
	realResult := result.(*education.EducationserviceGetPermissionListResult)
	success, err := handler.(education.Educationservice).GetPermissionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetPermissionListArgs() interface{} {
	return education.NewEducationserviceGetPermissionListArgs()
}

func newEducationserviceGetPermissionListResult() interface{} {
	return education.NewEducationserviceGetPermissionListResult()
}

func getMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuArgs)
	realResult := result.(*education.EducationserviceGetMenuResult)
	success, err := handler.(education.Educationservice).GetMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuArgs() interface{} {
	return education.NewEducationserviceGetMenuArgs()
}

func newEducationserviceGetMenuResult() interface{} {
	return education.NewEducationserviceGetMenuResult()
}

func getMenuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMenuListArgs)
	realResult := result.(*education.EducationserviceGetMenuListResult)
	success, err := handler.(education.Educationservice).GetMenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMenuListArgs() interface{} {
	return education.NewEducationserviceGetMenuListArgs()
}

func newEducationserviceGetMenuListResult() interface{} {
	return education.NewEducationserviceGetMenuListResult()
}

func setUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetUserRoleArgs)
	realResult := result.(*education.EducationserviceSetUserRoleResult)
	success, err := handler.(education.Educationservice).SetUserRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetUserRoleArgs() interface{} {
	return education.NewEducationserviceSetUserRoleArgs()
}

func newEducationserviceSetUserRoleResult() interface{} {
	return education.NewEducationserviceSetUserRoleResult()
}

func setRolePermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRolePermissionArgs)
	realResult := result.(*education.EducationserviceSetRolePermissionResult)
	success, err := handler.(education.Educationservice).SetRolePermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRolePermissionArgs() interface{} {
	return education.NewEducationserviceSetRolePermissionArgs()
}

func newEducationserviceSetRolePermissionResult() interface{} {
	return education.NewEducationserviceSetRolePermissionResult()
}

func setRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceSetRoleMenuArgs)
	realResult := result.(*education.EducationserviceSetRoleMenuResult)
	success, err := handler.(education.Educationservice).SetRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceSetRoleMenuArgs() interface{} {
	return education.NewEducationserviceSetRoleMenuArgs()
}

func newEducationserviceSetRoleMenuResult() interface{} {
	return education.NewEducationserviceSetRoleMenuResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateMenuArgs)
	realResult := result.(*education.EducationserviceCreateMenuResult)
	success, err := handler.(education.Educationservice).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateMenuArgs() interface{} {
	return education.NewEducationserviceCreateMenuArgs()
}

func newEducationserviceCreateMenuResult() interface{} {
	return education.NewEducationserviceCreateMenuResult()
}

func createOfficeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceCreateOfficeArgs)
	realResult := result.(*education.EducationserviceCreateOfficeResult)
	success, err := handler.(education.Educationservice).CreateOffice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceCreateOfficeArgs() interface{} {
	return education.NewEducationserviceCreateOfficeArgs()
}

func newEducationserviceCreateOfficeResult() interface{} {
	return education.NewEducationserviceCreateOfficeResult()
}

func getOfficeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetOfficeListArgs)
	realResult := result.(*education.EducationserviceGetOfficeListResult)
	success, err := handler.(education.Educationservice).GetOfficeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetOfficeListArgs() interface{} {
	return education.NewEducationserviceGetOfficeListArgs()
}

func newEducationserviceGetOfficeListResult() interface{} {
	return education.NewEducationserviceGetOfficeListResult()
}

func importCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceImportCourseApplyArgs)
	realResult := result.(*education.EducationserviceImportCourseApplyResult)
	success, err := handler.(education.Educationservice).ImportCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceImportCourseApplyArgs() interface{} {
	return education.NewEducationserviceImportCourseApplyArgs()
}

func newEducationserviceImportCourseApplyResult() interface{} {
	return education.NewEducationserviceImportCourseApplyResult()
}

func getCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetCourseApplyListArgs()
}

func newEducationserviceGetCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetCourseApplyListResult()
}

func getMyCourseApplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceGetMyCourseApplyListArgs)
	realResult := result.(*education.EducationserviceGetMyCourseApplyListResult)
	success, err := handler.(education.Educationservice).GetMyCourseApplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceGetMyCourseApplyListArgs() interface{} {
	return education.NewEducationserviceGetMyCourseApplyListArgs()
}

func newEducationserviceGetMyCourseApplyListResult() interface{} {
	return education.NewEducationserviceGetMyCourseApplyListResult()
}

func deleteCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceDeleteCourseApplyArgs)
	realResult := result.(*education.EducationserviceDeleteCourseApplyResult)
	success, err := handler.(education.Educationservice).DeleteCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceDeleteCourseApplyArgs() interface{} {
	return education.NewEducationserviceDeleteCourseApplyArgs()
}

func newEducationserviceDeleteCourseApplyResult() interface{} {
	return education.NewEducationserviceDeleteCourseApplyResult()
}

func approveCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceApproveCourseApplyArgs)
	realResult := result.(*education.EducationserviceApproveCourseApplyResult)
	success, err := handler.(education.Educationservice).ApproveCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceApproveCourseApplyArgs() interface{} {
	return education.NewEducationserviceApproveCourseApplyArgs()
}

func newEducationserviceApproveCourseApplyResult() interface{} {
	return education.NewEducationserviceApproveCourseApplyResult()
}

func resetCourseApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*education.EducationserviceResetCourseApplyArgs)
	realResult := result.(*education.EducationserviceResetCourseApplyResult)
	success, err := handler.(education.Educationservice).ResetCourseApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEducationserviceResetCourseApplyArgs() interface{} {
	return education.NewEducationserviceResetCourseApplyArgs()
}

func newEducationserviceResetCourseApplyResult() interface{} {
	return education.NewEducationserviceResetCourseApplyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApp(ctx context.Context, req *education.CreateAppReq) (r *education.CreateAppResp, err error) {
	var _args education.EducationserviceCreateAppArgs
	_args.Req = req
	var _result education.EducationserviceCreateAppResult
	if err = p.c.Call(ctx, "CreateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *education.LoginReq) (r *education.LoginResp, err error) {
	var _args education.EducationserviceLoginArgs
	_args.Req = req
	var _result education.EducationserviceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, req *education.CreateUserReq) (r *education.CreateUserResp, err error) {
	var _args education.EducationserviceCreateUserArgs
	_args.Req = req
	var _result education.EducationserviceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRole(ctx context.Context, req *education.CreateRoleReq) (r *education.CreateRoleResp, err error) {
	var _args education.EducationserviceCreateRoleArgs
	_args.Req = req
	var _result education.EducationserviceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *education.DeleteUserReq) (r *education.DeleteUserResp, err error) {
	var _args education.EducationserviceDeleteUserArgs
	_args.Req = req
	var _result education.EducationserviceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, req *education.GetUserListReq) (r *education.GetUserListResp, err error) {
	var _args education.EducationserviceGetUserListArgs
	_args.Req = req
	var _result education.EducationserviceGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *education.GetRoleListReq) (r *education.GetRoleListResp, err error) {
	var _args education.EducationserviceGetRoleListArgs
	_args.Req = req
	var _result education.EducationserviceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePermission(ctx context.Context, req *education.CreatePermissionReq) (r *education.CreatePermissionResp, err error) {
	var _args education.EducationserviceCreatePermissionArgs
	_args.Req = req
	var _result education.EducationserviceCreatePermissionResult
	if err = p.c.Call(ctx, "CreatePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPermissionList(ctx context.Context, req *education.GetPermissionListReq) (r *education.GetPermissionListResp, err error) {
	var _args education.EducationserviceGetPermissionListArgs
	_args.Req = req
	var _result education.EducationserviceGetPermissionListResult
	if err = p.c.Call(ctx, "GetPermissionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenu(ctx context.Context, req *education.GetMenuReq) (r *education.GetMenuResp, err error) {
	var _args education.EducationserviceGetMenuArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuResult
	if err = p.c.Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenuList(ctx context.Context, req *education.GetMenuListReq) (r *education.GetMenuListResp, err error) {
	var _args education.EducationserviceGetMenuListArgs
	_args.Req = req
	var _result education.EducationserviceGetMenuListResult
	if err = p.c.Call(ctx, "GetMenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetUserRole(ctx context.Context, req *education.SetUserRoleReq) (r *education.SetUserRoleResp, err error) {
	var _args education.EducationserviceSetUserRoleArgs
	_args.Req = req
	var _result education.EducationserviceSetUserRoleResult
	if err = p.c.Call(ctx, "SetUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRolePermission(ctx context.Context, req *education.SetRolePermissionReq) (r *education.SetRolePermissionResp, err error) {
	var _args education.EducationserviceSetRolePermissionArgs
	_args.Req = req
	var _result education.EducationserviceSetRolePermissionResult
	if err = p.c.Call(ctx, "SetRolePermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRoleMenu(ctx context.Context, req *education.SetRoleMenuReq) (r *education.SetRoleMenuResp, err error) {
	var _args education.EducationserviceSetRoleMenuArgs
	_args.Req = req
	var _result education.EducationserviceSetRoleMenuResult
	if err = p.c.Call(ctx, "SetRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *education.CreateMenuReq) (r *education.CreateMenuResp, err error) {
	var _args education.EducationserviceCreateMenuArgs
	_args.Req = req
	var _result education.EducationserviceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOffice(ctx context.Context, req *education.CreateOfficeReq) (r *education.CreateOfficeResp, err error) {
	var _args education.EducationserviceCreateOfficeArgs
	_args.Req = req
	var _result education.EducationserviceCreateOfficeResult
	if err = p.c.Call(ctx, "CreateOffice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOfficeList(ctx context.Context, req *education.GetOfficeListReq) (r *education.GetOfficeListResp, err error) {
	var _args education.EducationserviceGetOfficeListArgs
	_args.Req = req
	var _result education.EducationserviceGetOfficeListResult
	if err = p.c.Call(ctx, "GetOfficeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportCourseApply(ctx context.Context, req *education.ImportCourseApplyReq) (r *education.ImportCourseApplyResp, err error) {
	var _args education.EducationserviceImportCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceImportCourseApplyResult
	if err = p.c.Call(ctx, "ImportCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCourseApplyList(ctx context.Context, req *education.GetCourseApplyListReq) (r *education.GetCourseApplyListResp, err error) {
	var _args education.EducationserviceGetCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetCourseApplyListResult
	if err = p.c.Call(ctx, "GetCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMyCourseApplyList(ctx context.Context, req *education.GetSelfCourseApplyListReq) (r *education.GetSelfCourseApplyListResp, err error) {
	var _args education.EducationserviceGetMyCourseApplyListArgs
	_args.Req = req
	var _result education.EducationserviceGetMyCourseApplyListResult
	if err = p.c.Call(ctx, "GetMyCourseApplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourseApply(ctx context.Context, req *education.DeleteCourseApplyReq) (r *education.DeleteCourseApplyResp, err error) {
	var _args education.EducationserviceDeleteCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceDeleteCourseApplyResult
	if err = p.c.Call(ctx, "DeleteCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApproveCourseApply(ctx context.Context, req *education.ApproveCourseApplyReq) (r *education.ApproveCourseApplyResp, err error) {
	var _args education.EducationserviceApproveCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceApproveCourseApplyResult
	if err = p.c.Call(ctx, "ApproveCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetCourseApply(ctx context.Context, req *education.ResetCourseApplyReq) (r *education.ResetCourseApplyResp, err error) {
	var _args education.EducationserviceResetCourseApplyArgs
	_args.Req = req
	var _result education.EducationserviceResetCourseApplyResult
	if err = p.c.Call(ctx, "ResetCourseApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

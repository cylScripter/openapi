// Code generated by Kitex v0.11.3. DO NOT EDIT.

package harborservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	harbor "github.com/cylScripter/openapi/harbor"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Test(ctx context.Context, req *harbor.TestReq, callOptions ...callopt.Option) (r *harbor.TestResp, err error)
	GetProjectList(ctx context.Context, req *harbor.GetProjectListReq, callOptions ...callopt.Option) (r *harbor.GetProjectListResp, err error)
	GetRepositoryList(ctx context.Context, req *harbor.GetRepositoryListReq, callOptions ...callopt.Option) (r *harbor.GetRepositoryListResp, err error)
	GetArtifactList(ctx context.Context, req *harbor.GetArtifactListReq, callOptions ...callopt.Option) (r *harbor.GetArtifactListResp, err error)
	DeleteArtifact(ctx context.Context, req *harbor.DeleteArtifactReq, callOptions ...callopt.Option) (r *harbor.DeleteArtifactResp, err error)
	GetHarborConfigList(ctx context.Context, req *harbor.GetHarborConfigListReq, callOptions ...callopt.Option) (r *harbor.GetHarborConfigListResp, err error)
	DeleteHarborConfig(ctx context.Context, req *harbor.DeleteHarborConfigReq, callOptions ...callopt.Option) (r *harbor.DeleteHarborConfigResp, err error)
	CreateHarborConfig(ctx context.Context, req *harbor.CreateHarborConfigReq, callOptions ...callopt.Option) (r *harbor.CreateHarborConfigResp, err error)
	UpdateHarborConfig(ctx context.Context, req *harbor.UpdateHarborConfigReq, callOptions ...callopt.Option) (r *harbor.UpdateHarborConfigResp, err error)
	PatchStatefulSetImage(ctx context.Context, req *harbor.PatchStatefulSetImageReq, callOptions ...callopt.Option) (r *harbor.PatchStatefulSetImageResp, err error)
	GetStatefulSetContainer(ctx context.Context, req *harbor.GetStatefulSetContainerReq, callOptions ...callopt.Option) (r *harbor.GetStatefulSetContainerResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kHarborserviceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kHarborserviceClient struct {
	*kClient
}

func (p *kHarborserviceClient) Test(ctx context.Context, req *harbor.TestReq, callOptions ...callopt.Option) (r *harbor.TestResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Test(ctx, req)
}

func (p *kHarborserviceClient) GetProjectList(ctx context.Context, req *harbor.GetProjectListReq, callOptions ...callopt.Option) (r *harbor.GetProjectListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProjectList(ctx, req)
}

func (p *kHarborserviceClient) GetRepositoryList(ctx context.Context, req *harbor.GetRepositoryListReq, callOptions ...callopt.Option) (r *harbor.GetRepositoryListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRepositoryList(ctx, req)
}

func (p *kHarborserviceClient) GetArtifactList(ctx context.Context, req *harbor.GetArtifactListReq, callOptions ...callopt.Option) (r *harbor.GetArtifactListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArtifactList(ctx, req)
}

func (p *kHarborserviceClient) DeleteArtifact(ctx context.Context, req *harbor.DeleteArtifactReq, callOptions ...callopt.Option) (r *harbor.DeleteArtifactResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteArtifact(ctx, req)
}

func (p *kHarborserviceClient) GetHarborConfigList(ctx context.Context, req *harbor.GetHarborConfigListReq, callOptions ...callopt.Option) (r *harbor.GetHarborConfigListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHarborConfigList(ctx, req)
}

func (p *kHarborserviceClient) DeleteHarborConfig(ctx context.Context, req *harbor.DeleteHarborConfigReq, callOptions ...callopt.Option) (r *harbor.DeleteHarborConfigResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteHarborConfig(ctx, req)
}

func (p *kHarborserviceClient) CreateHarborConfig(ctx context.Context, req *harbor.CreateHarborConfigReq, callOptions ...callopt.Option) (r *harbor.CreateHarborConfigResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateHarborConfig(ctx, req)
}

func (p *kHarborserviceClient) UpdateHarborConfig(ctx context.Context, req *harbor.UpdateHarborConfigReq, callOptions ...callopt.Option) (r *harbor.UpdateHarborConfigResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateHarborConfig(ctx, req)
}

func (p *kHarborserviceClient) PatchStatefulSetImage(ctx context.Context, req *harbor.PatchStatefulSetImageReq, callOptions ...callopt.Option) (r *harbor.PatchStatefulSetImageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchStatefulSetImage(ctx, req)
}

func (p *kHarborserviceClient) GetStatefulSetContainer(ctx context.Context, req *harbor.GetStatefulSetContainerReq, callOptions ...callopt.Option) (r *harbor.GetStatefulSetContainerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStatefulSetContainer(ctx, req)
}
